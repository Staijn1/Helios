{
	"info": {
		"_postman_id": "2b309730-2868-461a-9a56-45c9d4d3bb8e",
		"name": "Helios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Install",
			"item": [
				{
					"name": "Create helios  als niet bestaat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let helios_password = pm.environment.get(\"helios_password\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "{{helios_password}}",
									"type": "text"
								},
								{
									"key": "maak_database",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/install.php",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"install.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Types",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Groep = 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let groep = pm.environment.get(\"groep\");",
													"",
													"",
													"pm.test(\"Aantal records == 9\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(9);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"9\");",
													"});",
													"",
													"pm.test(\"GROEP == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].GROEP) !== groep)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"groep\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?GROEP={{groep}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "GROEP",
													"value": "{{groep}}"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft GROEP', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('GROEP');",
											"});",
											"",
											"pm.test('Heeft CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CODE');",
											"});",
											"",
											"pm.test('Heeft EXT_REF', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('EXT_REF');",
											"});",
											"",
											"pm.test('Heeft OMSCHRIJVING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OMSCHRIJVING');",
											"});",
											"",
											"pm.test('Heeft SORTEER_VOLGORDE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('SORTEER_VOLGORDE');",
											"});",
											"",
											"pm.test('Heeft READ_ONLY', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('READ_ONLY');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, OMSCHRIJVING",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, OMSCHRIJVING"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  GROEP: 1,",
															"  CODE: \"CODE\",",
															"  EXT_REF: \"EXT_REF\",",
															"  OMSCHRIJVING: \"OMSCHRIJVING\",",
															"  SORTEER_VOLGORDE: 99,",
															"  READ_ONLY: 0",
															"};",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  GROEP: 1000,",
															"  CODE: \"EDOC\",",
															"  EXT_REF: \"abcdefs\",",
															"  OMSCHRIJVING: \"GNIVJIRHCSMO\",",
															"  SORTEER_VOLGORDE: 2,",
															"  READ_ONLY: 1",
															"};",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  GROEP: 1000,",
															"  CODE: null,",
															"  EXT_REF: null,",
															"  OMSCHRIJVING: \"GNIVJI\",",
															"  SORTEER_VOLGORDE: null,",
															"  READ_ONLY: 0",
															"};",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"    ",
											"// Test of velden aanwezig zijn",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft GROEP', function() {",
											"  pm.expect(jsonData).to.have.property('GROEP');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft CODE', function() {",
											"  pm.expect(jsonData).to.have.property('CODE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft EXT_REF', function() {",
											"  pm.expect(jsonData).to.have.property('EXT_REF');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OMSCHRIJVING', function() {",
											"  pm.expect(jsonData).to.have.property('OMSCHRIJVING');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft SORTEER_VOLGORDE', function() {",
											"  pm.expect(jsonData).to.have.property('SORTEER_VOLGORDE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft READ_ONLY', function() {",
											"  pm.expect(jsonData).to.have.property('READ_ONLY');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Groep geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?GROEP=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "GROEP",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Groep geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: \"ascii\",",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SORTEER_VOLGORDE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: \"ascii\",",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan READ_ONLY geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan READ_ONLY geen bool 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: \"ascii\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"GROEP\": 1,",
													"  \"CODE\": \"CODE\",",
													"  \"EXT_REF\": \"EXT_REF\",",
													"  \"OMSCHRIJVING\": \"OMSCHRIJVING\",",
													"  \"SORTEER_VOLGORDE\": 99,",
													"  \"READ_ONLY\": 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen GROEP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen OMSCHRIJVING",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"//  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: 101,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Types\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Competenties",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Leerfase VVO-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"groep\", 1002);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let groep = pm.environment.get(\"groep\");",
													"",
													"",
													"pm.test(\"Aantal records == 9\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(18);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"18\");",
													"});",
													"",
													"pm.test(\"LEERFASE_ID == 1002\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].LEERFASE_ID) !== groep)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID={{groep}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "{{groep}}"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft LEERFASE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LEERFASE_ID');",
											"});",
											"",
											"pm.test('Heeft BLOK', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BLOK');",
											"});",
											"",
											"pm.test('Heeft ONDERWERP', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ONDERWERP');",
											"});",
											"",
											"pm.test('Heeft DOCUMENTATIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DOCUMENTATIE');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, ONDERWERP",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, ONDERWERP"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    LEERFASE_ID: \"1001\",",
															"    BLOK: \"900.00\",",
															"    ONDERWERP: \"ONDERWERP\",",
															"    DOCUMENTATIE: \"DOCUMENTATIE\"",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record =",
															"{",
															"    LEERFASE_ID: \"1002\",",
															"    BLOK: \"-1.-11\",",
															"    VOLGORDE: \"22\",",
															"    DOCUMENTATIE: \"beschrijving\",",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record =",
															"{",
															"    BLOK: null,",
															"    VOLGORDE: null,",
															"    DOCUMENTATIE: null,",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"    ",
											"// Test of velden aanwezig zijn",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LEERFASE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LEERFASE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ONDERWERP', function() {",
											"  pm.expect(jsonData).to.have.property('ONDERWERP');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DOCUMENTATIE', function() {",
											"  pm.expect(jsonData).to.have.property('DOCUMENTATIE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft BLOK', function() {",
											"  pm.expect(jsonData).to.have.property('BLOK');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan vekeerde leerfase",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"10010\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects LEERFASE_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LEERFASE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"ascii\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"GROEP\": 1,",
													"  \"CODE\": \"CODE\",",
													"  \"EXT_REF\": \"EXT_REF\",",
													"  \"OMSCHRIJVING\": \"OMSCHRIJVING\",",
													"  \"SORTEER_VOLGORDE\": 99,",
													"  \"READ_ONLY\": 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LEERFASE_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen ONDERWERP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"//    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DOCUMENTATIE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"//    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record =",
													"{",
													"    ID: 22,",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Competenties\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Daginfo",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);",
													"pm.environment.set(\"getObjectDatum\", jsonData.dataset[0].DATUM);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft BAAN_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BAAN_ID');",
											"});",
											"",
											"pm.test('Heeft BEDRIJF_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BEDRIJF_ID');",
											"});",
											"",
											"pm.test('Heeft DDWV', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DDWV');",
											"});",
											"",
											"pm.test('Heeft CLUB_BEDRIJF', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CLUB_BEDRIJF');",
											"});",
											"",
											"pm.test('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"pm.test('Heeft VLIEGBEDRIJF', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGBEDRIJF');",
											"});",
											"",
											"pm.test('Heeft METEO', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('METEO');",
											"});",
											"",
											"pm.test('Heeft DIENSTEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DIENSTEN');",
											"});",
											"",
											"pm.test('Heeft VERSLAG', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERSLAG');",
											"});",
											"",
											"pm.test('Heeft ROLLENDMATERIEEL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ROLLENDMATERIEEL');",
											"});",
											"",
											"pm.test('Heeft VLIEGENDMATERIEEL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGENDMATERIEEL');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft VELD_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VELD_CODE');",
											"});",
											"",
											"pm.test('Heeft VELD_OMS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VELD_OMS');",
											"});",
											"",
											"pm.test('Heeft BAAN_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BAAN_CODE');",
											"});",
											"",
											"pm.test('Heeft BAAN_OMS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BAAN_OMS');",
											"});",
											"",
											"pm.test('Heeft BEDRIJF_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BEDRIJF_CODE');",
											"});",
											"",
											"pm.test('Heeft BEDRIJF_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BEDRIJF_CODE');",
											"});",
											"",
											"pm.test('Heeft STARTMETHODE_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_CODE');",
											"});",
											"",
											"pm.test('Heeft STARTMETHODE_OMS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_OMS');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, VELD_OMS",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, VELD_OMS"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SavObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    VELD_ID: \"901\",",
															"    BAAN_ID: \"109\",",
															"    BEDRIJF_ID: \"1550\",",
															"    DDWV: \"0\",",
															"    CLUB_BEDRIJF: \"1\"",
															"};",
															"",
															"let verleden = Math.floor(Math.random() * 5000);",
															"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
															"record.DATUM = d.toISOString().substring(0,10);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    ",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"let record = {",
															"    VELD_ID: 902,",
															"    BAAN_ID: 107,",
															"    BEDRIJF_ID: 1553,",
															"    STARTMETHODE_ID: 610,",
															"    OPMERKINGEN: \"Zomerkamp dag 8\",  ",
															"    VLIEGBEDRIJF: \"Het vliegbedrijf bevatte de volgende aspect(en), lier, sleep en zelfstart op de 22R met een rechterhand circuit. Halverwege de dag omgesteld naar 27C\",",
															"    METEO: \"Het zicht was > 10 km. De windrichting was 270 met  windkracht 3.4 - 5.42 m/s. Er was 2/8 bewolking. De wolkenbasis was 800 meter hoog.\",       ",
															"    DIENSTEN: \"Jan, Maartje, Mohammed aanwezig. Klaas had zich verslapen en kwam om 11:00\",  ",
															"    VERSLAG: \"Rustige dag met een klein ploegje mensen ondanks het prachtige weer. Omstellen ging zonder problemen, vliegende kisten konden blijven hangen\",",
															"    ROLLENDMATERIEEL:\"De motor van de lier wordt warm\",",
															"    VLIEGENDMATERIEEL: \"De E11 is in de werkplaats gezet ivm lekke band. Wordt maandag opgelost\"",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"let record = {",
															"    VELD_ID: null,",
															"    BAAN_ID: null,",
															"    BEDRIJF_ID: null,",
															"    STARTMETHODE_ID: null,",
															"    OPMERKINGEN: null,",
															"    VLIEGBEDRIJF: null,",
															"    METEO: null,       ",
															"    DIENSTEN: null,",
															"    VERSLAG: null,",
															"    ROLLENDMATERIEEL: null,",
															"    VLIEGENDMATERIEEL: null",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject by DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectDatum =  pm.environment.get(\"getObjectDatum\");",
													"console.log(\"GetObject datum=\" + getObjectDatum);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?DATUM={{getObjectDatum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "DATUM",
													"value": "{{getObjectDatum}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DATUM', function() {",
											"  pm.expect(jsonData).to.have.property('DATUM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft BAAN_ID', function() {",
											"  pm.expect(jsonData).to.have.property('BAAN_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft BEDRIJF_ID', function() {",
											"  pm.expect(jsonData).to.have.property('BEDRIJF_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DDWV', function() {",
											"  pm.expect(jsonData).to.have.property('DDWV');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft CLUB_BEDRIJF', function() {",
											"  pm.expect(jsonData).to.have.property('CLUB_BEDRIJF');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGBEDRIJF', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGBEDRIJF');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft METEO', function() {",
											"  pm.expect(jsonData).to.have.property('METEO');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DIENSTEN', function() {",
											"  pm.expect(jsonData).to.have.property('DIENSTEN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERSLAG', function() {",
											"  pm.expect(jsonData).to.have.property('VERSLAG');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ROLLENDMATERIEEL', function() {",
											"  pm.expect(jsonData).to.have.property('ROLLENDMATERIEEL');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGENDMATERIEEL', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGENDMATERIEEL');",
											"});",
											"",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"90100\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde baan",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"10900\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd bedrijf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"155000\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde startmethode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    STARTMETHODE_ID: \"12012\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"1967-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VELD_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1970-12-01\",",
													"    VELD_ID: \"AA\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan BAAN_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1971-02-11\",",
													"    BAAN_ID: \"10o\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan BEDRIJF_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1976-01-08\",",
													"    BEDRIJF_ID: \"ZZZZ\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTMETHODE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1981-02-05\",",
													"    STARTMETHODE_ID: \"II\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SOORTBEDRIJF_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1990-04-05\",",
													"    BEDRIJF_ID: \"*****\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-02-30\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"ascii\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record dubbele datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"1999-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"record.DATUM = pm.environment.get('dit_jaar') + \"-04-28\"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    ID: \"1\",",
													"    DATUM: \"2009-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Daginfo\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Vliegtuigen",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Clubkisten",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"CLUBKIST == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].CLUBKIST) !== 1)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?CLUBKIST=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "CLUBKIST",
													"value": "true"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects ID 212,214",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ID == 212,214\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if ((parseInt(jsonData.dataset[index].ID) !== 212) && (parseInt(jsonData.dataset[index].ID) !== 214))",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?IN=212,214",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "212,214"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ZITPLAATSEN == 2\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].ZITPLAATSEN) !== 2)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects SELECTIE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?SELECTIE=PH-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SELECTIE",
													"value": "PH-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Sleepkist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SLEEPKIST == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].SLEEPKIST) !== 1)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?SLEEPKIST=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SLEEPKIST",
													"value": "true"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft REGISTRATIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REGISTRATIE');",
											"});",
											"",
											"pm.test('Heeft CALLSIGN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CALLSIGN');",
											"});",
											"",
											"pm.test('Heeft FLARMCODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('FLARMCODE');",
											"});",
											"",
											"pm.test('Heeft ZITPLAATSEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ZITPLAATSEN');",
											"});",
											"",
											"pm.test('Heeft ZELFSTART', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ZELFSTART');",
											"});",
											"",
											"pm.test('Heeft CLUBKIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CLUBKIST');",
											"});",
											"",
											"pm.test('Heeft TMG', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TMG');",
											"});",
											"",
											"pm.test('Heeft SLEEPKIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('SLEEPKIST');",
											"});",
											"",
											"pm.test('Heeft TYPE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TYPE_ID');",
											"});",
											"",
											"pm.test('Heeft VOLGORDE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VOLGORDE');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft VLIEGTUIGTYPE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE');",
											"});",
											"",
											"pm.test('Heeft REG_CALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects TMG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"pm.test(\"TMG == 1\", function () {",
											"    var fout = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (parseInt(jsonData.dataset[index].TMG) !== 1)",
											"            fout = 1;",
											"    }",
											"    pm.expect(fout).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/GetObjects?TMG=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "TMG",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"pm.test(\"Aantal == 2\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(aantal).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/GetObjects?TYPES= 404, 405",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "TYPES",
											"value": " 404, 405"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects IN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"pm.test(\"Aantal == 2\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(aantal).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{url}}/GetObjects?IN=200,201",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "IN",
											"value": "200,201"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REGISTRATIE",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REGISTRATIE"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  REGISTRATIE: \"ZZ-ZZ\",",
															"  CALLSIGN: \"ZZ\",",
															"  FLARMCODE: \"AB12CD\",",
															"  ZITPLAATSEN: 2,",
															"  CLUBKIST: 1,",
															"  TYPE_ID: 402,",
															"  VOLGORDE: 99",
															"};",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  REGISTRATIE: \"AA-AA\",",
															"  CALLSIGN: \"AA\",",
															"  FLARMCODE: \"A11111\",",
															"  ZITPLAATSEN: 1,",
															"  TMG: 1,",
															"  ZELFSTART: 1,",
															"  SLEEPKIST: 1,    ",
															"  CLUBKIST: 0,",
															"  VOLGORDE: 1",
															"};",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"  CALLSIGN: null,",
															"  FLARMCODE: null,",
															"  ZITPLAATSEN: 2,",
															"  VOLGORDE: null,",
															"  TYPE_ID: null,",
															"};",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft REGISTRATIE', function() {",
											"  pm.expect(jsonData).to.have.property('REGISTRATIE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft CALLSIGN', function() {",
											"  pm.expect(jsonData).to.have.property('CALLSIGN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft FLARMCODE', function() {",
											"  pm.expect(jsonData).to.have.property('FLARMCODE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ZITPLAATSEN', function() {",
											"  pm.expect(jsonData).to.have.property('ZITPLAATSEN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ZELFSTART', function() {",
											"  pm.expect(jsonData).to.have.property('ZELFSTART');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft CLUBKIST', function() {",
											"  pm.expect(jsonData).to.have.property('CLUBKIST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft TMG', function() {",
											"  pm.expect(jsonData).to.have.property('TMG');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft SLEEPKIST', function() {",
											"  pm.expect(jsonData).to.have.property('SLEEPKIST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft TYPE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('TYPE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VOLGORDE', function() {",
											"  pm.expect(jsonData).to.have.property('VOLGORDE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerd type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  TYPE_ID: \"22222\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects IN geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=200,ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "200,ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects IN geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?IN=214,ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "214,ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects TMG ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TMG=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TMG",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects SLEEPKIST ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SLEEPKIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SLEEPKIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=3",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "3"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"AAA\",",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan TMG geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  TMG: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan TMG geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  TMG: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUBKIST geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  CLUBKIST: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUBKIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  CLUBKIST: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  SLEEPKIST: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  SLEEPKIST: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ZITPLAATSEN geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  ZITPLAATSEN: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ZITPLAATSEN geen 1 of 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  ZITPLAATSEN: 3,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"0Z-ZZ\",    ",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZZZ\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"-1222\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1222-\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH- 1222\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-7",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-12-22\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen REGISTRATIE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record Dubbele registratie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1529\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"200\",",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Vliegtuigen\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Leden",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Jeugleden / Ereleden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lidtypes\", \"601,603\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lidtypes = pm.environment.get(\"lidtypes\");",
													"",
													"",
													"pm.test(\"Aantal records == 3\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(3);",
													"});",
													"",
													"pm.test(\"Totaal == 3\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"LIDTYPE == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (lidtypes.includes(jsonData.dataset[index].LIDTYPE_ID) === false)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES={{lidtypes}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "{{lidtypes}}"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Lieristen",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lidtypes\", \"601,603\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lidtypes = pm.environment.get(\"lidtypes\");",
													"",
													"",
													"pm.test(\"Aantal records == 3\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(3);",
													"});",
													"",
													"pm.test(\"Totaal == 3\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"LIERIST == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].LIERIST != 1)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LIERISTEN=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LIERISTEN",
													"value": "1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Startleiders",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lidtypes\", \"601,603\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lidtypes = pm.environment.get(\"lidtypes\");",
													"",
													"",
													"pm.test(\"Aantal records == 3\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(3);",
													"});",
													"",
													"pm.test(\"Totaal == 3\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"STARTLEIDER == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].STARTLEIDER != 1)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?STARTLEIDERS=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "STARTLEIDERS",
													"value": "1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Instructeurs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lidtypes\", \"601,603\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lidtypes = pm.environment.get(\"lidtypes\");",
													"",
													"",
													"pm.test(\"Aantal records == 4\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(4);",
													"});",
													"",
													"pm.test(\"Totaal == 4\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"4\");",
													"});",
													"",
													"pm.test(\"INSTRUCTEUR == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].INSTRUCTEUR != 1)",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEURS=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEURS",
													"value": "1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Instructeurs & Lieristen",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lidtypes\", \"601,603\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lidtypes = pm.environment.get(\"lidtypes\");",
													"",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Totaal == 1\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"1\");",
													"});",
													"",
													"pm.test(\"INSTRUCTEUR == 1 && LIERIST == 1\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].INSTRUCTEUR != 1)",
													"            fout = 1;",
													"",
													"        if (jsonData.dataset[index].LIERIST != 1)",
													"            fout = 1;            ",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEURS=1&LIERISTEN=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEURS",
													"value": "1"
												},
												{
													"key": "LIERISTEN",
													"value": "1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('NAAM');",
											"});",
											"",
											"pm.test('Heeft VOORNAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VOORNAAM');",
											"});",
											"",
											"pm.test('Heeft TUSSENVOEGSEL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TUSSENVOEGSEL');",
											"});",
											"",
											"pm.test('Heeft ACHTERNAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ACHTERNAAM');",
											"});",
											"",
											"pm.test('Heeft ADRES', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ADRES');",
											"});",
											"",
											"pm.test('Heeft POSTCODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('POSTCODE');",
											"});",
											"",
											"pm.test('Heeft WOONPLAATS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('POSTCODE');",
											"});",
											"",
											"pm.test('Heeft TELEFOON', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TELEFOON');",
											"});",
											"",
											"pm.test('Heeft MOBIEL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MOBIEL');",
											"});",
											"",
											"pm.test('Heeft NOODNUMMER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('NOODNUMMER');",
											"});",
											"",
											"pm.test('Heeft EMAIL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('EMAIL');",
											"});",
											"",
											"pm.test('Heeft LIDNR', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LIDNR');",
											"});",
											"",
											"pm.test('Heeft LIDTYPE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LIDTYPE_ID');",
											"});",
											"",
											"pm.test('Heeft LIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LIERIST');",
											"});",
											"",
											"pm.test('Heeft STARTLEIDER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTLEIDER');",
											"});",
											"",
											"pm.test('Heeft INSTRUCTEUR', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR');",
											"});",
											"",
											"pm.test('Heeft MEDICAL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MEDICAL');",
											"});",
											"",
											"pm.test('Heeft INLOGNAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INLOGNAAM');",
											"});",
											"",
											"pm.test('Heeft WACHTWOORD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('WACHTWOORD');",
											"});",
											"",
											"pm.test('Heeft HEEFT_BETAALD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('HEEFT_BETAALD');",
											"});",
											"",
											"pm.test('Heeft LIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LIERIST');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft LIDTYPE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LIDTYPE');",
											"});",
											"",
											"pm.test('Heeft BEPERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('BEPERKINGEN');",
											"});",
											"",
											"pm.test('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,NAAM",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,NAAM"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    NAAM: \"Jodokus de Marmot\",",
															"    VOORNAAM: \"Jodokus\",",
															"    TUSSENVOEGSEL: \"de\",",
															"    ACHTERNAAM: \"Marmot\",",
															"    ADRES: \"Onder de steen 12\",",
															"    POSTCODE: \"1988 AK\",",
															"    WOONPLAATS: \"Berg en bos\",",
															"    TELEFOON: \"0227-877555\",",
															"    MOBIEL: \"06-5223311\",",
															"    NOODNUMMER: \"112\",",
															"    EMAIL: \"Jodokus@fabeltje.nl\",",
															"    LIDNR: \"10101\",",
															"    LIDTYPE_ID: 601,",
															"    ZUSTERCLUB: \"10001\",",
															"    LIERIST: 1,",
															"    STARTLEIDER: 0,",
															"    INSTRUCTEUR: 1,",
															"    CIMT: 0,",
															"    DDWV_CREW: 1,",
															"    DDWV_BEHEERDER: 0,",
															"    BEHEERDER: 0,",
															"    STARTTOREN: 0,",
															"    ROOSTER: 0,",
															"    CLUBBLAD_POST: 1,",
															"    MEDICAL: \"2078-02-24\",",
															"    GEBOORTE_DATUM: \"1952-03-16\",",
															"    INLOGNAAM: \"jmarmot\",",
															"    WACHTWOORD: \"zeg ik niet\",",
															"    AUTH: \"0\",",
															"    HEEFT_BETAALD: \"1\",",
															"    PRIVACY: \"1\",",
															"    BEPERKINGEN: \"hoezo, ik beperkt? nee toch!\",",
															"    OPMERKINGEN: \"vlieg alleen bij voldoende termiek\",",
															"};",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    NAAM: \"Chico Lama\",",
															"    VOORNAAM: \"Chico\",",
															"    ACHTERNAAM: \"Lama\",",
															"    TUSSENVOEGSEL: null,",
															"    ADRES: \"Weiland 12a\",",
															"    POSTCODE: \"3481 BV\",",
															"    WOONPLAATS: \"Achterveld\",",
															"    TELEFOON: \"0723-346522\",",
															"    MOBIEL: \"06-5123322\",",
															"    NOODNUMMER: \"113\",",
															"    EMAIL: \"lama@fabeltje.nl\",",
															"    LIDNR: \"10201\",",
															"    LIDTYPE_ID: 603,",
															"    ZUSTERCLUB: \"10408\",",
															"    LIERIST: 0,",
															"    STARTLEIDER: 1,",
															"    INSTRUCTEUR: 0,",
															"    CIMT: 1,",
															"    DDWV_CREW: 0,",
															"    DDWV_BEHEERDER: 1,",
															"    BEHEERDER: 1,",
															"    STARTTOREN: 1,",
															"    ROOSTER: 1,",
															"    CLUBBLAD_POST: 0,",
															"    MEDICAL: \"2054-01-31\",",
															"    GEBOORTE_DATUM: \"1978-01-02\",",
															"    INLOGNAAM: \"clama\",",
															"    WACHTWOORD: \"Waarom&*^$\",",
															"    AUTH: 1,",
															"    HEEFT_BETAALD: 0,",
															"    PRIVACY: 0,",
															"    BEPERKINGEN: \"Ik spug als ik boos ben\",",
															"    OPMERKINGEN: \"Kort lontje\",",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    VOORNAAM: null,",
															"    TUSSENVOEGSEL: null,",
															"    ADRES: null,",
															"    POSTCODE: null,",
															"    WOONPLAATS: null,",
															"    TELEFOON: null,",
															"    MOBIEL: null,",
															"    NOODNUMMER: null,",
															"    EMAIL: null,",
															"    LIDNR: null,",
															"    ZUSTERCLUB: null,",
															"    MEDICAL: null,",
															"    GEBOORTE_DATUM: null,",
															"    INLOGNAAM: null,",
															"    WACHTWOORD: null,",
															"    BEPERKINGEN: null,",
															"    OPMERKINGEN: null,",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record geen NAAM",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = {",
															"//  NAAM\": \"Jodokus de Marmot\",",
															"  VOORNAAM: \"Jodokus\",",
															"  ACHTERNAAM: \"Marmot\",",
															"  LIDNR: \"110011\",",
															"  LIDTYPE_ID: 601,",
															"  EMAIL: \"Jodokus@fabeltje.nl\",",
															"  MOBIEL: \"06-5223311\",",
															"  NOODNUMMER: \"112\"",
															"};",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{url}}/SaveObject",
													"host": [
														"{{url}}"
													],
													"path": [
														"SaveObject"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"",
													"            if (reqKey != \"WACHTWOORD\")",
													"                pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft NAAM', function() {",
											"  pm.expect(jsonData).to.have.property('NAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VOORNAAM', function() {",
											"  pm.expect(jsonData).to.have.property('VOORNAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ACHTERNAAM', function() {",
											"  pm.expect(jsonData).to.have.property('ACHTERNAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft TELEFOON', function() {",
											"  pm.expect(jsonData).to.have.property('TELEFOON');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MOBIEL', function() {",
											"  pm.expect(jsonData).to.have.property('MOBIEL');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft NOODNUMMER', function() {",
											"  pm.expect(jsonData).to.have.property('NOODNUMMER');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft EMAIL', function() {",
											"  pm.expect(jsonData).to.have.property('EMAIL');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LIDNR', function() {",
											"  pm.expect(jsonData).to.have.property('LIDNR');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LIDTYPE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LIDTYPE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LIERIST', function() {",
											"  pm.expect(jsonData).to.have.property('LIERIST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft STARTLEIDER', function() {",
											"  pm.expect(jsonData).to.have.property('STARTLEIDER');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INSTRUCTEUR', function() {",
											"  pm.expect(jsonData).to.have.property('INSTRUCTEUR');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INLOGNAAM', function() {",
											"  pm.expect(jsonData).to.have.property('INLOGNAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft WACHTWOORD', function() {",
											"  pm.expect(jsonData).to.have.property('WACHTWOORD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft HEEFT_BETAALD', function() {",
											"  pm.expect(jsonData).to.have.property('HEEFT_BETAALD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LIERIST', function() {",
											"  pm.expect(jsonData).to.have.property('LIERIST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload avatar",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"let onderdeel = pm.environment.get(\"onderdeel\");",
											"",
											"let base_url = pm.environment.get(\"base_url\");",
											"let url = pm.environment.get(\"url\");",
											"",
											"",
											"if (modify_database === \"false\")",
											"{",
											"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
											"    pm.environment.set(\"upload_avatar_url\", base_url + \"/dummy.php\");",
											"    pm.environment.set(\"skipTest\", true);",
											"}",
											"else",
											"{",
											"    pm.environment.set(\"upload_avatar_url\", url + \"/UploadAvatar\");",
											"    pm.environment.set(\"skipTest\", false);",
											"}",
											"",
											"",
											"let record = {",
											"  \"NAAM\": \"Jodokus de Marmot\",",
											"  \"VOORNAAM\": \"Jodokus\",",
											"  \"ACHTERNAAM\": \"Marmot\",",
											"  \"LIDNR\": \"10101\",",
											"  \"LIDTYPE_ID\": 601,",
											"  \"EMAIL\": \"Jodokus@fabeltje.nl\",",
											"  \"MOBIEL\": \"06-5223311\",",
											"  \"NOODNUMMER\": \"112\"",
											"};",
											"",
											"var body = JSON.stringify(record); ",
											"pm.environment.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (skipTest === false)",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.environment.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"   pm.environment.set(\"nieuwID\", -1); ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ID",
											"value": "{{getObjectId}}",
											"type": "text"
										},
										{
											"key": "FILE",
											"type": "file",
											"src": "/Users/richard/Documents/Pegasus/pegasus.git/pegasus/src/assets/avatar.png"
										}
									]
								},
								"url": {
									"raw": "{{upload_avatar_url}}",
									"host": [
										"{{upload_avatar_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lidtype",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"10101\",",
													"  LIDTYPE_ID: 60100,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd zusterclub",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    NAAM: \"Jodokus de Marmot\",",
													"    VOORNAAM: \"Jodokus\",",
													"    ACHTERNAAM: \"Marmot\",",
													"    LIDTYPE_ID: 601,",
													"    ZUSTERCLUB: 90220,",
													"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Types geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=601, ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "601, ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIDTYPE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12345\",",
													"  LIDTYPE_ID: \"FOUT\",",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIERIST ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  LIERIST: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIERIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  LIERIST: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  INSTRUCTEUR: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  INSTRUCTEUR: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTLEIDER  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTLEIDER  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"NAAM\": \"Jodokus de Marmot\",",
													"  \"VOORNAAM\": \"Jodokus\",",
													"  \"ACHTERNAAM\": \"Marmot\",",
													"  \"LIDNR\": \"20110011\",",
													"  \"LIDTYPE_ID\": 601,",
													"  \"EMAIL\": \"Jodokus@fabeltje.nl\",",
													"  \"MOBIEL\": \"06-5223311\",",
													"  \"NOODNUMMER\": \"112\",",
													"  \"STARTLEIDER\": 3",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HEEFT_BETAALD  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: \"1\",",
													"  HEEFT_BETAALD: \"ascii\",",
													"  PRIVACY: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HEEFT_BETAALD  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  HEEFT_BETAALD: 4,",
													"  PRIVACY: 1  ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan PRIVACY  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  HEEFT_BETAALD: 4,",
													"  PRIVACY: 224 ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan PRIVACY  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  PRIVACY: \"ascii\"  ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Met avatar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    NAAM: \"buizerd\",",
													"    LIDTYPE_ID: 601,",
													"    AVATAR: \"http://avatar.org\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"  \"NAAM\": \"Jodokus de Marmot\",",
													"  \"VOORNAAM\": \"Jodokus\",",
													"  \"ACHTERNAAM\": \"Marmot\",",
													"  \"LIDNR\": \"1100110011\",",
													"  \"LIDTYPE_ID\": 601,",
													"  \"EMAIL\": \"Jodokus@fabeltje.nl\",",
													"  \"MOBIEL\": \"06-5223311\",",
													"  \"NOODNUMMER\": \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LIDTYPE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"1100110011\",",
													"//  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"10855\",",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"10101\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel LidNr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12091\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel inlognaam",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  INLOGNAAM: \"momfer\", ",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12091\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				},
				{
					"name": "DDWV get",
					"item": [
						{
							"name": "GetObjects DDWV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"pm.test(\"Aantal records == 3\", function () {",
											"    pm.expect(jsonData.dataset.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Totaal == 3\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(\"3\");",
											"});",
											"",
											"pm.test(\"DDWV == 1  or DDWV_CREW\", function () {",
											"    var fout = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if ((jsonData.dataset[index].LIDTYPE_ID != \"625\") && jsonData.dataset[index].DDWV_CREW != \"1\")",
											"            fout = 1;",
											"    }",
											"    pm.expect(fout).to.eql(0);",
											"});",
											"",
											"// Data voor volgende testen",
											"let savedData = JSON.stringify(jsonData);",
											"pm.environment.set(\"savedData\", savedData);",
											"",
											"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "mol",
								"type": "string"
							},
							{
								"key": "username",
								"value": "momfer",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Leden\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Rooster",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_DDI_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_DDI_ID');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_INSTRUCTEUR_ID');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_STARTLEIDER_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_STARTLEIDER_ID');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_LIERIST_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_LIERIST_ID');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_HULPLIERIST_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_HULPLIERIST_ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_DDI_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_DDI_ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_INSTRUCTEUR_ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_STARTLEIDER_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_STARTLEIDER_ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_LIERIST_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_LIERIST_ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_HULPLIERIST_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_HULPLIERIST_ID');",
											"});",
											"",
											"pm.test('Heeft DDWV', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DDWV');",
											"});",
											"",
											"pm.test('Heeft CLUB_BEDRIJF', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CLUB_BEDRIJF');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"",
											"pm.test('Heeft OCHTEND_DDI', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_DDI');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_INSTRUCTEUR', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_INSTRUCTEUR');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_STARTLEIDER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_STARTLEIDER');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_LIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_LIERIST');",
											"});",
											"",
											"pm.test('Heeft OCHTEND_HULPLIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_HULPLIERIST');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_DDI', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_DDI');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_INSTRUCTEUR', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_INSTRUCTEUR');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_STARTLEIDER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_STARTLEIDER');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_LIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_LIERIST');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_HULPLIERIST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_HULPLIERIST');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,MIDDAG_DDI",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,MIDDAG_DDI"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    DATUM: \"2020-01-05\",",
															"    DDWV: 1,",
															"    CLUB_BEDRIJF: 0,",
															"    OCHTEND_DDI_ID: \"10001\",",
															"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
															"    OCHTEND_LIERIST_ID: \"10804\",",
															"    OCHTEND_HULPLIERIST_ID: \"10858\",",
															"    OCHTEND_STARTLEIDER_ID: \"10408\",",
															"    MIDDAG_DDI_ID: \"10470\",",
															"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
															"    MIDDAG_LIERIST_ID: \"10858\",",
															"    MIDDAG_HULPLIERIST_ID: \"10804\",",
															"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
															"};",
															"",
															"let verleden = Math.floor(Math.random() * 5000);",
															"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
															"record.DATUM = d.toISOString().substring(0,10);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    OCHTEND_DDI_ID: 10001,",
															"    OCHTEND_INSTRUCTEUR_ID: 10063,",
															"    OCHTEND_LIERIST_ID: 10115,",
															"    OCHTEND_HULPLIERIST_ID: 10213,",
															"    OCHTEND_STARTLEIDER_ID: 10265,",
															"    MIDDAG_DDI_ID: 10395,",
															"    MIDDAG_INSTRUCTEUR_ID: 10408,",
															"    MIDDAG_LIERIST_ID: 10470,",
															"    MIDDAG_HULPLIERIST_ID: 10632,",
															"    MIDDAG_STARTLEIDER_ID: 10858",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    OCHTEND_DDI_ID: null,",
															"    OCHTEND_INSTRUCTEUR_ID: null,",
															"    OCHTEND_LIERIST_ID: null,",
															"    OCHTEND_HULPLIERIST_ID: null,",
															"    OCHTEND_STARTLEIDER_ID: null,",
															"    MIDDAG_DDI_ID: null,",
															"    MIDDAG_INSTRUCTEUR_ID: null,",
															"    MIDDAG_LIERIST_ID: null,",
															"    MIDDAG_HULPLIERIST_ID: null,",
															"    MIDDAG_STARTLEIDER_ID: null, ",
															"};",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DATUM', function() {",
											"  pm.expect(jsonData).to.have.property('DATUM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OCHTEND_DDI_ID', function() {",
											"  pm.expect(jsonData).to.have.property('OCHTEND_DDI_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OCHTEND_STARTLEIDER_ID', function() {",
											"  pm.expect(jsonData).to.have.property('OCHTEND_STARTLEIDER_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OCHTEND_LIERIST_ID', function() {",
											"  pm.expect(jsonData).to.have.property('OCHTEND_LIERIST_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OCHTEND_HULPLIERIST_ID', function() {",
											"  pm.expect(jsonData).to.have.property('OCHTEND_HULPLIERIST_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MIDDAG_DDI_ID', function() {",
											"  pm.expect(jsonData).to.have.property('MIDDAG_DDI_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MIDDAG_INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData).to.have.property('MIDDAG_INSTRUCTEUR_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MIDDAG_STARTLEIDER_ID', function() {",
											"  pm.expect(jsonData).to.have.property('MIDDAG_STARTLEIDER_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MIDDAG_LIERIST_ID', function() {",
											"  pm.expect(jsonData).to.have.property('MIDDAG_LIERIST_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft MIDDAG_HULPLIERIST_ID', function() {",
											"  pm.expect(jsonData).to.have.property('MIDDAG_HULPLIERIST_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DDWV', function() {",
											"  pm.expect(jsonData).to.have.property('DDWV');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft CLUB_BEDRIJF', function() {",
											"  pm.expect(jsonData).to.have.property('CLUB_BEDRIJF');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend DDI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"9910001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Startleider",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"9910408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"9910804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Hulp lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"9910858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"9910115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag DDI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"9910470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Startleider",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"9910213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"9910858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Hulp lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"9910804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"9910408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_DDI_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"@@@@\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"@@@@\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_STARTLEIDER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"@@@@\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_LIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"@@@\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_HULPLIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"@@@\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_DDI_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"@@@@\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"@@@@@\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_STARTLEIDER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"@@@@@\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_LIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"@@@@\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_HULPLIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"@@@@@\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DDWV geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"II\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DDWV geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 2,",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUB_BEDRIJF geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"II\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUB_BEDRIJF geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 8",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-02-30\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"ascii\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"//    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen CLUB_BEDRIJF",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"//    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DDWV",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"//    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: 1,",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DDWV: \"1\",",
													"    LID_ID: \"10265\", ",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"record.DATUM = pm.environment.get('dit_jaar') + \"-05-01\"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Rooster\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Aanmelding Leden",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects alleen leden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=601,602,603,606,608,61&BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "601,602,603,606,608,61"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID&BEGIN_DATUM=1990-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "1990-01-01"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC&BEGIN_DATUM=1990-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "1990-01-01"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft POSITIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('POSITIE');",
											"});",
											"",
											"pm.test('Heeft LID_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"});",
											"",
											"pm.test('Heeft VOORAANMELDING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VOORAANMELDING');",
											"});",
											"",
											"pm.test('Heeft AANKOMST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('AANKOMST');",
											"});",
											"",
											"pm.test('Heeft VERTREK', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERTREK');",
											"});",
											"",
											"pm.test('Heeft OVERLAND_VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OVERLAND_VLIEGTUIG_ID');",
											"});",
											"",
											"pm.test('Heeft VOORKEUR_VLIEGTUIG_TYPE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VOORKEUR_VLIEGTUIG_TYPE');",
											"});",
											"",
											"pm.test('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft VLIEGER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGER');",
											"});",
											"",
											"pm.test('Heeft VLIEGTUIGTYPE_CODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE_CODE');",
											"});",
											"",
											"pm.test('Heeft VLIEGTUIGTYPE_OMS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE_OMS');",
											"});",
											"",
											"pm.test('Heeft REG_CALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,VLIEGER&BEGIN_DATUM=1990-01-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,VLIEGER"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "1990-01-01"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true&BEGIN_DATUM=1990-01-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "1990-01-01"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Potentiele vliegers",
					"item": [
						{
							"name": "PotentieelVliegers clubkist met aangemelde vliegers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 3\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=200&DATUM={{dit_jaar}}-05-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "200"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-05-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PotentieelVliegers prive kist zonder aanmelding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 2\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=218&DATUM={{dit_jaar}}-05-07",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "218"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-05-07"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PotentieelVliegers prive kist met aanmelding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 1\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=217&DATUM={{dit_jaar}}-05-02",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "217"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-05-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PotentieelVliegers alle leden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 14\", function () {",
											"    pm.expect(jsonData.length).to.eql(14);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=213&DATUM={{dit_jaar}}-04-29",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "213"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-04-29"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PotentieelVliegers alle leden, zonder DDWV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 12\", function () {",
											"    pm.expect(jsonData.length).to.eql(12);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=213&DATUM={{dit_jaar}}-04-28",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "213"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-04-28"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PotentieelVliegers iedereen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == 14\", function () {",
											"    pm.expect(jsonData.length).to.eql(14);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=217&DATUM={{dit_jaar}}-04-30",
									"host": [
										"{{url}}"
									],
									"path": [
										"PotentieelVliegers"
									],
									"query": [
										{
											"key": "VLIEGTUIG_ID",
											"value": "217"
										},
										{
											"key": "DATUM",
											"value": "{{dit_jaar}}-04-30"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft LID_ID', function() {",
									"  pm.expect(jsonData[0]).to.have.property('LID_ID');",
									"});",
									"",
									"pm.test('Heeft VLIEGER', function() {",
									"  pm.expect(jsonData[0]).to.have.property('VLIEGER');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  POSITIE: 12,",
															"  LID_ID: 10408,",
															"  VOORAANMELDING: 1,",
															"  AANKOMST: \"10:00:20\",",
															"  OVERLAND_VLIEGTUIG_ID: 200,",
															"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
															"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
															"}",
															"",
															"let verleden = Math.floor(Math.random() * 5000);",
															"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
															"record.DATUM = d.toISOString().substring(0,10);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"AANKOMST lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"10:00\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"  POSITIE: 200,",
															"  AANKOMST: \"10:03:01\",",
															"  VERTREK: \"19:33:01\",  ",
															"  VOORAANMELDING: 1,",
															"  OVERLAND_VLIEGTUIG_ID: 216,",
															"  VOORKEUR_VLIEGTUIG_TYPE: \"405\",",
															"  OPMERKINGEN: \"Heeft in de middag lierdienst\"",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"AANKOMST lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"10:03\");",
															"});",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"VERTREK lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.VERTREK.toString()).to.eql(\"19:33\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"  POSITIE: null,",
															"  AANKOMST: null,",
															"  VERTREK: null,  ",
															"  OVERLAND_VLIEGTUIG_ID: null,",
															"  VOORKEUR_VLIEGTUIG_TYPE: null,",
															"  OPMERKINGEN: null,",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"",
													"            if ((reqKey == \"AANKOMST\") || (reqKey == \"VERTREK\")) {",
													"                postData[reqKey] = String(postData[reqKey]).substring(0,5);",
													"            }",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "Aan en afmelden",
									"item": [
										{
											"name": "Aanmelden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  LID_ID: 10408,",
															"  TIJDSTIP: \"2014-04-21T06:31:33.124Z\"",
															"}",
															"",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"AANKOMST lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{aanmelden_url}}",
													"host": [
														"{{aanmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Afmelden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  LID_ID: 10408,",
															"  TIJDSTIP: \"2014-04-21T21:16:59Z\"",
															"}",
															"",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"VERTREK lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.VERTREK.toString()).to.eql(\"23:16\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{afmelden_url}}",
													"host": [
														"{{afmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Aanmelden zonder Datum",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  LID_ID: 10408",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{aanmelden_url}}",
													"host": [
														"{{aanmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Afmelden zonder Datum",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  LID_ID: 10408",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{afmelden_url}}",
													"host": [
														"{{afmelden_url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DATUM', function() {",
											"  pm.expect(jsonData).to.have.property('DATUM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft POSITIE', function() {",
											"  pm.expect(jsonData).to.have.property('POSITIE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LID_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LID_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VOORAANMELDING', function() {",
											"  pm.expect(jsonData).to.have.property('VOORAANMELDING');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft AANKOMST', function() {",
											"  pm.expect(jsonData).to.have.property('AANKOMST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERTREK', function() {",
											"  pm.expect(jsonData).to.have.property('VERTREK');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OVERLAND_VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData).to.have.property('OVERLAND_VLIEGTUIG_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VOORKEUR_VLIEGTUIG_TYPE', function() {",
											"  pm.expect(jsonData).to.have.property('VOORKEUR_VLIEGTUIG_TYPE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"aanmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"afmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"aanmelden_url\", url + \"/Aanmelden\");",
									"    pm.environment.set(\"afmelden_url\", url + \"/Afmelden\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 100008,",
													"  VOORAANMELDING: 1,",
													"  AANKOMST: \"10:00:20\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"AANKOMST lokale tijd\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"10:00:20\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  AANKOMST: \"10:00:20\",",
													"  OVERLAND_VLIEGTUIG_ID: 20011,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"AANKOMST lokale tijd\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"10:00:20\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 9918,",
													"  TIJDSTIP: \"2014-04-21T06:31:33.124Z\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"AANKOMST lokale tijd\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31:00\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Aanmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    TIJDSTIP: \"2020-01-05\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    TIJDSTIP: \"2020-01-05\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-02-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan POSITIE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: \"ascii\",",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: \"1\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORAANMELDING geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: \"ascii\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORAANMELDING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 6,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OVERLAND_VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2023-01-10\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: \"ascii\",",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORKEUR_VLIEGTUIG_TYPE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2021-09-10\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, ascii\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORKEUR_VLIEGTUIG_TYPE geen int 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-12-29\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"ascii\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"//  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\",",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Afmelden zonder aanmelding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 201121,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10265",
													"}",
													"",
													"record.DATUM = pm.environment.get('dit_jaar') + \"-05-01\"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  DATUM: \"2020-06-06\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  LID_ID: \"10001\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"AanwezigLeden\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);",
							"",
							"var currentYear=new Date().getFullYear();",
							"pm.environment.set('dit_jaar', currentYear);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Aanmelding Vliegtuigen",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIG_ID');",
											"});",
											"",
											"pm.test('Heeft AANKOMST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('AANKOMST');",
											"});",
											"",
											"pm.test('Heeft VERTREK', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERTREK');",
											"});",
											"",
											"pm.test('Heeft LATITUDE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LATITUDE');",
											"});",
											"",
											"pm.test('Heeft LONGITUDE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LONGITUDE');",
											"});",
											"",
											"pm.test('Heeft HOOGTE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('HOOGTE');",
											"});",
											"",
											"pm.test('Heeft SNELHEID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('SNELHEID');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft REGCALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REG_CALL",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REG_CALL"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  VLIEGTUIG_ID: 215,",
															"  AANKOMST: \"06:31:00\"",
															"}",
															"",
															"let verleden = Math.floor(Math.random() * 5000);",
															"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
															"record.DATUM = d.toISOString().substring(0,10);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"  AANKOMST: \"10:03:01\",",
															"  VERTREK: \"19:33:01\",  ",
															"  LATITUDE: 51.45712,",
															"  LONGITUDE: 4.67892,",
															"  HOOGTE: 1204,",
															"  SNELHEID: 142",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"AANKOMST lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"10:03\");",
															"});",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"VERTREK lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.VERTREK.toString()).to.eql(\"19:33\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"  AANKOMST: null,",
															"  VERTREK: null,  ",
															"  LATITUDE: null,",
															"  LONGITUDE: null,",
															"  HOOGTE: null,",
															"  SNELHEID: null",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            if ((reqKey == \"AANKOMST\") || (reqKey == \"VERTREK\")) {",
													"                postData[reqKey] = String(postData[reqKey]).substring(0,5);",
													"            }",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "Aan en afmelden",
									"item": [
										{
											"name": "Aanmelden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  VLIEGTUIG_ID: 214,",
															"  TIJDSTIP: \"2011-04-21T06:31:33.124Z\"",
															"}",
															"",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"AANKOMST lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{aanmelden_url}}",
													"host": [
														"{{aanmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Afmelden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  VLIEGTUIG_ID: 214,",
															"  TIJDSTIP: \"2011-04-21T21:16:59Z\"",
															"}",
															"",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"VERTREK lokale tijd\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.VERTREK.toString()).to.eql(\"23:16\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{afmelden_url}}",
													"host": [
														"{{afmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Aanmelden zonder Datum",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  VLIEGTUIG_ID: 217",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{aanmelden_url}}",
													"host": [
														"{{aanmelden_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Afmelden zonder Datum",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"  VLIEGTUIG_ID: 217",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{afmelden_url}}",
													"host": [
														"{{afmelden_url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DATUM', function() {",
											"  pm.expect(jsonData).to.have.property('DATUM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGTUIG_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft AANKOMST', function() {",
											"  pm.expect(jsonData).to.have.property('AANKOMST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LATITUDE', function() {",
											"  pm.expect(jsonData).to.have.property('LATITUDE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LONGITUDE', function() {",
											"  pm.expect(jsonData).to.have.property('LONGITUDE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft HOOGTE', function() {",
											"  pm.expect(jsonData).to.have.property('HOOGTE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft SNELHEID', function() {",
											"  pm.expect(jsonData).to.have.property('SNELHEID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"aanmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"afmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"aanmelden_url\", url + \"/Aanmelden\");",
									"    pm.environment.set(\"afmelden_url\", url + \"/Afmelden\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-07-01\",",
													"  VLIEGTUIG_ID: 21115,",
													"  AANKOMST: \"06:31:00\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 9914,",
													"  TIJDSTIP: \"2011-04-21T06:31:33.124Z\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"AANKOMST lokale tijd\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31:00\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Aanmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    VLIEGTUIG_ID: \"ascii\",",
													"    TIJDSTIP: \"2020-01-05\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    VLIEGTUIG_ID: \"ascii\",",
													"    TIJDSTIP: \"2020-01-05\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2020-01-05\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat geen double",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: \"ascii\",",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat < -90",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: -100,",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat > 90",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 100,",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon geen double",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: \"ascii\",",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon < -180",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: -200,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon > 180",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: 200,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-02-30\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SNELHEID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  VLIEGTUIG_ID: 200,",
													"  SNELHEID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HOOGTE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  VLIEGTUIG_ID: 214,",
													"  HOOGTE: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2026-02-10\",",
													"  VLIEGTUIG_ID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-07-01\",",
													"  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-07-01\",",
													"//  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\"",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\",",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Afmelden zonder aanmelding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 77211,",
													"};",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.TIJDSTIP = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  VLIEGTUIG_ID: 218,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"1999-01-01\",",
													"  VLIEGTUIG_ID: 201",
													"}",
													"",
													"record.DATUM = pm.environment.get('dit_jaar') + \"-05-01\"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  DATUM: \"2020-06-06\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  VLIEGTUIG_ID: 216",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"AanwezigVliegtuigen\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);",
							"",
							"var currentYear=new Date().getFullYear();",
							"pm.environment.set('dit_jaar', currentYear);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Startlijst",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 22\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(22);",
													"});",
													"",
													"pm.test(\"Totaal == 22\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"22\");",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects BEGIN_DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 14\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(14);",
													"});",
													"",
													"pm.test(\"Totaal == 14\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"14\");",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-03",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-03"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft DAGNUMMER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DAGNUMMER');",
											"});",
											"",
											"pm.test('Heeft VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIG_ID');",
											"});",
											"",
											"pm.test('Heeft STARTTIJD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTTIJD');",
											"});",
											"",
											"pm.test('Heeft LANDINGSTIJD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LANDINGSTIJD');",
											"});",
											"",
											"pm.test('Heeft STARTMETHODE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_ID');",
											"});",
											"",
											"pm.test('Heeft VLIEGER_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGER_ID');",
											"});",
											"",
											"pm.test('Heeft INZITTENDE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDE_ID');",
											"});",
											"",
											"pm.test('Heeft VLIEGERNAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGERNAAM');",
											"});",
											"",
											"pm.test('Heeft INZITTENDENAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDENAAM');",
											"});",
											"",
											"pm.test('Heeft SLEEPKIST_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('SLEEPKIST_ID');",
											"});",
											"",
											"pm.test('Heeft SLEEP_HOOGTE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('SLEEP_HOOGTE');",
											"});",
											"",
											"pm.test('Heeft VELD_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VELD_ID');",
											"});",
											"",
											"pm.test('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"});",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft REGISTRATIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REGISTRATIE');",
											"});",
											"",
											"pm.test('Heeft CALLSIGN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('CALLSIGN');",
											"});",
											"",
											"pm.test('Heeft REG_CALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"pm.test('Heeft DUUR', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DUUR');",
											"});",
											"",
											"pm.test('Heeft VLIEGERNAAM_LID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGERNAAM_LID');",
											"});",
											"",
											"pm.test('Heeft INZITTENDENAAM_LID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDENAAM_LID');",
											"});",
											"",
											"pm.test('Heeft STARTMETHODE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE');",
											"});",
											"",
											"pm.test('Heeft VELD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VELD');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REG_CALL",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REG_CALL"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetLogboek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"// Data voor volgende testen",
											"let savedData = JSON.stringify(jsonData);",
											"pm.environment.set(\"savedData\", savedData);",
											"",
											"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: \"200\"",
															"}",
															"",
															"let verleden = Math.floor(Math.random() * 5000);",
															"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
															"record.DATUM = d.toISOString().substring(0,10);",
															"pm.environment.set('datum', record.DATUM);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan met namen",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: \"201\",",
															"    VLIEGERNAAM: \"vlieger\",",
															"    INZITTENDENAAM: \"inzittende\",",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan met vlieger & inzittende",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: 200,",
															"    VLIEGER_ID: 10470,",
															"    INZITTENDE_ID: 10632",
															"",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan met vlieger",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: 201,",
															"    VLIEGER_ID: 10470,",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan met inzittende",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: 216,",
															"    INZITTENDE_ID: 10115",
															"",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan met tijden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: \"213\",",
															"    STARTTIJD: \"09:55:22\",",
															"    LANDINGSTIJD: \"13:17:59\"",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"STARTTIJD\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.STARTTIJD.toString()).to.eql(\"09:55\");",
															"});",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"LANDINGSTIJD\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.LANDINGSTIJD.toString()).to.eql(\"13:17\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record opslaan overig",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let record = ",
															"{",
															"    VLIEGTUIG_ID: 217,",
															"    STARTMETHODE_ID: 550,",
															"    SLEEPKIST_ID: 218,",
															"    SLEEP_HOOGTE: 600,",
															"    VELD_ID: 902,",
															"    OPMERKINGEN: \"automatisch testen\",",
															"    EXTERNAL_ID: \"ref naar ander systeem\"",
															"}",
															"",
															"record.DATUM = pm.environment.get('datum');",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"  VLIEGER_ID: 10265,",
															"  VLIEGERNAAM: \"update record\",",
															"  SLEEP_HOOGTE: 142",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"    STARTTIJD: null,",
															"    LANDINGSTIJD: null,",
															"    STARTMETHODE_ID: null,",
															"    VLIEGER_ID: null,",
															"    INZITTENDE_ID: null,",
															"    VLIEGERNAAM: null,",
															"    INZITTENDENAAM: null,    ",
															"    SLEEPKIST_ID: null,",
															"    SLEEP_HOOGTE: null,",
															"    EXTERNAL_ID: null,",
															"    VELD_ID: null,",
															"    OPMERKINGEN: null",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"",
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (pm.request.method == \"GET\")",
													"    skipTest = true;",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            if ((reqKey == \"STARTTIJD\") || (reqKey == \"LANDINGSTIJD\")) {",
													"                postData[reqKey] = String(postData[reqKey]).substring(0,5);",
													"            }",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"            pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DAGNUMMER', function() {",
											"  pm.expect(jsonData).to.have.property('DAGNUMMER');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft DATUM', function() {",
											"  pm.expect(jsonData).to.have.property('DATUM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGTUIG_ID', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGTUIG_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft STARTTIJD', function() {",
											"  pm.expect(jsonData).to.have.property('STARTTIJD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LANDINGSTIJD', function() {",
											"  pm.expect(jsonData).to.have.property('LANDINGSTIJD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft STARTMETHODE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('STARTMETHODE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGER_ID', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGER_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INZITTENDE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('INZITTENDE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VLIEGERNAAM', function() {",
											"  pm.expect(jsonData).to.have.property('VLIEGERNAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INZITTENDENAAM', function() {",
											"  pm.expect(jsonData).to.have.property('INZITTENDENAAM');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft SLEEPKIST_ID', function() {",
											"  pm.expect(jsonData).to.have.property('SLEEPKIST_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft SLEEP_HOOGTE', function() {",
											"  pm.expect(jsonData).to.have.property('SLEEP_HOOGTE');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VELD_ID', function() {",
											"  pm.expect(jsonData).to.have.property('VELD_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Aanmeldingen Vliegtuigen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"5 vliegtuig aanmeldingen\", function () {",
											"    pm.expect(jsonData.totaal).to.eql('5');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/AanwezigVliegtuigen/GetObjects?BEGIN_DATUM={{datum}}&EIND_DATUM={{datum}}&IN=200,201,213,216,217",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"AanwezigVliegtuigen",
										"GetObjects"
									],
									"query": [
										{
											"key": "BEGIN_DATUM",
											"value": "{{datum}}"
										},
										{
											"key": "EIND_DATUM",
											"value": "{{datum}}"
										},
										{
											"key": "IN",
											"value": "200,201,213,216,217"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Aanmeldingen Leden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"4 lid aanmeldingen\", function () {",
											"    pm.expect(jsonData.totaal).to.eql('4');",
											"});",
											"",
											"pm.test(\"10470 == 2 vliegtuig types\", function () {",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LID_ID == \"10470\")",
											"        {",
											"            pm.expect(jsonData.dataset[index].VOORKEUR_VLIEGTUIG_TYPE).to.eql(\"405,404\");",
											"            pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_CODE).to.not.eql(null);",
											"            pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_OMS).to.not.eql(null);",
											"        }",
											"        else",
											"        {",
											"            pm.expect(jsonData.dataset[index].VOORKEUR_VLIEGTUIG_TYPE).to.eql(null);",
											"            pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_CODE).to.eql(null);",
											"            pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_OMS).to.eql(null);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"10265 == Overland\", function () {",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LID_ID == \"10265\")",
											"        {",
											"            pm.expect(jsonData.dataset[index].OVERLAND_VLIEGTUIG_ID).to.eql(\"217\");",
											"        }",
											"        else",
											"            pm.expect(jsonData.dataset[index].OVERLAND_VLIEGTUIG_ID).to.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"VERTREK == null\", function () {    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        pm.expect(jsonData.dataset[index].VERTREK).to.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"VLIEGER != null\", function () {    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        pm.expect(jsonData.dataset[index].VLIEGER).to.not.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Lidtype\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LID_ID == \"10115\")",
											"        {",
											"            pm.expect(jsonData.dataset[index].LIDTYPE_ID).to.eql(\"625\");",
											"        }",
											"        else",
											"            pm.expect(jsonData.dataset[index].LIDTYPE_ID).to.eql(\"602\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/AanwezigLeden/GetObjects?BEGIN_DATUM={{datum}}&EIND_DATUM={{datum}}&IN=10470,10632,10115,10265",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"AanwezigLeden",
										"GetObjects"
									],
									"query": [
										{
											"key": "BEGIN_DATUM",
											"value": "{{datum}}"
										},
										{
											"key": "EIND_DATUM",
											"value": "{{datum}}"
										},
										{
											"key": "IN",
											"value": "10470,10632,10115,10265"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"aanmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"afmelden_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"aanmelden_url\", url + \"/Aanmelden\");",
									"    pm.environment.set(\"afmelden_url\", url + \"/Afmelden\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200900\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde startmethode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 15050,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd sleepvliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 26618,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 90012,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde vlieger",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    VLIEGER_ID: \"100631\",",
													"    INZITTENDE_ID: \"10804\",  ",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde inzittende",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    VLIEGER_ID: \"10063\",",
													"    INZITTENDE_ID: \"11814\",  ",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2020-01-05\",",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-02-30\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2026-02-10\",",
													"  VLIEGTUIG_ID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTMETHODE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    STARTMETHODE_ID: \"ascii\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD geen tijd",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"ascii\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD geen onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"1022\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD  na 24 uur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"24:22:10\",",
													"    LANDINGSTIJD: \"04:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD geen tijd",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"ascii\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD  onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"1622\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD  na 24 uur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"24:00:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"ascii\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INZITTENDE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: \"ascii\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VELD_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: null,",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: \"ascii\",",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: null,",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: \"ascii\",",
													"    SLEEP_HOOGTE: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEP_HOOGTE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    SLEEP_HOOGTE: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-07-01\",",
													"  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2020-07-01\",",
													"//  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"let verleden = Math.floor(Math.random() * 5000);",
													"let d = new Date((new Date()).valueOf() - 1000*60*60*24*verleden);",
													"record.DATUM = d.toISOString().substring(0,10);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  VLIEGTUIG_ID: 218,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				},
				{
					"name": "VliegtuigLogboek",
					"item": [
						{
							"name": "GetVliegtuigLogboek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"// Data voor volgende testen",
											"let savedData = JSON.stringify(jsonData);",
											"pm.environment.set(\"savedData\", savedData);",
											"",
											"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetVliegtuigLogboek?ID=200",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetVliegtuigLogboek"
									],
									"query": [
										{
											"key": "ID",
											"value": "200"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetVliegtuigLogboek met DATUM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"// Data voor volgende testen",
											"let savedData = JSON.stringify(jsonData);",
											"pm.environment.set(\"savedData\", savedData);",
											"",
											"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetVliegtuigLogboek?ID=200&BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-02",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetVliegtuigLogboek"
									],
									"query": [
										{
											"key": "ID",
											"value": "200"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "{{dit_jaar}}-05-01"
										},
										{
											"key": "EIND_DATUM",
											"value": "{{dit_jaar}}-05-02"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetVliegtuigLogboekTotalen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test('Heeft laatste_aanpassing', function() {",
											"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
											"});",
											"",
											"pm.test('Heeft dataset', function() {",
											"  pm.expect(jsonData).to.have.property('dataset');",
											"});",
											"",
											"pm.test('Heeft totalen', function() {",
											"  pm.expect(jsonData).to.have.property('totalen');",
											"});",
											"",
											"pm.test(\"12 maanden\", function () {    ",
											"    pm.expect(jsonData.dataset.length).to.eql(12);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetVliegtuigLogboekTotalen?ID=200",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetVliegtuigLogboekTotalen"
									],
									"query": [
										{
											"key": "ID",
											"value": "200"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Startlijst\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);",
							"",
							"var currentYear=new Date().getFullYear();",
							"pm.environment.set('dit_jaar', currentYear);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tracks",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=10395",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "10395"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.test(\"LID_ID == 10001\", function () {",
													"    var lid_id = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        lid_id = parseInt(jsonData.dataset[index].LID_ID);  ",
													"        pm.expect(lid_id).to.eql(10001);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=10001",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "10001"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects INSTRUCTEUR_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.test(\"INSTRUCTEUR_ID == 10470\", function () {",
													"    var instructeur_id = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        instructeur_id = parseInt(jsonData.dataset[index].INSTRUCTEUR_ID);  ",
													"        pm.expect(instructeur_id).to.eql(10470);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEUR_ID=10470",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEUR_ID",
													"value": "10470"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft LID_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"});",
											"",
											"pm.test('Heeft INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_ID');",
											"});",
											"",
											"pm.test('Heeft TEKST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TEKST');",
											"});",
											"",
											"pm.test('Heeft START_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('START_ID');",
											"});",
											"",
											"pm.test('Heeft INGEVOERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"});",
											"",
											"pm.test('Heeft INGEVOERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"});",
											"",
											"pm.test('Heeft LINK_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LINK_ID');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test('Heeft LID_NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_NAAM');",
											"});",
											"",
											"pm.test('Heeft INSTRUCTEUR_NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_NAAM');",
											"});",
											"",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, TEKST",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, TEKST"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SavObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = ",
															"{",
															"    LID_ID: \"10001\",",
															"    INSTRUCTEUR_ID: \"10470\",",
															"    TEKST: \"Te laat bijgeprikt\",",
															"    START_ID: \"4\"",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    ",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"let record = ",
															"{",
															"    TEKST: \"Fantastische landing, perfect midden in doellandingsveld\"",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"pm.environment.set(\"orgID\", record.ID);",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"LINK_ID\", function () {",
															"    postData = JSON.parse(pm.environment.get('request_body'));",
															"    jsonData = pm.response.json();",
															"    ",
															"    pm.expect(jsonData.LINK_ID.toString()).to.eql(postData.ID.toString());",
															"});",
															"",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    ",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record Lege velden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"",
															"let record = ",
															"{",
															"    TEKST: null,",
															"    START_ID: null,",
															"    INSTRUCTEUR_ID: null,",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"pm.environment.set(\"orgID\", record.ID);",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    ",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"LINK_ID\", function () {",
															"    postData = JSON.parse(pm.environment.get('request_body'));",
															"    jsonData = pm.response.json();",
															"    ",
															"    pm.expect(jsonData.LINK_ID.toString()).to.eql(postData.ID.toString());",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            if (reqKey != \"ID\")",
													"            {",
													"                console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"                pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"            }",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject by Verwijderd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let orgID =  pm.environment.get(\"orgID\");",
													"console.log(\"GetObject id=\" + orgID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"VERWIJDERD\", function () {",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.VERWIJDERD.toString()).to.eql('1');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{orgID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{orgID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LID_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LID_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData).to.have.property('INSTRUCTEUR_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft TEKST', function() {",
											"  pm.expect(jsonData).to.have.property('TEKST');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft START_ID', function() {",
											"  pm.expect(jsonData).to.have.property('START_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INGEVOERD', function() {",
											"  pm.expect(jsonData).to.have.property('INGEVOERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LINK_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LINK_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd START_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: 100000",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"9910001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd INSTRUCTEUR_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"9910470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEUR_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEUR_ID",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    ID: \"ascii\",",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan START_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    \"LID_ID\": \"10001\",",
													"    \"INSTRUCTEUR_ID\": \"10470\",",
													"    \"TEKST\": \"Te laat bijgeprikt\",",
													"    \"START_ID\": \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"ascii\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"ascii\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met LINK_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\",",
													"    LINK_ID: 12",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met INGEVOERD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\",",
													"    INGEVOERD: \"2020-02-01 08:08:41\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen TEKST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"//    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"//    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    ID: \"1\",",
													"    DATUM: \"2009-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Tracks\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Progressie",
			"item": [
				{
					"name": "Create database",
					"item": [
						{
							"name": "Create table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_database_url}}?FILLDATA=true",
									"host": [
										"{{create_database_url}}"
									],
									"query": [
										{
											"key": "FILLDATA",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{create_view_url}}",
									"host": [
										"{{create_view_url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let aanmaken_database = pm.environment.get(\"create_database\");",
									"let aanmaken_views = pm.environment.get(\"create_views\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (aanmaken_database === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database overslaan\");",
									"    pm.environment.set(\"create_database_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_database_url\", url + \"/CreateTable\");",
									"}",
									"",
									"if (aanmaken_views === \"false\")",
									"{",
									"    console.log(\"Aanmaken \" + onderdeel + \" database views overslaan\");",
									"    pm.environment.set(\"create_view_url\", base_url + \"/dummy.php\");",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"create_view_url\", url + \"/CreateViews\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basis get",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor volgende testen",
													"let savedData = JSON.stringify(jsonData);",
													"pm.environment.set(\"savedData\", savedData);",
													"",
													"pm.environment.set(\"getObjectId\", jsonData.dataset[0].ID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"First record is last\", function () {",
													"",
													"    let lastID = jsonData.dataset[jsonData.dataset.length-1].ID",
													"    pm.expect(lastID).to.eql(pm.environment.get(\"getObjectId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID 10063",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"lid_id\", 10063);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let groep = pm.environment.get(\"groep\");",
													"",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(\"2\");",
													"});",
													"",
													"pm.test(\"LID_ID == 10063\", function () {",
													"    var fout = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (parseInt(jsonData.dataset[index].LID_ID) !== pm.environment.get(\"lid_id\"))",
													"            fout = 1;",
													"    }",
													"    pm.expect(fout).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID={{lid_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "{{lid_id}}"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft LID_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"});",
											"",
											"pm.test('Heeft INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_ID');",
											"});",
											"",
											"pm.test('Heeft COMPETENTIE_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('COMPETENTIE_ID');",
											"});",
											"",
											"pm.test('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"pm.test('Heeft INGEVOERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"});",
											"",
											"pm.test('Heeft LINK_ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LINK_ID');",
											"});",
											"",
											"pm.test('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"});",
											"",
											"pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											"pm.test(\"VERWIJDERD == 0\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        verwijderd += parseInt(jsonData.dataset[index].VERWIJDERD);   ",
											"    }",
											"    pm.expect(verwijderd).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test('Heeft LEERFASE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LEERFASE');",
											"});",
											"",
											"pm.test('Heeft COMPETENTIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('COMPETENTIE');",
											"});",
											"",
											"pm.test('Heeft LID_NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_NAAM');",
											"});",
											"",
											"pm.test('Heeft INSTRUCTEUR_NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_NAAM');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, LID_NAAM",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, LID_NAAM"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "ProgressieKaart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "LID_ID",
										"value": "10395",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/ProgressieKaart?LID_ID=10395",
									"host": [
										"{{url}}"
									],
									"path": [
										"ProgressieKaart"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10395"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						},
						{
							"name": "GetObjects LAASTE_AANPASSING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
											"",
											"pm.test(\"Dataset == null\", function () {",
											"    let velden = Object.keys([0]).length;",
											"    pm.expect(jsonData.dataset).to.eql(null);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "LAATSTE_AANPASSING",
											"value": "true"
										}
									]
								},
								"description": "Haal alle types op"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test('Heeft totaal', function() {",
									"  pm.expect(jsonData).to.have.property('totaal');",
									"});",
									"",
									"pm.test('Heeft laatste aanpassing', function() {",
									"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
									"});",
									"",
									"pm.test('Heeft dataset', function() {",
									"  pm.expect(jsonData).to.have.property('dataset');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Modificatie",
					"item": [
						{
							"name": "Alle Velden",
							"item": [
								{
									"name": "SaveObject",
									"item": [
										{
											"name": "Nieuw record opslaan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    LID_ID: 10063,",
															"    COMPETENTIE_ID: 22,",
															"    INSTRUCTEUR_ID: 10804,",
															"    OPMERKINGEN: \"Goed gewerkt\",",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update record",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    LID_ID: \"10063\",",
															"    COMPETENTIE_ID: \"42\",",
															"    INSTRUCTEUR_ID: \"10804\",",
															"    OPMERKINGEN: \"Verkeerde competentie ingevoerd\"",
															"}",
															"",
															"record.ID =  pm.environment.get(\"nieuwID\");",
															"pm.environment.set(\"orgID\", record.ID);",
															"console.log(\"Update id=\" + record.ID);",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
															"",
															"if (skipTest === false)",
															"{",
															"    let jsonData = pm.response.json();",
															"    ",
															"    pm.environment.set(\"nieuwID\", jsonData.ID);",
															"    console.log(\"nieuwID: \"+ jsonData.ID);",
															"}",
															"else",
															"{",
															"   pm.environment.set(\"nieuwID\", -1); ",
															"}",
															"",
															"(skipTest ? pm.test.skip : pm.test)",
															"(\"LINK_ID\", function () {",
															"    postData = JSON.parse(pm.environment.get('request_body'));",
															"    jsonData = pm.response.json();",
															"    ",
															"    pm.expect(jsonData.LINK_ID.toString()).to.eql(postData.ID.toString());",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{modify_database_url}}",
													"host": [
														"{{modify_database_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Nieuw record geen INSTRUCTEUR_ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"let record = {",
															"    LID_ID: 10063,",
															"    COMPETENTIE_ID: \"22\",",
															"//    INSTRUCTEUR_ID: \"10804\",",
															"}",
															"",
															"var body = JSON.stringify(record); ",
															"pm.environment.set('request_body', body);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{request_body}}"
												},
												"url": {
													"raw": "{{url}}/SaveObject",
													"host": [
														"{{url}}"
													],
													"path": [
														"SaveObject"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = null;",
													"let postData = null;",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let postData = JSON.parse(request.data);",
													"    let jsonData = pm.response.json();",
													"",
													"",
													"    pm.test(\"Response == Request\", function () {",
													"        // controleer alle velden die meegegeven zijn in de aanroep",
													"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
													"            console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
													"",
													"            if (reqKey == \"ID\")",
													"                pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]*1+1)); // ID +1 omdat oude record bewaard blijft",
													"            else",
													"                pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
													"        }",
													"    });",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "GetObject by Verwijderd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let orgID =  pm.environment.get(\"orgID\");",
													"console.log(\"GetObject id=\" + orgID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"(skipTest ? pm.test.skip : pm.test)",
													"(\"VERWIJDERD\", function () {",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.expect(jsonData.VERWIJDERD.toString()).to.eql('1');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{orgID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{orgID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.environment.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{getObjectId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{getObjectId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// 200 Succesvol",
											"// 409 Kan record niet opslaan vanwege duplicatie",
											"pm.test(\"Status code is 200 or 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,409]);",
											"});",
											"",
											"let jsonData = null;",
											"let skipTest = false;",
											"",
											"if (pm.request.method === 'GET')",
											"    skipTest = false;",
											"else",
											"    skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
											"",
											"if (pm.responsecode === 409)",
											"    console.log(pm.response.headers.get('X-Error-Message'));",
											"",
											"if (skipTest === false)",
											"    jsonData = pm.response.json();",
											"    ",
											"// Test of velden aanwezig zijn",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft ID', function() {",
											"  pm.expect(jsonData).to.have.property('ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LID_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LID_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INSTRUCTEUR_ID', function() {",
											"  pm.expect(jsonData).to.have.property('INSTRUCTEUR_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft COMPETENTIE_ID', function() {",
											"  pm.expect(jsonData).to.have.property('COMPETENTIE_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft OPMERKINGEN', function() {",
											"  pm.expect(jsonData).to.have.property('OPMERKINGEN');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft INGEVOERD', function() {",
											"  pm.expect(jsonData).to.have.property('INGEVOERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LINK_ID', function() {",
											"  pm.expect(jsonData).to.have.property('LINK_ID');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft VERWIJDERD', function() {",
											"  pm.expect(jsonData).to.have.property('VERWIJDERD');",
											"});",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"('Heeft LAATSTE_AANPASSING', function() {",
											"  pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.environment.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let skipTest = pm.environment.get(\"skipTest\");",
											"",
											"(skipTest ? pm.test.skip : pm.test)",
											"(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"let modify_database = pm.environment.get(\"modify_database\");",
									"",
									"let onderdeel = pm.environment.get(\"onderdeel\");",
									"",
									"let base_url = pm.environment.get(\"base_url\");",
									"let url = pm.environment.get(\"url\");",
									"",
									"",
									"if (modify_database === \"false\")",
									"{",
									"    console.log(\"Modificatie \" + onderdeel + \" overslaan\");",
									"    pm.environment.set(\"modify_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"delete_database_url\", base_url + \"/dummy.php\");",
									"    pm.environment.set(\"skipTest\", true);",
									"}",
									"else",
									"{",
									"    pm.environment.set(\"modify_database_url\", url + \"/SaveObject\");",
									"    pm.environment.set(\"delete_database_url\", url + \"/DeleteObject\");",
									"    pm.environment.set(\"skipTest\", false);",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Data missing 404",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"100063\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde competentie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: 10063,",
													"    COMPETENTIE_ID: \"92112\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"99804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"let skipTest = ((pm.response.code !== 200) || (pm.environment.get(\"skipTest\") === true));",
													"",
													"if (skipTest === false)",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"   pm.environment.set(\"nieuwID\", -1); ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data validatie error 405",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects LEERFASE_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan COMPETENTIE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"ascii\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: 10470,",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"ascii\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met LINK_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10001\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    LINK_ID:  11",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met INGEVOERD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10001\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    INGEVOERD: \"2020-02-01 08:08:41\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data missing 406",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwTypesID = pm.environment.get(\"nieuwTypesID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logboek zonder LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/ProgressieKaart",
											"host": [
												"{{url}}"
											],
											"path": [
												"ProgressieKaart"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2",
													"disabled": true
												},
												{
													"key": "VELDEN",
													"value": "ID, LID_NAAM",
													"disabled": true
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.environment.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let skipTest = pm.environment.get(\"skipTest\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen COMPETENTIE_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"//    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data bestaat al 409",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record =",
													"{",
													"    ID: 1, ",
													"    LID_ID: 10470,",
													"    COMPETENTIE_ID: 22,",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"};",
													"",
													"console.log(\"Dubbel ID id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.environment.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Data verwerking error 500",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										},
										"description": "Haal alle types op"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(pm.response.headers.get('X-Error-Message'));"
								]
							}
						}
					]
				},
				{
					"name": "ProgressieBoom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let savedData = JSON.parse(pm.environment.get(\"savedData\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "LID_ID",
								"type": "text",
								"value": "10395"
							}
						],
						"url": {
							"raw": "{{url}}/ProgressieBoom?LID_ID=10395",
							"host": [
								"{{url}}"
							],
							"path": [
								"ProgressieBoom"
							],
							"query": [
								{
									"key": "LID_ID",
									"value": "10395"
								}
							]
						},
						"description": "Haal alle types op"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Progressie\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "GetUserInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/GetUserInfo?ID=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"GetUserInfo"
							],
							"query": [
								{
									"key": "ID",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dev",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"",
							"let onderdeel = \"Login\";",
							"pm.environment.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.environment.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{helios_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{helios_username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let helios_password = pm.environment.get(\"helios_password\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}