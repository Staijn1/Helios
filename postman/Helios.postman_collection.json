{
	"info": {
		"_postman_id": "8f5d8965-1565-4917-baf7-8fbcec95ab71",
		"name": "Helios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12731165"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"Logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Login",
							"host": [
								"{{url}}"
							],
							"path": [
								"Login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let boolValues = [ false, true];",
									"",
									"pm.test('Heeft LidData', function() {",
									"  pm.expect(jsonData).to.have.property('LidData');",
									"});",
									"",
									"pm.test('Heeft Userinfo', function() {",
									"  pm.expect(jsonData).to.have.property('Userinfo');",
									"});",
									"",
									"",
									"// LidData",
									"pm.test('Heeft ID', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('ID');",
									"  });",
									"pm.test('Heeft NAAM', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('NAAM');",
									"  });",
									"pm.test('Heeft VOORNAAM', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('VOORNAAM');",
									"  });",
									"pm.test('Heeft TUSSENVOEGSEL', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('TUSSENVOEGSEL');",
									"  });",
									"pm.test('Heeft ACHTERNAAM', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('ACHTERNAAM');",
									"  });",
									"pm.test('Heeft ADRES', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('ADRES');",
									"  });",
									"pm.test('Heeft POSTCODE', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('POSTCODE');",
									"  });",
									"pm.test('Heeft WOONPLAATS', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('WOONPLAATS');",
									"  });",
									"pm.test('Heeft TELEFOON', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('TELEFOON');",
									"  });",
									"pm.test('Heeft MOBIEL', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('MOBIEL');",
									"  });",
									"pm.test('Heeft NOODNUMMER', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('NOODNUMMER');",
									"  });",
									"pm.test('Heeft EMAIL', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('EMAIL');",
									"  });",
									"pm.test('Heeft LIDNR', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('LIDNR');",
									"  });",
									"pm.test('Heeft LIDTYPE_ID', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('LIDTYPE_ID');",
									"  });",
									"pm.test('Heeft ZUSTERCLUB_ID', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('ZUSTERCLUB_ID');",
									"  });",
									"pm.test('Heeft LIERIST', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('LIERIST');",
									"  });",
									"",
									"pm.test('Heeft INSTRUCTEUR', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('INSTRUCTEUR');",
									"  });",
									"pm.test('Heeft CIMT', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('CIMT');",
									"  });",
									"pm.test('Heeft DDWV_CREW', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('DDWV_CREW');",
									"  });",
									"pm.test('Heeft DDWV_BEHEERDER', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('DDWV_BEHEERDER');",
									"  });",
									"pm.test('Heeft BEHEERDER', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('BEHEERDER');",
									"  });",
									"pm.test('Heeft STARTTOREN', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('STARTTOREN');",
									"  });",
									"pm.test('Heeft ROOSTER', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('ROOSTER');",
									"  });",
									"pm.test('Heeft CLUBBLAD_POST', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('CLUBBLAD_POST');",
									"  });",
									"pm.test('Heeft MEDICAL', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('MEDICAL');",
									"  });",
									"pm.test('Heeft GEBOORTE_DATUM', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('GEBOORTE_DATUM');",
									"  });",
									"pm.test('Heeft INLOGNAAM', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('INLOGNAAM');",
									"  });",
									"pm.test('Heeft WACHTWOORD', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('WACHTWOORD');",
									"  });",
									"pm.test('Heeft SECRET', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('SECRET');",
									"  });",
									"pm.test('Heeft AUTH', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('AUTH');",
									"  });",
									"pm.test('Heeft AVATAR', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('AVATAR');",
									"  });",
									"",
									"pm.test('Heeft PRIVACY', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('PRIVACY');",
									"  });",
									"",
									"pm.test('Heeft OPMERKINGEN', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('OPMERKINGEN');",
									"  });",
									"pm.test('Heeft VERWIJDERD', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('VERWIJDERD');",
									"  });",
									"pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"    pm.expect(jsonData.LidData).to.have.property('LAATSTE_AANPASSING');",
									"  });",
									"",
									"",
									"// Userinfo",
									"pm.test('Heeft isBeheerderDDWV', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isBeheerderDDWV');",
									"  });",
									"pm.test('Heeft isBeheerder', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isBeheerder');",
									"  });",
									"",
									"pm.test('Heeft isInstructeur', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isInstructeur');",
									"  });",
									"pm.test('Heeft isCIMT', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isCIMT');",
									"  });",
									"pm.test('Heeft isStarttoren', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isStarttoren');",
									"  });",
									"pm.test('Heeft isRooster', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isRooster');",
									"  });",
									"pm.test('Heeft isClubVlieger', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isClubVlieger');",
									"  });",
									"pm.test('Heeft isDDWV', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isDDWV');",
									"  });",
									"pm.test('Heeft isAangemeld', function() {",
									"    pm.expect(jsonData.Userinfo).to.have.property('isAangemeld');",
									"  });",
									"",
									"",
									"",
									"pm.test(\"Boolean isBeheerderDDWV\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isBeheerderDDWV).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isBeheerder\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isBeheerder).to.eql(\"boolean\");",
									"  });",
									"",
									"pm.test(\"Boolean isInstructeur\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isInstructeur).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isCIMT\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isCIMT).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isStarttoren\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isStarttoren).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isRooster\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isRooster).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isClubVlieger\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isClubVlieger).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isDDWV\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isDDWV).to.eql(\"boolean\");",
									"  });",
									"pm.test(\"Boolean isAangemeld\", function() {",
									"    pm.expect(typeof jsonData.Userinfo.isAangemeld).to.eql(\"boolean\");",
									"  });",
									"",
									"",
									"pm.test(\"LIERIST\", function () {    ",
									"    pm.expect(jsonData.LidData.LIERIST).to.be.oneOf(boolValues); ",
									"});",
									"",
									"",
									"pm.test(\"INSTRUCTEUR\", function () {    ",
									"    pm.expect(jsonData.LidData.INSTRUCTEUR).to.be.oneOf(boolValues); ",
									"});",
									"",
									"pm.test(\"CIMT\", function () {    ",
									"    pm.expect(jsonData.LidData.CIMT).to.be.oneOf(boolValues); ",
									"});",
									"",
									"pm.test(\"BEHEERDER\", function () {    ",
									"    pm.expect(jsonData.LidData.BEHEERDER).to.be.oneOf(boolValues); ",
									"});",
									"",
									"pm.test(\"DDWV_BEHEERDER\", function () {    ",
									"    pm.expect(jsonData.LidData.DDWV_BEHEERDER).to.be.oneOf(boolValues); ",
									"});",
									"",
									"pm.test(\"STARTTOREN\", function () {    ",
									"    pm.expect(jsonData.LidData.STARTTOREN).to.be.oneOf(boolValues); ",
									"});",
									"",
									"pm.test(\"AUTH\", function () {    ",
									"    pm.expect(jsonData.LidData.AUTH).to.be.oneOf(boolValues); ",
									"});",
									"",
									"",
									" // Overige testen",
									"pm.test('WACHTWOORD onzichtbaar', function() {",
									"    pm.expect(jsonData.LidData.WACHTWOORD).to.eql('****');",
									"  });",
									"",
									"pm.test('VERWIJDERD == 0', function() {",
									"    pm.expect(jsonData.LidData.VERWIJDERD).to.eql(false);",
									"  });",
									"",
									"let inlognaam = pm.environment.get(\"helios_username\");",
									"pm.test('INLOGNAAM == ' + inlognaam, function() {",
									"    pm.expect(jsonData.LidData.INLOGNAAM).to.eql(inlognaam);",
									"  });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/GetUserInfo",
							"host": [
								"{{url}}"
							],
							"path": [
								"GetUserInfo"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"-----> \" + pm.info.requestName);",
							"console.log(\"base url:\", pm.environment.get(\"base_url\"))",
							"let onderdeel = \"Login\";",
							"pm.variables.set(\"onderdeel\", onderdeel);",
							"",
							"let url = pm.environment.get(\"base_url\") + \"/\" + onderdeel;",
							"pm.variables.set(\"url\", url);",
							"",
							"console.log(\"Url:\" + url);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ophalen data",
			"item": [
				{
					"name": "Types",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=601",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "601"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Groep = 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let groep = parseInt(pm.request.url.query.get(\"GROEP\"));",
													"",
													"let aantalRecords = 9;",
													"",
													"pm.test(\"Aantal records == \" + aantalRecords, function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(aantalRecords);",
													"});",
													"",
													"pm.test(\"Totaal == \" + aantalRecords, function () {",
													"    pm.expect(parseInt(jsonData.totaal)).to.eql(aantalRecords);",
													"});",
													"",
													"pm.test(\"GROEP == \" + groep, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].GROEP).to.eql(groep);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?GROEP=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "GROEP",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test(\"ID isInt\", function() {",
											"        pm.expect(typeof jsonData.dataset[0].ID).to.eql(\"number\");",
											"    });",
											"",
											"    pm.test('Heeft GROEP', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('GROEP');",
											"    });",
											"",
											"    pm.test('Heeft CODE', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('CODE');",
											"    });",
											"",
											"    pm.test('Heeft EXT_REF', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('EXT_REF');",
											"    });",
											"",
											"    pm.test('Heeft OMSCHRIJVING', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('OMSCHRIJVING');",
											"    });",
											"",
											"    pm.test('Heeft SORTEER_VOLGORDE', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('SORTEER_VOLGORDE');",
											"    });",
											"",
											"    pm.test('Heeft READ_ONLY', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('READ_ONLY');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0  ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft OMSCHRIJVING', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('OMSCHRIJVING');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" OMSCHRIJVING\", function () {",
											"        pm.expect(jsonData.dataset[index].OMSCHRIJVING).to.eq(savedData.dataset[index].OMSCHRIJVING);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, OMSCHRIJVING",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, OMSCHRIJVING"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Types\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Competenties",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=34",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "34"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Leerfase VVO-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let leerfase = parseInt(pm.request.url.query.get(\"LEERFASE_ID\"));",
													"",
													"let aantalRecords = 18;",
													"",
													"pm.test(\"Aantal records == \" + aantalRecords, function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(aantalRecords);",
													"});",
													"",
													"pm.test(\"Totaal == \" + aantalRecords, function () {",
													"    pm.expect(parseInt(jsonData.totaal)).to.eql(aantalRecords);",
													"});",
													"",
													"pm.test(\"LEERFASE == \" + leerfase, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LEERFASE_ID).to.eql(leerfase);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID=1002",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "1002"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft LEERFASE_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LEERFASE_ID');",
											"    });",
											"",
											"    pm.test('Heeft BLOK', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('BLOK');",
											"    });",
											"",
											"    pm.test('Heeft ONDERWERP', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ONDERWERP');",
											"    });",
											"",
											"    pm.test('Heeft DOCUMENTATIE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DOCUMENTATIE');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0    ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"        ",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft ONDERWERP', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ONDERWERP');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" ONDERWERP\", function () {",
											"        pm.expect(jsonData.dataset[index].ONDERWERP).to.eq(savedData.dataset[index].ONDERWERP);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, ONDERWERP",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, ONDERWERP"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Competenties\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Daginfo",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=4",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    let boolValues = [ false, true];",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"    ",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft DATUM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"    });",
											"",
											"    pm.test('Heeft BAAN_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('BAAN_ID');",
											"    });",
											"",
											"",
											"    pm.test('Heeft DDWV', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DDWV');",
											"    });",
											"",
											"    pm.test('Heeft CLUB_BEDRIJF', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('CLUB_BEDRIJF');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGBEDRIJF', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGBEDRIJF');",
											"    });",
											"",
											"    pm.test('Heeft METEO', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('METEO');",
											"    });",
											"",
											"    pm.test('Heeft DIENSTEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DIENSTEN');",
											"    });",
											"",
											"    pm.test('Heeft VERSLAG', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERSLAG');",
											"    });",
											"",
											"    pm.test('Heeft ROLLENDMATERIEEL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ROLLENDMATERIEEL');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGENDMATERIEEL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGENDMATERIEEL');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft VELD_CODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VELD_CODE');",
											"    });",
											"",
											"    pm.test('Heeft VELD_OMS', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VELD_OMS');",
											"    });",
											"",
											"    pm.test('Heeft BAAN_CODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('BAAN_CODE');",
											"    });",
											"",
											"    pm.test('Heeft BAAN_OMS', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('BAAN_OMS');",
											"    });",
											"",
											"    pm.test('Heeft STARTMETHODE_CODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_CODE');",
											"    });",
											"",
											"    pm.test('Heeft STARTMETHODE_OMS', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_OMS');",
											"    });",
											"",
											"    pm.test(\"DDWV\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].DDWV).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"CLUB_BEDRIJF\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].CLUB_BEDRIJF).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0  ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"        ",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft VELD_OMS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VELD_OMS');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" VELD_OMS\", function () {",
											"        pm.expect(jsonData.dataset[index].VELD_OMS).to.eq(savedData.dataset[index].VELD_OMS);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,VELD_OMS",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,VELD_OMS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Daginfo\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Vliegtuigen",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=214",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "214"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Clubkisten",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"CLUBKIST == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].CLUBKIST).to.eql(true);",
													"    }",
													"});",
													"",
													"pm.test(\"TYPE\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE).not.to.eql(null);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?CLUBKIST=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "CLUBKIST",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID 212,214",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let id = pm.request.url.query.get(\"IN\");",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ID == \" + id, function () {",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(id.includes(jsonData.dataset[index].ID)).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?IN=212,214,201",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "212,214,201"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN == 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let zitplaatsen = parseInt(pm.request.url.query.get(\"ZITPLAATSEN\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ZITPLAATSEN == \" + zitplaatsen, function () {   ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].ZITPLAATSEN).to.eql(zitplaatsen);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN == 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let zitplaatsen = parseInt(pm.request.url.query.get(\"ZITPLAATSEN\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ZITPLAATSEN == \" + zitplaatsen, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].ZITPLAATSEN).to.eql(zitplaatsen);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SELECTIE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let selectie = pm.request.url.query.get(\"SELECTIE\");",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SELECTIE == \" + selectie, function () {",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].REG_CALL.includes(selectie)).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?SELECTIE=16",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SELECTIE",
													"value": "16"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SLEEPKIST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SLEEPKIST == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].SLEEPKIST).to.eql(true);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?SLEEPKIST=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SLEEPKIST",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ZELFSTART",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ZELFSTART == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].ZELFSTART).to.eql(true);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?ZELFSTART=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZELFSTART",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal == 5\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(5);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES= 404, 405",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": " 404, 405"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects IN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal == 2\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?IN=200,201",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "200,201"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"        let boolValues = [ false, true];",
											"    ",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"    ",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft REGISTRATIE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REGISTRATIE');",
											"    });",
											"",
											"    pm.test('Heeft CALLSIGN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('CALLSIGN');",
											"    });",
											"",
											"    pm.test('Heeft FLARMCODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('FLARMCODE');",
											"    });",
											"",
											"    pm.test('Heeft ZITPLAATSEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ZITPLAATSEN');",
											"    });",
											"",
											"    pm.test('Heeft ZELFSTART', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ZELFSTART');",
											"    });",
											"",
											"    pm.test('Heeft CLUBKIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('CLUBKIST');",
											"    });",
											"",
											"    pm.test('Heeft TMG', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('TMG');",
											"    });",
											"",
											"    pm.test('Heeft SLEEPKIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('SLEEPKIST');",
											"    });",
											"",
											"    pm.test('Heeft TYPE_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('TYPE_ID');",
											"    });",
											"",
											"    pm.test('Heeft VOLGORDE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VOLGORDE');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGTUIGTYPE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE');",
											"    });",
											"",
											"    pm.test('Heeft REG_CALL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"    });",
											"",
											"    pm.test(\"REG_CALL\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].CALLSIGN == null)",
											"                jsonData.dataset[index].CALLSIGN = \"\";",
											"                ",
											"            pm.expect(jsonData.dataset[index].REG_CALL).to.eql(jsonData.dataset[index].REGISTRATIE + \" (\" + jsonData.dataset[index].CALLSIGN + \")\");",
											"        }",
											"    });",
											"",
											"",
											"    pm.test(\"CLUBKIST\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].CLUBKIST).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"TMG\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].TMG).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"ZELFSTART\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].ZELFSTART).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"SLEEPKIST\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].SLEEPKIST).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"ZITPLAATSEN\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].ZITPLAATSEN).to.be.oneOf([ 1, 2]); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0  ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"        ",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft REGISTRATIE', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REGISTRATIE');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" REGISTRATIE\", function () {",
											"        pm.expect(jsonData.dataset[index].REGISTRATIE).to.eq(savedData.dataset[index].REGISTRATIE);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REGISTRATIE",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REGISTRATIE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Vliegtuigen\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Leden",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Jeugleden / Ereleden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let id = pm.request.url.query.get(\"TYPES\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ID == \" + id, function () {   ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(id.includes(jsonData.dataset[index].LIDTYPE_ID)).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=601,603",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "601,603"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects DDWV",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let id = parseInt(pm.request.url.query.get(\"TYPES\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"LIDTYPE == \" + id, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LIDTYPE_ID).to.eql(id);",
													"    }",
													"});",
													"",
													"pm.test(\"ZUSTERCLUB == not null\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].ZUSTERCLUB).not.equal(null);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=625",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "625"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Lieristen",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"LIERIST == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LIERIST).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LIERISTEN=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LIERISTEN",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Startleiders",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"STARTLEIDER == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].STARTLEIDER).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?STARTLEIDERS=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "STARTLEIDERS",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Instructeurs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"INSTRUCTEUR == 1\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].INSTRUCTEUR).to.eql(true);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEURS=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEURS",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Instructeurs & Lieristen",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"INSTRUCTEUR == 1 && LIERIST == 1\", function () {",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].INSTRUCTEUR).to.eql(true);",
													"        pm.expect(jsonData.dataset[index].STARTLEIDER).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEURS=1&LIERISTEN=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEURS",
													"value": "1"
												},
												{
													"key": "LIERISTEN",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects DDWV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Totaal == 1\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(1);",
													"});",
													"",
													"pm.test(\"DDWV == 1 or DDWV_CREW\", function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].DDWV_CREW ).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?DDWV_CREW=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "DDWV_CREW",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let url = pm.variables.get(\"base_url\");",
											"",
											"pm.sendRequest({",
											"    url: url + \"/Login/GetUserInfo\",",
											"    method: 'GET'},",
											"    function (err, res) {",
											"        let response = res.json();",
											"",
											"        pm.variables.set(\"beheerder\", (response.Userinfo.isBeheerder == true) ? 1  : 0);",
											"    });",
											"  "
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    let boolValues = [ false, true];",
											"",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"    ",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft NAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('NAAM');",
											"    });",
											"",
											"    pm.test('Heeft VOORNAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VOORNAAM');",
											"    });",
											"",
											"    pm.test('Heeft TUSSENVOEGSEL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('TUSSENVOEGSEL');",
											"    });",
											"",
											"    pm.test('Heeft ACHTERNAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ACHTERNAAM');",
											"    });",
											"",
											"    pm.test('Heeft ADRES', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ADRES');",
											"    });",
											"",
											"    pm.test('Heeft POSTCODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('POSTCODE');",
											"    });",
											"",
											"    pm.test('Heeft WOONPLAATS', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('POSTCODE');",
											"    });",
											"",
											"    pm.test('Heeft TELEFOON', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('TELEFOON');",
											"    });",
											"",
											"    pm.test('Heeft MOBIEL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MOBIEL');",
											"    });",
											"",
											"    pm.test('Heeft NOODNUMMER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('NOODNUMMER');",
											"    });",
											"",
											"    pm.test('Heeft EMAIL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('EMAIL');",
											"    });",
											"",
											"    pm.test('Heeft LIDNR', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LIDNR');",
											"    });",
											"",
											"    pm.test('Heeft LIDTYPE_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LIDTYPE_ID');",
											"    });",
											"",
											"    pm.test('Heeft ZUSTERCLUB_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ZUSTERCLUB_ID');",
											"    });",
											"",
											"    pm.test('Heeft LIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LIERIST');",
											"    });",
											"",
											"    pm.test('Heeft STARTLEIDER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTLEIDER');",
											"    });",
											"",
											"    pm.test('Heeft INSTRUCTEUR', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR');",
											"    });",
											"",
											"    pm.test('Heeft MEDICAL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MEDICAL');",
											"    });",
											"",
											"    pm.test('Heeft INLOGNAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('INLOGNAAM');",
											"    });",
											"",
											"    pm.test('Heeft WACHTWOORD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('WACHTWOORD');",
											"    });",
											"",
											"    pm.test('Heeft HEEFT_BETAALD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('HEEFT_BETAALD');",
											"    });",
											"",
											"    pm.test('Heeft LIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LIERIST');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft LIDTYPE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LIDTYPE');",
											"    });",
											"",
											"    pm.test('Heeft ZUSTERCLUB', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ZUSTERCLUB');",
											"    });",
											"",
											"    pm.test('Heeft BEPERKINGEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('BEPERKINGEN');",
											"    });",
											"",
											"    pm.test('Heeft OPMERKINGEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"    });",
											"",
											"    pm.test(\"LIERIST\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].LIERIST).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"STARTLEIDER\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].STARTLEIDER).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"INSTRUCTEUR\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].INSTRUCTEUR).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"CIMT\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].CIMT).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"BEHEERDER\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].BEHEERDER).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"DDWV_BEHEERDER\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].DDWV_BEHEERDER).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"STARTTOREN\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].STARTTOREN).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"AUTH\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].AUTH).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"HEEFT_BETAALD\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].HEEFT_BETAALD).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    if (pm.variables.get(\"beheerder\" == 0))",
											"    {",
											"        pm.test(\"WACHTWOORD\", function () {    ",
											"            for (index = 0; index < jsonData.dataset.length; ++index) ",
											"            {",
											"                pm.expect(jsonData.dataset[index].WACHTWOORD).to.eql(\"****\"); ",
											"            }",
											"        });",
											"    }",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0   ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('NAAM');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" NAAM\", function () {",
											"        pm.expect(jsonData.dataset[index].NAAM).to.eq(savedData.dataset[index].NAAM);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,NAAM",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,NAAM"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Leden\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Rooster",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=3",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let boolValues = [ false, true];",
											"",
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft DATUM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_DDI_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_DDI_ID');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_INSTRUCTEUR_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_INSTRUCTEUR_ID');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_STARTLEIDER_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_STARTLEIDER_ID');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_LIERIST_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_LIERIST_ID');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_HULPLIERIST_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_HULPLIERIST_ID');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_DDI_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_DDI_ID');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_INSTRUCTEUR_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_INSTRUCTEUR_ID');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_STARTLEIDER_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_STARTLEIDER_ID');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_LIERIST_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_LIERIST_ID');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_HULPLIERIST_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_HULPLIERIST_ID');",
											"    });",
											"",
											"    pm.test('Heeft DDWV', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DDWV');",
											"    });",
											"",
											"    pm.test('Heeft CLUB_BEDRIJF', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('CLUB_BEDRIJF');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"",
											"    pm.test('Heeft OCHTEND_DDI', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_DDI');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_INSTRUCTEUR', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_INSTRUCTEUR');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_STARTLEIDER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_STARTLEIDER');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_LIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_LIERIST');",
											"    });",
											"",
											"    pm.test('Heeft OCHTEND_HULPLIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OCHTEND_HULPLIERIST');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_DDI', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_DDI');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_INSTRUCTEUR', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_INSTRUCTEUR');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_STARTLEIDER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_STARTLEIDER');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_LIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_LIERIST');",
											"    });",
											"",
											"    pm.test('Heeft MIDDAG_HULPLIERIST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_HULPLIERIST');",
											"    });",
											"",
											"    pm.test(\"DDWV\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].DDWV).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"CLUB_BEDRIJF\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].CLUB_BEDRIJF).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0    ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(parseInt(savedData.totaal));",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft MIDDAG_DDI', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('MIDDAG_DDI');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(parseInt(savedData.dataset[index].ID));",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" MIDDAG_DDI\", function () {",
											"        pm.expect(jsonData.dataset[index].MIDDAG_DDI).to.eq(savedData.dataset[index].MIDDAG_DDI);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,MIDDAG_DDI",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,MIDDAG_DDI"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Rooster\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Aanmelding Leden",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01&HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=3",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Lid 10265",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lid_id = parseInt(pm.request.url.query.get(\"IN\"));",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"",
													"pm.test(\"LID_ID == \" + lid_id, function () {",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LID_ID).to.eql(lid_id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?IN=10265",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "10265"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects alleen leden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let id = pm.request.url.query.get(\"TYPES\");",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"ID == \" + id, function () {   ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(id.includes(jsonData.dataset[index].LIDTYPE_ID)).to.eql(true);",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=601,602,603,606,608&BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "601,602,603,606,608"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID&BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC&BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let id = pm.request.url.query.get(\"ID\");",
											"let lid_id = pm.request.url.query.get(\"IN\");",
											"",
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft DATUM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"    });",
											"",
											"    pm.test('Heeft POSITIE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('POSITIE');",
											"    });",
											"",
											"    pm.test('Heeft LID_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"    });",
											"",
											"    pm.test('Heeft VOORAANMELDING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VOORAANMELDING');",
											"    });",
											"",
											"    pm.test('Heeft AANKOMST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('AANKOMST');",
											"    });",
											"",
											"    pm.test('Heeft VERTREK', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERTREK');",
											"    });",
											"",
											"    pm.test('Heeft OVERLAND_VLIEGTUIG_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OVERLAND_VLIEGTUIG_ID');",
											"    });",
											"",
											"    pm.test('Heeft VOORKEUR_VLIEGTUIG_TYPE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VOORKEUR_VLIEGTUIG_TYPE');",
											"    });",
											"",
											"    pm.test('Heeft OPMERKINGEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGER');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGTUIGTYPE_CODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE_CODE');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGTUIGTYPE_OMS', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIGTYPE_OMS');",
											"    });",
											"",
											"    pm.test('Heeft REG_CALL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"    });",
											"",
											"    if ((id == undefined) && (lid_id == undefined))",
											"    {",
											"        let beginDatum = parseInt(pm.request.url.query.get(\"BEGIN_DATUM\").replace(\"-\",\"\"));",
											"",
											"        pm.test(\"VLIEGDAG >= BEGINDATUM\", function () {",
											"            var verwijderd = 0;",
											"            ",
											"            for (index = 0; index < jsonData.dataset.length; ++index) ",
											"            {",
											"                datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
											"                pm.expect(datum).to.gte(beginDatum);",
											"            }    ",
											"        });",
											"    }",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0    ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].OVERLAND_VLIEGTUIG_ID != null)",
											"        {",
											"            pm.test(\"OVERLAND == not null\", function () {  ",
											"                pm.expect(jsonData.dataset[index].REG_CALL).not.eql(null);",
											"            });",
											"        }",
											"    }",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].OVERLAND_VLIEGTUIG_ID == null)",
											"        {",
											"            pm.test(\"OVERLAND == null\", function () {   ",
											"                pm.expect(jsonData.dataset[index].REG_CALL).eql(null);",
											"            });",
											"        }",
											"    }",
											"        ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].VOORKEUR_VLIEGTUIG_TYPE != null)",
											"        {",
											"            pm.test(\"TYPES == not null\", function () {",
											"                pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_CODE).not.eql(null);",
											"                pm.expect(jsonData.dataset[index].VLIEGTUIGTYPE_OMS).not.eql(null);",
											"            });",
											"        }",
											"    }",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "Potentiele vliegers",
							"item": [
								{
									"name": "PotentieelVliegers clubkist met aangemelde vliegers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 3\", function () {",
													"    pm.expect(jsonData.length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=200&DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"PotentieelVliegers"
											],
											"query": [
												{
													"key": "VLIEGTUIG_ID",
													"value": "200"
												},
												{
													"key": "DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PotentieelVliegers prive kist zonder aanmelding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=218&DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"PotentieelVliegers"
											],
											"query": [
												{
													"key": "VLIEGTUIG_ID",
													"value": "218"
												},
												{
													"key": "DATUM",
													"value": "{{dit_jaar}}-05-02"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PotentieelVliegers prive kist met aanmelding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    pm.expect(jsonData.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=217&DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"PotentieelVliegers"
											],
											"query": [
												{
													"key": "VLIEGTUIG_ID",
													"value": "217"
												},
												{
													"key": "DATUM",
													"value": "{{dit_jaar}}-05-02"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PotentieelVliegers alle leden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 14\", function () {",
													"    pm.expect(jsonData.length).to.eql(14);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=213&DATUM={{dit_jaar}}-04-29",
											"host": [
												"{{url}}"
											],
											"path": [
												"PotentieelVliegers"
											],
											"query": [
												{
													"key": "VLIEGTUIG_ID",
													"value": "213"
												},
												{
													"key": "DATUM",
													"value": "{{dit_jaar}}-04-29"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PotentieelVliegers alle leden, zonder DDWV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 12\", function () {",
													"    pm.expect(jsonData.length).to.eql(12);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/PotentieelVliegers?VLIEGTUIG_ID=213&DATUM={{dit_jaar}}-04-28",
											"host": [
												"{{url}}"
											],
											"path": [
												"PotentieelVliegers"
											],
											"query": [
												{
													"key": "VLIEGTUIG_ID",
													"value": "213"
												},
												{
													"key": "DATUM",
													"value": "{{dit_jaar}}-04-28"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft LID_ID', function() {",
											"  pm.expect(jsonData[0]).to.have.property('LID_ID');",
											"});",
											"",
											"pm.test('Heeft VLIEGER', function() {",
											"  pm.expect(jsonData[0]).to.have.property('VLIEGER');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(parseInt(savedData.totaal));",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft VLIEGER', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGER');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(parseInt(savedData.dataset[index].ID));",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" VLIEGER\", function () {",
											"        pm.expect(jsonData.dataset[index].VLIEGER).to.eq(savedData.dataset[index].VLIEGER);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,VLIEGER&BEGIN_DATUM={{dit_jaar}}-05-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,VLIEGER"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "{{dit_jaar}}-05-01"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"AanwezigLeden\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Aanmelding Vliegtuigen",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01&HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=6",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Vliegtuig 210",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let vliegtuig_id = parseInt(pm.request.url.query.get(\"IN\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(2);",
													"});",
													"",
													"pm.test(\"VLIEGTUIG_ID == \" + vliegtuig_id, function () {",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].VLIEGTUIG_ID).to.eql(vliegtuig_id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?IN=200",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID&BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC&BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&BEGIN_DATUM={{dit_jaar}}-05-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let id = pm.request.url.query.get(\"ID\");",
											"let vliegtuig_id = pm.request.url.query.get(\"IN\");",
											"",
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft DATUM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGTUIG_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIG_ID');",
											"    });",
											"",
											"    pm.test('Heeft AANKOMST', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('AANKOMST');",
											"    });",
											"",
											"    pm.test('Heeft VERTREK', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERTREK');",
											"    });",
											"",
											"    pm.test('Heeft LATITUDE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LATITUDE');",
											"    });",
											"",
											"    pm.test('Heeft LONGITUDE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LONGITUDE');",
											"    });",
											"",
											"    pm.test('Heeft HOOGTE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('HOOGTE');",
											"    });",
											"",
											"    pm.test('Heeft SNELHEID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('SNELHEID');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft REG_CALL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"    });",
											"",
											"    if ((id == undefined) && (vliegtuig_id == undefined))",
											"    {",
											"        let beginDatum = parseInt(pm.request.url.query.get(\"BEGIN_DATUM\").replace(\"-\",\"\"));",
											"",
											"        pm.test(\"VLIEGDAG >= BEGINDATUM\", function () {",
											"            var verwijderd = 0;",
											"            ",
											"            for (index = 0; index < jsonData.dataset.length; ++index) ",
											"            {",
											"                datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
											"                pm.expect(datum).to.gte(beginDatum);",
											"            }    ",
											"        });",
											"    }",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0    ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft REG_CALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" REG_CALL\", function () {",
											"        pm.expect(jsonData.dataset[index].REG_CALL).to.eq(savedData.dataset[index].REG_CALL);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REG_CALL&BEGIN_DATUM={{dit_jaar}}-05-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REG_CALL"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "{{dit_jaar}}-05-01"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"AanwezigVliegtuigen\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Startlijst",
					"item": [
						{
							"name": "Vliegdagen",
							"item": [
								{
									"name": "Vliegdagen zonder DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let jaar = pm.variables.get(\"dit_jaar\");",
													"",
													"pm.test(\"VLIEGDAG == DIT JAAR\", function () {",
													"    var verwijderd = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        datum = new Date(jsonData.dataset[index].DATUM);   ",
													"        pm.expect(datum.getFullYear()).to.eql(jaar);",
													"    }    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegDagen",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegDagen"
											]
										}
									},
									"response": []
								},
								{
									"name": "Vliegdagen met BEGIN_DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let beginDatum = parseInt(pm.request.url.query.get(\"BEGIN_DATUM\").replace(\"-\",\"\"));",
													"",
													"pm.test(\"VLIEGDAG >= BEGINDATUM\", function () {",
													"    var verwijderd = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
													"        pm.expect(datum).to.gte(beginDatum);",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegDagen?BEGIN_DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegDagen"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-02"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Vliegdagen met EIND_DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let eindDatum = parseInt(pm.request.url.query.get(\"EIND_DATUM\").replace(\"-\",\"\"));",
													"",
													"pm.test(\"VLIEGDAG >= EINDDATUM\", function () {",
													"    var verwijderd = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
													"        pm.expect(datum).to.lte(eindDatum);",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegDagen?EIND_DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegDagen"
											],
											"query": [
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-02"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Vliegdagen met EIND_DATUM SORT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let eindDatum = parseInt(pm.request.url.query.get(\"EIND_DATUM\").replace(\"-\",\"\"));",
													"",
													"pm.test(\"VLIEGDAG >= BEGINDATUM\", function () {",
													"    let vorigeDatum = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
													"        pm.expect(datum).to.lte(eindDatum);",
													"",
													"        if (vorigeDatum != null)",
													"        {",
													"            pm.expect(datum).to.gte(vorigeDatum);",
													"            vorigeDatum = datum;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegDagen?EIND_DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegDagen"
											],
											"query": [
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-02"
												},
												{
													"key": "SORT",
													"value": "DATUM DESC",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Vliegdagen met EIND_DATUM en LID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Totaal == 1\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(1);",
													"});",
													"",
													"datum = pm.variables.get(\"dit_jaar\") + \"-05-04\";",
													"pm.test(\"Datum == \" + datum, function () {",
													"    pm.expect(jsonData.dataset[0].DATUM).to.eql(datum);",
													"});",
													"",
													"pm.test(\"STARTS == 2\", function () {",
													"    pm.expect(jsonData.dataset[0].STARTS).to.eql(\"2\");",
													"});",
													"",
													"pm.test(\"VLIEGTIJD == 02:11\", function () {",
													"    pm.expect(jsonData.dataset[0].VLIEGTIJD).to.eql(\"02:11\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegDagen?LID_ID=10858&BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-05",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegDagen"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "10858"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-05"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test('Heeft DATUM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"});",
											"",
											"pm.test('Heeft STARTS', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('STARTS');",
											"});",
											"",
											"pm.test('Heeft VLIEGTIJD', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTIJD');",
											"});",
											"",
											"pm.test(\"STARTS >= 1\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        starts = parseInt(jsonData.dataset[index].STARTS);   ",
											"        pm.expect(starts).to.greaterThan(0);",
											"    }    ",
											"});",
											"",
											"pm.test(\"VLIEGTIJD gezet\", function () {",
											"    var verwijderd = 0;",
											"    ",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        tijd = jsonData.dataset[index].VLIEGTIJD.split(':') ",
											"        pm.expect(tijd.length).to.eq(2);",
											"    }    ",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 43\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(43);",
													"});",
													"",
													"pm.test(\"Totaal == 43\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(43);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=50",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects BEGIN_DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let beginDatum = parseInt(pm.request.url.query.get(\"BEGIN_DATUM\").replace(\"-\",\"\"));",
													"let eindDatum = parseInt(pm.request.url.query.get(\"EIND_DATUM\").replace(\"-\",\"\"));",
													"",
													"pm.test(\"VLIEGDAG >= BEGINDATUM && <= EINDDATUM\", function () {",
													"    var verwijderd = 0;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        datum = parseInt(jsonData.dataset[index].DATUM.replace(\"-\",\"\"));   ",
													"",
													"        pm.expect(datum).to.gte(beginDatum);",
													"        pm.expect(datum).to.lte(eindDatum);",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-03",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-03"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    let boolValues = [ false, true];",
											"",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"    ",
											"    pm.test('Heeft ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft DATUM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
											"    });",
											"",
											"    pm.test('Heeft DAGNUMMER', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DAGNUMMER');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGTUIG_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTUIG_ID');",
											"    });",
											"",
											"    pm.test('Heeft STARTTIJD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTTIJD');",
											"    });",
											"",
											"    pm.test('Heeft LANDINGSTIJD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LANDINGSTIJD');",
											"    });",
											"",
											"    pm.test('Heeft STARTMETHODE_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE_ID');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGER_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGER_ID');",
											"    });",
											"",
											"    pm.test('Heeft INZITTENDE_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDE_ID');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGERNAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGERNAAM');",
											"    });",
											"",
											"    pm.test('Heeft INZITTENDENAAM', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDENAAM');",
											"    });",
											"",
											"    pm.test('Heeft SLEEPKIST_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('SLEEPKIST_ID');",
											"    });",
											"",
											"    pm.test('Heeft SLEEP_HOOGTE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('SLEEP_HOOGTE');",
											"    });",
											"",
											"    pm.test('Heeft VELD_ID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VELD_ID');",
											"    });",
											"",
											"    pm.test('Heeft OPMERKINGEN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"    });",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft REGISTRATIE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REGISTRATIE');",
											"    });",
											"",
											"    pm.test('Heeft CALLSIGN', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('CALLSIGN');",
											"    });",
											"",
											"    pm.test('Heeft REG_CALL', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"    });",
											"",
											"    pm.test('Heeft DUUR', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('DUUR');",
											"    });",
											"",
											"    pm.test('Heeft VLIEGERNAAM_LID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VLIEGERNAAM_LID');",
											"    });",
											"",
											"    pm.test('Heeft INZITTENDENAAM_LID', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('INZITTENDENAAM_LID');",
											"    });",
											"",
											"    pm.test('Heeft STARTMETHODE', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('STARTMETHODE');",
											"    });",
											"",
											"    pm.test('Heeft VELD', function() {",
											"    pm.expect(jsonData.dataset[0]).to.have.property('VELD');",
											"    });",
											"",
											"    pm.test(\"REG_CALL\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].REG_CALL).to.eql(jsonData.dataset[index].REGISTRATIE + \" (\" + jsonData.dataset[index].CALLSIGN + \")\");",
											"        }",
											"    });",
											"",
											"    pm.test(\"CLUBKIST\", function () {    ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            pm.expect(jsonData.dataset[index].CLUBKIST).to.be.oneOf(boolValues); ",
											"        }",
											"    });",
											"",
											"    pm.test(\"STARTTIJD gezet\", function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].VLIEGTIJD)",
											"            {",
											"                tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
											"                pm.expect(tijd.length).to.eq(2);",
											"            }",
											"        }",
											"    });",
											"",
											"    pm.test(\"LANDINGSTIJD gezet\", function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].LANDINGSTIJD)",
											"            {",
											"                tijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"                pm.expect(tijd.length).to.eq(2);",
											"            }",
											"        }",
											"    });",
											"",
											"    pm.test(\"DUUR gezet\", function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].LANDINGSTIJD)",
											"            {",
											"                tijd = jsonData.dataset[index].DUUR.split(':')",
											"                pm.expect(tijd.length).to.eq(2);",
											"            }",
											"        }",
											"    });",
											"",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0   ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "VliegtuigLogboek",
							"item": [
								{
									"name": "GetVliegtuigLogboek",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test('Heeft DATUM', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
													"});",
													"",
													"pm.test('Heeft VLUCHTEN', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('VLUCHTEN');",
													"});",
													"",
													"pm.test('Heeft LIERSTARTS', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('LIERSTARTS');",
													"});",
													"",
													"pm.test('Heeft SLEEPSTARTS', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('SLEEPSTARTS');",
													"});",
													"",
													"pm.test('Heeft VLIEGTIJD', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTIJD');",
													"});",
													"",
													"pm.test('Heeft REG_CALL', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
													"});",
													"",
													"",
													"pm.test(\"VLIEGTIJD hh:mm\", function () {",
													"",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].VLIEGTIJD)",
													"        {",
													"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
													"            pm.expect(tijd.length).to.eq(2);",
													"        }",
													"    }",
													"});",
													"",
													"// Data voor 304 test",
													"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegtuigLogboek?ID=200",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegtuigLogboek"
											],
											"query": [
												{
													"key": "ID",
													"value": "200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetVliegtuigLogboek HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getLogboek\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegtuigLogboek?ID=200&HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegtuigLogboek"
											],
											"query": [
												{
													"key": "ID",
													"value": "200"
												},
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetVliegtuigLogboek met DATUM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test('Heeft DATUM', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('DATUM');",
													"});",
													"",
													"pm.test('Heeft VLUCHTEN', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('VLUCHTEN');",
													"});",
													"",
													"pm.test('Heeft LIERSTARTS', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('LIERSTARTS');",
													"});",
													"",
													"pm.test('Heeft SLEEPSTARTS', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('SLEEPSTARTS');",
													"});",
													"",
													"pm.test('Heeft VLIEGTIJD', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('VLIEGTIJD');",
													"});",
													"",
													"pm.test('Heeft REG_CALL', function() {",
													"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
													"});",
													"",
													"",
													"pm.test(\"VLIEGTIJD hh:mm\", function () {",
													"",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        if (jsonData.dataset[index].VLIEGTIJD)",
													"        {",
													"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
													"            pm.expect(tijd.length).to.eq(2);",
													"        }",
													"    }",
													"});",
													"",
													"// Data voor 304 test",
													"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegtuigLogboek?ID=200&BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-02",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegtuigLogboek"
											],
											"query": [
												{
													"key": "ID",
													"value": "200"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-02"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetVliegtuigLogboek met DATUM HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getLogboek\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegtuigLogboek?ID=200&BEGIN_DATUM={{dit_jaar}}-05-01&EIND_DATUM={{dit_jaar}}-05-02&HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegtuigLogboek"
											],
											"query": [
												{
													"key": "ID",
													"value": "200"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-05-01"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{dit_jaar}}-05-02"
												},
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetVliegtuigLogboekTotalen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test('Heeft laatste_aanpassing', function() {",
													"  pm.expect(jsonData).to.have.property('laatste_aanpassing');",
													"});",
													"",
													"pm.test('Heeft dataset', function() {",
													"  pm.expect(jsonData).to.have.property('dataset');",
													"});",
													"",
													"pm.test('Heeft totalen', function() {",
													"  pm.expect(jsonData).to.have.property('totalen');",
													"});",
													"",
													"pm.test(\"12 maanden\", function () {    ",
													"    pm.expect(jsonData.dataset.length).to.eql(12);",
													"});",
													"",
													"pm.test(\"Alle maanden\", function () { ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(parseInt(jsonData.dataset[index].MAAND)).to.eq(index+1);",
													"    }",
													"});",
													"",
													"pm.test(\"VLUCHTEN = LIERSTARTS + SLEEPSTARTS\", function () { ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(parseInt(jsonData.dataset[index].VLUCHTEN)).to.eq(parseInt(jsonData.dataset[index].LIERSTARTS) + parseInt(jsonData.dataset[index].SLEEPSTARTS));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetVliegtuigLogboekTotalen?ID=200",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetVliegtuigLogboekTotalen"
											],
											"query": [
												{
													"key": "ID",
													"value": "200"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Recency",
							"item": [
								{
									"name": "GetRecency 10858",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetRecency?VLIEGER_ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetRecency"
											],
											"query": [
												{
													"key": "VLIEGER_ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"let url = pm.variables.get(\"url\");",
											"let lid_id = pm.request.url.query.get(\"VLIEGER_ID\");",
											"let dit_jaar = pm.variables.get(\"dit_jaar\");",
											"let vorig_jaar = dit_jaar -1;",
											"",
											"pm.test('Heeft STARTS_DRIE_MND', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_DRIE_MND');",
											"});",
											"",
											"pm.test('Heeft STARTS_VORIG_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_VORIG_JAAR');",
											"});",
											"",
											"pm.test('Heeft STARTS_DIT_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_DIT_JAAR');",
											"});",
											"",
											"pm.test('Heeft UREN_DRIE_MND', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_DRIE_MND');",
											"});",
											"",
											"pm.test('Heeft UREN_DIT_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_DIT_JAAR');",
											"});",
											"",
											"pm.test('Heeft UREN_VORIG_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_VORIG_JAAR');",
											"});",
											"",
											"pm.test('Heeft STATUS_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('STATUS_BAROMETER');",
											"});",
											"",
											"pm.test('Heeft STARTS_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_BAROMETER');",
											"});",
											"",
											"pm.test('Heeft UREN_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_BAROMETER');",
											"});",
											"",
											"let vandaag = new Date().toISOString().slice(0, 10)",
											"",
											"pm.sendRequest({",
											"    url: url + \"/GetObjects?LID_ID=\" + lid_id + \"&BEGIN_DATUM=\" + vorig_jaar + \"-01-01\" + \"&EIND_DATUM=\" + vandaag,",
											"    method: 'GET'},",
											"    function (err, res) {",
											"        let response = res.json();",
											"",
											"        let starts_dit_jaar = 0;",
											"        let starts_vorig_jaar = 0;",
											"        let starts_3_mnd = 0;",
											"        let starts_barometer = 0;",
											"",
											"        let uren_dit_jaar = 0;",
											"        let uren_vorig_jaar = 0;",
											"        let uren_3_mnd = 0;",
											"        let uren_barometer = 0;",
											"",
											"        for (index = 0; index < response.dataset.length; ++index) ",
											"        {",
											"            if (response.dataset[index].VLIEGER_ID == lid_id)",
											"            {",
											"                if ((response.dataset[index].STARTTIJD) && (response.dataset[index].LANDINGSTIJD))  ",
											"                {",
											"                    if (response.dataset[index].DATUM.includes(vorig_jaar))",
											"                    {",
											"                        starts_vorig_jaar++;",
											"                        uren_vorig_jaar += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_vorig_jaar += response.dataset[index].DUUR.split(':')[1] * 1;",
											"",
											"                    }",
											"                    if (response.dataset[index].DATUM.includes(dit_jaar))",
											"                    {",
											"                        starts_dit_jaar++;",
											"                        uren_dit_jaar += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_dit_jaar += response.dataset[index].DUUR.split(':')[1] * 1;",
											"                    }               ",
											"",
											"                    const nu = new Date();",
											"                    const startDatum = Date.parse(response.dataset[index].DATUM);",
											"",
											"                    const diffTime = Math.abs(nu - startDatum);",
											"                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));     ",
											"",
											"                    if (diffDays <= (13*7))",
											"                    {",
											"                        starts_3_mnd++;",
											"                        uren_3_mnd += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_3_mnd += response.dataset[index].DUUR.split(':')[1] * 1;                        ",
											"                    }",
											"",
											"                    if (diffDays <= 365)",
											"                    {",
											"                        starts_barometer++;",
											"                        uren_barometer += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_barometer += response.dataset[index].DUUR.split(':')[1] * 1;                        ",
											"                    }",
											"                }",
											"            }",
											"        } ",
											"        uren_dit_jaar = Math.floor(uren_dit_jaar / 60) + \":\" + (uren_dit_jaar % 60).toString().padStart(2, \"0\");",
											"        uren_vorig_jaar = Math.floor(uren_vorig_jaar / 60) + \":\" + (uren_vorig_jaar % 60).toString().padStart(2, \"0\");",
											"        uren_3_mnd = Math.floor(uren_3_mnd / 60) + \":\" + (uren_3_mnd % 60).toString().padStart(2, \"0\");",
											"        uren_barometer = Math.floor(uren_barometer / 60) + \":\" + (uren_barometer % 60).toString().padStart(2, \"0\");",
											"",
											"        pm.test(\"STARTS_DRIE_MND \" + starts_3_mnd + \" == \" + jsonData.STARTS_DRIE_MND, function () {",
											"            pm.expect(jsonData.STARTS_DRIE_MND).to.eql(starts_3_mnd); ",
											"        });",
											"        pm.test(\"UREN_DRIE_MND \" + uren_3_mnd + \" == \" + jsonData.UREN_DRIE_MND, function () {",
											"            pm.expect(jsonData.UREN_DRIE_MND).to.eql(uren_3_mnd); ",
											"        });",
											"",
											"        pm.test(\"STARTS_VORIG_JAAR \" + starts_vorig_jaar + \" == \" + jsonData.STARTS_VORIG_JAAR, function () {",
											"            pm.expect(jsonData.STARTS_VORIG_JAAR).to.eql(starts_vorig_jaar); ",
											"        });",
											"        pm.test(\"UREN_VORIG_JAAR \" + uren_vorig_jaar+ \" == \" + jsonData.UREN_VORIG_JAAR, function () {",
											"            pm.expect(jsonData.UREN_VORIG_JAAR).to.eql(uren_vorig_jaar); ",
											"        });",
											"",
											"        pm.test(\"STARTS_DIT_JAAR \" + starts_dit_jaar + \" == \" + jsonData.STARTS_DIT_JAAR, function () {",
											"            pm.expect(jsonData.STARTS_DIT_JAAR).to.eql(starts_dit_jaar); ",
											"        });",
											"        pm.test(\"UREN_DIT_JAAR \" + uren_dit_jaar+ \" == \" + jsonData.UREN_DIT_JAAR, function () {",
											"            pm.expect(jsonData.UREN_DIT_JAAR).to.eql(uren_dit_jaar); ",
											"        });",
											"",
											"        pm.test(\"STARTS_BAROMETER \" + starts_barometer + \" == \" + jsonData.STARTS_BAROMETER, function () {",
											"            pm.expect(jsonData.STARTS_BAROMETER).to.eql(starts_barometer); ",
											"        });",
											"        pm.test(\"UREN_BAROMETER \" + uren_barometer+ \" == \" + jsonData.UREN_BAROMETER, function () {",
											"            pm.expect(jsonData.UREN_BAROMETER).to.eql(uren_barometer); ",
											"        });        ",
											"    });",
											"  "
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft REG_CALL', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('REG_CALL');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" REG_CALL\", function () {",
											"        pm.expect(jsonData.dataset[index].REG_CALL).to.eq(savedData.dataset[index].REG_CALL);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID,REG_CALL",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID,REG_CALL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLogboek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"",
											"pm.test(\"STARTTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].VLIEGTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"LANDINGSTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"DUUR gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].DUUR.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index: \" + index + \"  DUUR berekening \" + jsonData.dataset[index].STARTTIJD + \"|\" + jsonData.dataset[index].LANDINGSTIJD + \"|\" + jsonData.dataset[index].DUUR, function () {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            var stijd = jsonData.dataset[index].STARTTIJD.split(':')",
											"            var start = stijd[0]*60 + stijd[1]*1;",
											"",
											"            var ltijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            var landing = ltijd[0]*60 + ltijd[1]*1;",
											"",
											"            var tijd = jsonData.dataset[index].DUUR.split(':')",
											"            var duur = tijd[0]*60 + tijd[1]*1;",
											"",
											"            pm.expect(landing - start).to.eq(duur);",
											"        }",
											"    });",
											"}",
											"",
											"// Data voor 304 test",
											"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
											"console.log(\"HASH=\" + jsonData.hash);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLogboek HTTP status==304",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getLogboek\"));",
											"pm.variables.set('hash', savedData.hash);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858&HASH={{hash}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										},
										{
											"key": "HASH",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLogboek JAAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"",
											"pm.test(\"STARTTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].VLIEGTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"LANDINGSTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"DUUR gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].DUUR.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index: \" + index + \"  DUUR berekening \" + jsonData.dataset[index].STARTTIJD + \"|\" + jsonData.dataset[index].LANDINGSTIJD + \"|\" + jsonData.dataset[index].DUUR, function () {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            var stijd = jsonData.dataset[index].STARTTIJD.split(':')",
											"            var start = stijd[0]*60 + stijd[1]*1;",
											"",
											"            var ltijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            var landing = ltijd[0]*60 + ltijd[1]*1;",
											"",
											"            var tijd = jsonData.dataset[index].DUUR.split(':')",
											"            var duur = tijd[0]*60 + tijd[1]*1;",
											"",
											"            pm.expect(landing - start).to.eq(duur);",
											"        }",
											"    });",
											"}",
											"",
											"// Data voor 304 test",
											"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
											"console.log(\"HASH=\" + jsonData.hash);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858&JAAR={{dit_jaar}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										},
										{
											"key": "JAAR",
											"value": "{{dit_jaar}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLogboek met BEGIN_DATUM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"",
											"pm.test(\"STARTTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].VLIEGTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"LANDINGSTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"DUUR gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].DUUR.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index: \" + index + \"  DUUR berekening \" + jsonData.dataset[index].STARTTIJD + \"|\" + jsonData.dataset[index].LANDINGSTIJD + \"|\" + jsonData.dataset[index].DUUR, function () {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            var stijd = jsonData.dataset[index].STARTTIJD.split(':')",
											"            var start = stijd[0]*60 + stijd[1]*1;",
											"",
											"            var ltijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            var landing = ltijd[0]*60 + ltijd[1]*1;",
											"",
											"            var tijd = jsonData.dataset[index].DUUR.split(':')",
											"            var duur = tijd[0]*60 + tijd[1]*1;",
											"",
											"            pm.expect(landing - start).to.eq(duur);",
											"        }",
											"    });",
											"}",
											"",
											"// Data voor 304 test",
											"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
											"console.log(\"HASH=\" + jsonData.hash);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858&JAAR={{dit_jaar}}&EIND_DATUM={{dit_jaar}}-05-04",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										},
										{
											"key": "JAAR",
											"value": "{{dit_jaar}}"
										},
										{
											"key": "EIND_DATUM",
											"value": "{{dit_jaar}}-05-04"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLogboek met EIND_DATUM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"",
											"pm.test(\"STARTTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].VLIEGTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].VLIEGTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"LANDINGSTIJD gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"pm.test(\"DUUR gezet\", function () {",
											"",
											"    for (index = 0; index < jsonData.dataset.length; ++index) ",
											"    {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            tijd = jsonData.dataset[index].DUUR.split(':')",
											"            pm.expect(tijd.length).to.eq(2);",
											"        }",
											"    }",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index: \" + index + \"  DUUR berekening \" + jsonData.dataset[index].STARTTIJD + \"|\" + jsonData.dataset[index].LANDINGSTIJD + \"|\" + jsonData.dataset[index].DUUR, function () {",
											"        if (jsonData.dataset[index].LANDINGSTIJD)",
											"        {",
											"            var stijd = jsonData.dataset[index].STARTTIJD.split(':')",
											"            var start = stijd[0]*60 + stijd[1]*1;",
											"",
											"            var ltijd = jsonData.dataset[index].LANDINGSTIJD.split(':')",
											"            var landing = ltijd[0]*60 + ltijd[1]*1;",
											"",
											"            var tijd = jsonData.dataset[index].DUUR.split(':')",
											"            var duur = tijd[0]*60 + tijd[1]*1;",
											"",
											"            pm.expect(landing - start).to.eq(duur);",
											"        }",
											"    });",
											"}",
											"",
											"// Data voor 304 test",
											"pm.variables.set(\"getLogboek\", JSON.stringify(jsonData));",
											"console.log(\"HASH=\" + jsonData.hash);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetLogboek?LID_ID=10858&BEGIN_DATUM={{dit_jaar}}-05-02&EIND_DATUM={{dit_jaar}}-05-06",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetLogboek"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10858"
										},
										{
											"key": "BEGIN_DATUM",
											"value": "{{dit_jaar}}-05-02"
										},
										{
											"key": "EIND_DATUM",
											"value": "{{dit_jaar}}-05-06"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Startlijst\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Tracks",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=5",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lid_id = parseInt(pm.request.url.query.get(\"LID_ID\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"LID_ID == \" + lid_id, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LID_ID).to.eql(lid_id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=10001",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "10001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects INSTRUCTEUR_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lid_id = parseInt(pm.request.url.query.get(\"INSTRUCTEUR_ID\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"INSTRUCTEUR_ID == \" + lid_id, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].INSTRUCTEUR_ID).to.eql(lid_id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEUR_ID=10470",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEUR_ID",
													"value": "10470"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft LID_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"    });",
											"",
											"    pm.test('Heeft INSTRUCTEUR_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_ID');",
											"    });",
											"",
											"    pm.test('Heeft TEKST', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('TEKST');",
											"    });",
											"",
											"    pm.test('Heeft START_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('START_ID');",
											"    });",
											"",
											"    pm.test('Heeft INGEVOERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"    });",
											"",
											"    pm.test('Heeft INGEVOERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"    });",
											"",
											"    pm.test('Heeft LINK_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LINK_ID');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test('Heeft LID_NAAM', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LID_NAAM');",
											"    });",
											"",
											"    pm.test('Heeft INSTRUCTEUR_NAAM', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_NAAM');",
											"    });",
											"",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0    ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft TEKST', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('TEKST');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" TEKST\", function () {",
											"        pm.expect(jsonData.dataset[index].TEKST).to.eq(savedData.dataset[index].TEKST);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, TEKST",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, TEKST"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Tracks\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Progressie",
					"item": [
						{
							"name": "Alle velden",
							"item": [
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"// Data voor GetObjects MAX & VELDEN",
													"pm.variables.set(\"getObjects\", JSON.stringify(jsonData));",
													"console.log(\"HASH=\" + jsonData.hash);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HTTP status==304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"pm.variables.set('hash', savedData.hash);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?HASH={{hash}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "HASH",
													"value": "{{hash}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"Aantal records == 1\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(aantal).to.eql(1);",
													"});",
													"",
													"pm.test(\"ID == request\", function () {",
													"    let id = parseInt(pm.request.url.query.get(\"ID\"));",
													"    ",
													"    pm.expect(jsonData.dataset[0].ID).to.eql(id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ID=10",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ID",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == ASC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.gt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects  Sorteer op ID DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"SORT == DESC\", function () {",
													"    let vorigID = null;",
													"    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        var ID = parseInt(jsonData.dataset[index].ID);   ",
													"",
													"        if (vorigID != null)",
													"        {",
													"            pm.expect(ID).to.lt(vorigID);",
													"            vorigID = ID;",
													"        }",
													"    }    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SORT=ID DESC",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SORT",
													"value": "ID DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Aantal records == 2\", function () {",
													"    pm.expect(jsonData.dataset.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Totaal == orgineel\", function () {",
													"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
													"});",
													"",
													"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
													"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
													"});",
													"",
													"for (index = 0; index < jsonData.dataset.length; ++index) {",
													"    var obj1 = JSON.stringify(jsonData.dataset[index]);",
													"    var obj2 = JSON.stringify(savedData.dataset[index]);",
													"",
													"    pm.test(\"index:\" + index + \" obj1 == obj2\", function () {",
													"        pm.expect(obj1).to.eq(obj2);",
													"    });",
													"}    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID 10063",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let lid_id = parseInt(pm.request.url.query.get(\"LID_ID\"));",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"LID_ID == \" + lid_id, function () {    ",
													"    for (index = 0; index < jsonData.dataset.length; ++index) ",
													"    {",
													"        pm.expect(jsonData.dataset[index].LID_ID).to.eql(lid_id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=10063",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "10063"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(pm.response.code !== 304)",
											"{",
											"    let jsonData = \"\";",
											"    if (pm.response.responseSize > 0)",
											"    {",
											"        jsonData = pm.response.json();",
											"    }",
											"",
											"    pm.test('Heeft ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"    });",
											"",
											"    pm.test('Heeft LID_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LID_ID');",
											"    });",
											"",
											"    pm.test('Heeft INSTRUCTEUR_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_ID');",
											"    });",
											"",
											"    pm.test('Heeft COMPETENTIE_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('COMPETENTIE_ID');",
											"    });",
											"",
											"    pm.test('Heeft OPMERKINGEN', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('OPMERKINGEN');",
											"    });",
											"",
											"    pm.test('Heeft INGEVOERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INGEVOERD');",
											"    });",
											"",
											"    pm.test('Heeft LINK_ID', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LINK_ID');",
											"    });",
											"",
											"    pm.test('Heeft VERWIJDERD', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('VERWIJDERD');",
											"    });",
											"",
											"    pm.test('Heeft LAATSTE_AANPASSING', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LAATSTE_AANPASSING');",
											"    });",
											"",
											"    pm.test(\"VERWIJDERD == false\", function () {",
											"        var verwijderd = 0;",
											"        ",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            verwijderd += (jsonData.dataset[index].VERWIJDERD) ? 1 : 0     ",
											"        }",
											"        pm.expect(verwijderd).to.eql(0);",
											"        ",
											"    });",
											"",
											"    pm.test('Heeft LEERFASE', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LEERFASE');",
											"    });",
											"",
											"    pm.test('Heeft COMPETENTIE', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('COMPETENTIE');",
											"    });",
											"",
											"    pm.test('Heeft LID_NAAM', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('LID_NAAM');",
											"    });",
											"",
											"    pm.test('Heeft INSTRUCTEUR_NAAM', function() {",
											"        pm.expect(jsonData.dataset[0]).to.have.property('INSTRUCTEUR_NAAM');",
											"    });",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "GetObjects VELDEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let savedData = JSON.parse(pm.variables.get(\"getObjects\"));",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Aantal velden == 2\", function () {",
											"    let velden = Object.keys(jsonData.dataset[0]).length;",
											"    pm.expect(velden).to.eql(2);",
											"});",
											"",
											"pm.test(\"Totaal == orgineel\", function () {",
											"    pm.expect(jsonData.totaal).to.eql(savedData.totaal);",
											"});",
											"",
											"pm.test(\"LaatsteAanpassing == orgineel\", function () {",
											"    pm.expect(jsonData.laatste_aanpassing).to.eql(savedData.laatste_aanpassing);",
											"});",
											"",
											"pm.test('Heeft ID', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('ID');",
											"});",
											"",
											"pm.test('Heeft LID_NAAM', function() {",
											"  pm.expect(jsonData.dataset[0]).to.have.property('LID_NAAM');",
											"});",
											"",
											"for (index = 0; index < jsonData.dataset.length; ++index) ",
											"{",
											"    pm.test(\"index:\" + index + \" ID\", function () {",
											"        pm.expect(jsonData.dataset[index].ID).to.eq(savedData.dataset[index].ID);",
											"    });",
											"",
											"    pm.test(\"index:\" + index + \" LID_NAAM\", function () {",
											"        pm.expect(jsonData.dataset[index].LID_NAAM).to.eq(savedData.dataset[index].LID_NAAM);",
											"    });    ",
											"}    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, LID_NAAM",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "MAX",
											"value": "2"
										},
										{
											"key": "VELDEN",
											"value": "ID, LID_NAAM"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ProgressieKaart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "LID_ID",
										"value": "10395",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/ProgressieKaart?LID_ID=10395",
									"host": [
										"{{url}}"
									],
									"path": [
										"ProgressieKaart"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10395"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ProgressieBoom",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "LID_ID",
										"type": "text",
										"value": "10395"
									}
								],
								"url": {
									"raw": "{{url}}/ProgressieBoom?LID_ID=10395",
									"host": [
										"{{url}}"
									],
									"path": [
										"ProgressieBoom"
									],
									"query": [
										{
											"key": "LID_ID",
											"value": "10395"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Progressie\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (pm.info.requestName.includes(\"HTTP status==304\"))",
							"{",
							"    pm.test(\"Status code is 304\", function () {",
							"        pm.response.to.have.status(304);",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    if ((!pm.info.requestName.includes(\"PotentieelVliegers\"))   && ",
							"        (!pm.info.requestName.includes(\"ProgressieBoom\"))       &&",
							"        (!pm.info.requestName.includes(\"Recency\")))",
							"    {",
							"        let jsonData = pm.response.json();",
							"",
							"        pm.test('Heeft totaal', function() {",
							"            pm.expect(jsonData).to.have.property('totaal');",
							"        });",
							"",
							"        pm.test(\"Totaal isInt\", function() {",
							"            pm.expect(typeof jsonData.totaal).to.eql(\"number\");",
							"        });",
							"",
							"        pm.test('Heeft laatste aanpassing', function() {",
							"            pm.expect(jsonData).to.have.property('laatste_aanpassing');",
							"        });",
							"",
							"        pm.test('Heeft hash', function() {",
							"            pm.expect(jsonData).to.have.property('hash');",
							"        });",
							"",
							"        pm.test('Heeft dataset', function() {",
							"            pm.expect(jsonData).to.have.property('dataset');",
							"        });",
							"    }",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Aanpassen data",
			"item": [
				{
					"name": "Types",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  GROEP: 1,",
											"  CODE: \"CODE\",",
											"  EXT_REF: \"EXT_REF\",",
											"  OMSCHRIJVING: \"OMSCHRIJVING\",",
											"  SORTEER_VOLGORDE: 99,",
											"  READ_ONLY: false",
											"};",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  GROEP: 1000,",
											"  CODE: \"EDOC\",",
											"  EXT_REF: \"abcdefs\",",
											"  OMSCHRIJVING: \"GNIVJIRHCSMO\",",
											"  SORTEER_VOLGORDE: 2,",
											"  READ_ONLY: true",
											"};",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  GROEP: 1000,",
											"  CODE: null,",
											"  EXT_REF: null,",
											"  OMSCHRIJVING: \"GNIVJI\",",
											"  SORTEER_VOLGORDE: null,",
											"  READ_ONLY: false",
											"};",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Types\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft GROEP', function() {",
									"                pm.expect(jsonData).to.have.property('GROEP');",
									"            });",
									"",
									"            pm.test('Heeft CODE', function() {",
									"                pm.expect(jsonData).to.have.property('CODE');",
									"            });",
									"",
									"            pm.test('Heeft EXT_REF', function() {",
									"                pm.expect(jsonData).to.have.property('EXT_REF');",
									"            });",
									"",
									"            pm.test('Heeft OMSCHRIJVING', function() {",
									"                pm.expect(jsonData).to.have.property('OMSCHRIJVING');",
									"            });",
									"",
									"            pm.test('Heeft SORTEER_VOLGORDE', function() {",
									"                pm.expect(jsonData).to.have.property('SORTEER_VOLGORDE');",
									"            });",
									"",
									"            pm.test('Heeft READ_ONLY', function() {",
									"                pm.expect(jsonData).to.have.property('READ_ONLY');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Competenties",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    LEERFASE_ID: \"1001\",",
											"    BLOK: \"900.00\",",
											"    ONDERWERP: \"ONDERWERP\",",
											"    DOCUMENTATIE: \"DOCUMENTATIE\"",
											"}",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record =",
											"{",
											"    LEERFASE_ID: \"1002\",",
											"    BLOK: \"-1.-11\",",
											"    VOLGORDE: \"22\",",
											"    DOCUMENTATIE: \"beschrijving\",",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record =",
											"{",
											"    BLOK: null,",
											"    VOLGORDE: null,",
											"    DOCUMENTATIE: null,",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Competenties\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft LEERFASE_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LEERFASE_ID');",
									"            });",
									"",
									"            pm.test('Heeft ONDERWERP', function() {",
									"                pm.expect(jsonData).to.have.property('ONDERWERP');",
									"            });",
									"",
									"            pm.test('Heeft DOCUMENTATIE', function() {",
									"                pm.expect(jsonData).to.have.property('DOCUMENTATIE');",
									"            });",
									"",
									"            pm.test('Heeft BLOK', function() {",
									"                pm.expect(jsonData).to.have.property('BLOK');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Daginfo",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    VELD_ID: \"901\",",
											"    BAAN_ID: \"109\",",
											"    BEDRIJF_ID: \"1550\",",
											"    DDWV: false,",
											"    CLUB_BEDRIJF: true",
											"};",
											"",
											"record.DATUM = pm.variables.get('test_datum');",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"let record = {",
											"    VELD_ID: 902,",
											"    BAAN_ID: 107,",
											"    BEDRIJF_ID: 1553,",
											"    STARTMETHODE_ID: 610,",
											"    OPMERKINGEN: \"Zomerkamp dag 8\",  ",
											"    VLIEGBEDRIJF: \"Het vliegbedrijf bevatte de volgende aspect(en), lier, sleep en zelfstart op de 22R met een rechterhand circuit. Halverwege de dag omgesteld naar 27C\",",
											"    METEO: \"Het zicht was > 10 km. De windrichting was 270 met  windkracht 3.4 - 5.42 m/s. Er was 2/8 bewolking. De wolkenbasis was 800 meter hoog.\",       ",
											"    DIENSTEN: \"Jan, Maartje, Mohammed aanwezig. Klaas had zich verslapen en kwam om 11:00\",  ",
											"    VERSLAG: \"Rustige dag met een klein ploegje mensen ondanks het prachtige weer. Omstellen ging zonder problemen, vliegende kisten konden blijven hangen\",",
											"    ROLLENDMATERIEEL:\"De motor van de lier wordt warm\",",
											"    VLIEGENDMATERIEEL: \"De E11 is in de werkplaats gezet ivm lekke band. Wordt maandag opgelost\"",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"let record = {",
											"    VELD_ID: null,",
											"    BAAN_ID: null,",
											"    BEDRIJF_ID: null,",
											"    STARTMETHODE_ID: null,",
											"    OPMERKINGEN: null,",
											"    VLIEGBEDRIJF: null,",
											"    METEO: null,       ",
											"    DIENSTEN: null,",
											"    VERSLAG: null,",
											"    ROLLENDMATERIEEL: null,",
											"    VLIEGENDMATERIEEL: null",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);",
											"",
											"postman.setGlobalVariable(\"regexFunction\", () => {",
											"    let regex = /<td>[0-9]{8}<.td>/g;",
											"    let regexMatch = bodyResponse.match(regex);",
											"    return match[0];",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject by DATUM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?DATUM={{test_datum}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "DATUM",
											"value": "{{test_datum}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Daginfo\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft DATUM', function() {",
									"                pm.expect(jsonData).to.have.property('DATUM');",
									"            });",
									"",
									"            pm.test('Heeft BAAN_ID', function() {",
									"                pm.expect(jsonData).to.have.property('BAAN_ID');",
									"            });",
									"",
									"            pm.test('Heeft BEDRIJF_ID', function() {",
									"                pm.expect(jsonData).to.have.property('BEDRIJF_ID');",
									"            });",
									"",
									"            pm.test('Heeft DDWV', function() {",
									"                pm.expect(jsonData).to.have.property('DDWV');",
									"            });",
									"",
									"            pm.test('Heeft CLUB_BEDRIJF', function() {",
									"                pm.expect(jsonData).to.have.property('CLUB_BEDRIJF');",
									"            });",
									"",
									"            pm.test('Heeft VLIEGBEDRIJF', function() {",
									"                pm.expect(jsonData).to.have.property('VLIEGBEDRIJF');",
									"            });",
									"",
									"            pm.test('Heeft METEO', function() {",
									"                pm.expect(jsonData).to.have.property('METEO');",
									"            });",
									"",
									"            pm.test('Heeft DIENSTEN', function() {",
									"                pm.expect(jsonData).to.have.property('DIENSTEN');",
									"            });",
									"",
									"            pm.test('Heeft VERSLAG', function() {",
									"                pm.expect(jsonData).to.have.property('VERSLAG');",
									"            });",
									"",
									"            pm.test('Heeft ROLLENDMATERIEEL', function() {",
									"                pm.expect(jsonData).to.have.property('ROLLENDMATERIEEL');",
									"            });",
									"",
									"            pm.test('Heeft VLIEGENDMATERIEEL', function() {",
									"                pm.expect(jsonData).to.have.property('VLIEGENDMATERIEEL');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Vliegtuigen",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  REGISTRATIE: \"ZZ-ZZ\",",
											"  CALLSIGN: \"ZZ\",",
											"  FLARMCODE: \"AB12CD\",",
											"  ZITPLAATSEN: 2,",
											"  CLUBKIST: true,",
											"  TYPE_ID: 402,",
											"  VOLGORDE: 99",
											"};",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  REGISTRATIE: \"AA-AA\",",
											"  CALLSIGN: \"AA\",",
											"  FLARMCODE: \"A11111\",",
											"  ZITPLAATSEN: 1,",
											"  TMG: true,",
											"  ZELFSTART: true,",
											"  SLEEPKIST: true,    ",
											"  CLUBKIST: false,",
											"  VOLGORDE: 1",
											"};",
											"",
											"let rnd = Math.floor(Math.random() * 9999);",
											"record.REGISTRATIE = \"AA-\" + rnd.toString(),",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"  CALLSIGN: null,",
											"  FLARMCODE: null,",
											"  ZITPLAATSEN: 2,",
											"  VOLGORDE: null,",
											"  TYPE_ID: null,",
											"};",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Vliegtuigen\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft REGISTRATIE', function() {",
									"                pm.expect(jsonData).to.have.property('REGISTRATIE');",
									"            });",
									"",
									"            pm.test('Heeft CALLSIGN', function() {",
									"                pm.expect(jsonData).to.have.property('CALLSIGN');",
									"            });",
									"",
									"            pm.test('Heeft FLARMCODE', function() {",
									"                pm.expect(jsonData).to.have.property('FLARMCODE');",
									"            });",
									"",
									"            pm.test('Heeft ZITPLAATSEN', function() {",
									"                pm.expect(jsonData).to.have.property('ZITPLAATSEN');",
									"            });",
									"",
									"            pm.test('Heeft ZELFSTART', function() {",
									"                pm.expect(jsonData).to.have.property('ZELFSTART');",
									"            });",
									"",
									"            pm.test('Heeft CLUBKIST', function() {",
									"                pm.expect(jsonData).to.have.property('CLUBKIST');",
									"            });",
									"",
									"            pm.test('Heeft TMG', function() {",
									"                pm.expect(jsonData).to.have.property('TMG');",
									"            });",
									"",
									"            pm.test('Heeft SLEEPKIST', function() {",
									"                pm.expect(jsonData).to.have.property('SLEEPKIST');",
									"            });",
									"",
									"            pm.test('Heeft TYPE_ID', function() {",
									"                pm.expect(jsonData).to.have.property('TYPE_ID');",
									"            });",
									"",
									"            pm.test('Heeft VOLGORDE', function() {",
									"                pm.expect(jsonData).to.have.property('VOLGORDE');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									""
								]
							}
						}
					]
				},
				{
					"name": "Leden",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    NAAM: \"Jodokus de Marmot\",",
											"    VOORNAAM: \"Jodokus\",",
											"    TUSSENVOEGSEL: \"de\",",
											"    ACHTERNAAM: \"Marmot\",",
											"    ADRES: \"Onder de steen 12\",",
											"    POSTCODE: \"1988 AK\",",
											"    WOONPLAATS: \"Berg en bos\",",
											"    TELEFOON: \"0227-877555\",",
											"    MOBIEL: \"06-5223311\",",
											"    NOODNUMMER: \"112\",",
											"    EMAIL: \"Jodokus@fabeltje.nl\",",
											"    LIDTYPE_ID: 601,",
											"    ZUSTERCLUB_ID: 2,",
											"    LIERIST: true,",
											"    STARTLEIDER: false,",
											"    INSTRUCTEUR: true,",
											"    CIMT: false,",
											"    DDWV_CREW: true,",
											"    DDWV_BEHEERDER: false,",
											"    BEHEERDER: false,",
											"    STARTTOREN: false,",
											"    ROOSTER: false,",
											"    CLUBBLAD_POST: true,",
											"    MEDICAL: \"2078-02-24\",",
											"    GEBOORTE_DATUM: \"1952-03-16\",",
											"    WACHTWOORD: \"zeg ik niet\",",
											"    AUTH: false,",
											"    HEEFT_BETAALD: true,",
											"    PRIVACY: true,",
											"    BEPERKINGEN: \"hoezo, ik beperkt? nee toch!\",",
											"    OPMERKINGEN: \"vlieg alleen bij voldoende termiek\",",
											"};",
											"",
											"let d = new Date();",
											"record.LIDNR = d.getTime()  % 100000;",
											"record.INLOGNAAM = Math.random().toString(36).substr(2, 9);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    NAAM: \"Chico Lama\",",
											"    VOORNAAM: \"Chico\",",
											"    ACHTERNAAM: \"Lama\",",
											"    TUSSENVOEGSEL: null,",
											"    ADRES: \"Weiland 12a\",",
											"    POSTCODE: \"3481 BV\",",
											"    WOONPLAATS: \"Achterveld\",",
											"    TELEFOON: \"0723-346522\",",
											"    MOBIEL: \"06-5123322\",",
											"    NOODNUMMER: \"113\",",
											"    EMAIL: \"lama@fabeltje.nl\",",
											"    LIDTYPE_ID: 603,",
											"    ZUSTERCLUB_ID: 10408,",
											"    LIERIST: false,",
											"    STARTLEIDER: true,",
											"    INSTRUCTEUR: false,",
											"    CIMT: true,",
											"    DDWV_CREW: false,",
											"    DDWV_BEHEERDER: true,",
											"    BEHEERDER: true,",
											"    STARTTOREN: true,",
											"    ROOSTER: true,",
											"    CLUBBLAD_POST: false,",
											"    MEDICAL: \"2054-01-31\",",
											"    GEBOORTE_DATUM: \"1978-01-02\",",
											"    WACHTWOORD: \"Waarom&*^$\",",
											"    AUTH: true,",
											"    HEEFT_BETAALD: false,",
											"    PRIVACY: false,",
											"    BEPERKINGEN: \"Ik spug als ik boos ben\",",
											"    OPMERKINGEN: \"Kort lontje\",",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"let rnd = Math.floor(Math.random() * 999999);",
											"record.LIDNR = rnd.toString();",
											"record.INLOGNAAM = \"clama\" + rnd.toString();",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    VOORNAAM: null,",
											"    TUSSENVOEGSEL: null,",
											"    ADRES: null,",
											"    POSTCODE: null,",
											"    WOONPLAATS: null,",
											"    TELEFOON: null,",
											"    MOBIEL: null,",
											"    NOODNUMMER: null,",
											"    EMAIL: null,",
											"    LIDNR: null,",
											"    ZUSTERCLUB_ID: null,",
											"    MEDICAL: null,",
											"    GEBOORTE_DATUM: null,",
											"    INLOGNAAM: null,",
											"    WACHTWOORD: null,",
											"    BEPERKINGEN: null,",
											"    OPMERKINGEN: null,",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[1].ID;        // geen 0 omdat we anders de gebruiker beheerder weggooien",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record geen NAAM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = {",
											"//  NAAM\": \"Jodokus de Marmot\",",
											"  VOORNAAM: \"Jodokus\",",
											"  ACHTERNAAM: \"Marmot\",",
											"  LIDNR: \"110011\",",
											"  LIDTYPE_ID: 601,",
											"  EMAIL: \"Jodokus@fabeltje.nl\",",
											"  MOBIEL: \"06-5223311\",",
											"  NOODNUMMER: \"112\"",
											"};",
											"let d = new Date();",
											"record.LIDNR = d.getTime()  % 100000;",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let request_body = pm.variables.get(\"request_body\");",
											"",
											"pm.test(\"VOORNAAM ACHTERNAAM == NAAM\", function () {",
											"    let naam = jsonData.VOORNAAM + \" \" + jsonData.ACHTERNAAM;",
											"    ",
											"    pm.expect(jsonData.NAAM).to.eql(naam);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{url}}/SaveObject",
									"host": [
										"{{url}}"
									],
									"path": [
										"SaveObject"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Leden\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft NAAM', function() {",
									"                pm.expect(jsonData).to.have.property('NAAM');",
									"            });",
									"",
									"            pm.test('Heeft VOORNAAM', function() {",
									"                pm.expect(jsonData).to.have.property('VOORNAAM');",
									"            });",
									"",
									"            pm.test('Heeft ACHTERNAAM', function() {",
									"                pm.expect(jsonData).to.have.property('ACHTERNAAM');",
									"            });",
									"",
									"            pm.test('Heeft TELEFOON', function() {",
									"                pm.expect(jsonData).to.have.property('TELEFOON');",
									"            });",
									"",
									"            pm.test('Heeft MOBIEL', function() {",
									"                pm.expect(jsonData).to.have.property('MOBIEL');",
									"            });",
									"",
									"            pm.test('Heeft NOODNUMMER', function() {",
									"                pm.expect(jsonData).to.have.property('NOODNUMMER');",
									"            });",
									"",
									"            pm.test('Heeft EMAIL', function() {",
									"                pm.expect(jsonData).to.have.property('EMAIL');",
									"            });",
									"",
									"            pm.test('Heeft LIDNR', function() {",
									"                pm.expect(jsonData).to.have.property('LIDNR');",
									"            });",
									"",
									"            pm.test('Heeft LIDTYPE_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LIDTYPE_ID');",
									"            });",
									"",
									"            pm.test('Heeft LIERIST', function() {",
									"                pm.expect(jsonData).to.have.property('LIERIST');",
									"            });",
									"",
									"            pm.test('Heeft STARTLEIDER', function() {",
									"                pm.expect(jsonData).to.have.property('STARTLEIDER');",
									"            });",
									"",
									"            pm.test('Heeft INSTRUCTEUR', function() {",
									"                pm.expect(jsonData).to.have.property('INSTRUCTEUR');",
									"            });",
									"",
									"            pm.test('Heeft INLOGNAAM', function() {",
									"                pm.expect(jsonData).to.have.property('INLOGNAAM');",
									"            });",
									"",
									"            pm.test('Heeft WACHTWOORD', function() {",
									"                pm.expect(jsonData).to.have.property('WACHTWOORD');",
									"            });",
									"",
									"            pm.test('Heeft HEEFT_BETAALD', function() {",
									"                pm.expect(jsonData).to.have.property('HEEFT_BETAALD');",
									"            });",
									"",
									"            pm.test('Heeft LIERIST', function() {",
									"                pm.expect(jsonData).to.have.property('LIERIST');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									""
								]
							}
						}
					]
				},
				{
					"name": "Rooster",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    DDWV: true,",
											"    CLUB_BEDRIJF: false,",
											"    OCHTEND_DDI_ID: 10001,",
											"    OCHTEND_INSTRUCTEUR_ID: 10115,",
											"    OCHTEND_LIERIST_ID: 10804,",
											"    OCHTEND_HULPLIERIST_ID: 10858,",
											"    OCHTEND_STARTLEIDER_ID: 10408,",
											"    MIDDAG_DDI_ID: 10470,",
											"    MIDDAG_INSTRUCTEUR_ID: 10408,",
											"    MIDDAG_LIERIST_ID: 10858,",
											"    MIDDAG_HULPLIERIST_ID: 10804,",
											"    MIDDAG_STARTLEIDER_ID: 10213,   ",
											"};",
											"",
											"record.DATUM = pm.variables.get('test_datum');",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    OCHTEND_DDI_ID: 10001,",
											"    OCHTEND_INSTRUCTEUR_ID: 10063,",
											"    OCHTEND_LIERIST_ID: 10115,",
											"    OCHTEND_HULPLIERIST_ID: 10213,",
											"    OCHTEND_STARTLEIDER_ID: 10265,",
											"    MIDDAG_DDI_ID: 10395,",
											"    MIDDAG_INSTRUCTEUR_ID: 10408,",
											"    MIDDAG_LIERIST_ID: 10470,",
											"    MIDDAG_HULPLIERIST_ID: 10632,",
											"    MIDDAG_STARTLEIDER_ID: 10858",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    OCHTEND_DDI_ID: null,",
											"    OCHTEND_INSTRUCTEUR_ID: null,",
											"    OCHTEND_LIERIST_ID: null,",
											"    OCHTEND_HULPLIERIST_ID: null,",
											"    OCHTEND_STARTLEIDER_ID: null,",
											"    MIDDAG_DDI_ID: null,",
											"    MIDDAG_INSTRUCTEUR_ID: null,",
											"    MIDDAG_LIERIST_ID: null,",
											"    MIDDAG_HULPLIERIST_ID: null,",
											"    MIDDAG_STARTLEIDER_ID: null, ",
											"};",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Rooster\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft DATUM', function() {",
									"                pm.expect(jsonData).to.have.property('DATUM');",
									"            });",
									"",
									"            pm.test('Heeft OCHTEND_DDI_ID', function() {",
									"                pm.expect(jsonData).to.have.property('OCHTEND_DDI_ID');",
									"            });",
									"",
									"            pm.test('Heeft OCHTEND_STARTLEIDER_ID', function() {",
									"                pm.expect(jsonData).to.have.property('OCHTEND_STARTLEIDER_ID');",
									"            });",
									"",
									"            pm.test('Heeft OCHTEND_LIERIST_ID', function() {",
									"                pm.expect(jsonData).to.have.property('OCHTEND_LIERIST_ID');",
									"            });",
									"",
									"            pm.test('Heeft OCHTEND_HULPLIERIST_ID', function() {",
									"                pm.expect(jsonData).to.have.property('OCHTEND_HULPLIERIST_ID');",
									"            });",
									"",
									"            pm.test('Heeft MIDDAG_DDI_ID', function() {",
									"                pm.expect(jsonData).to.have.property('MIDDAG_DDI_ID');",
									"            });",
									"",
									"            pm.test('Heeft MIDDAG_INSTRUCTEUR_ID', function() {",
									"                pm.expect(jsonData).to.have.property('MIDDAG_INSTRUCTEUR_ID');",
									"            });",
									"",
									"            pm.test('Heeft MIDDAG_STARTLEIDER_ID', function() {",
									"                pm.expect(jsonData).to.have.property('MIDDAG_STARTLEIDER_ID');",
									"            });",
									"",
									"            pm.test('Heeft MIDDAG_LIERIST_ID', function() {",
									"                pm.expect(jsonData).to.have.property('MIDDAG_LIERIST_ID');",
									"            });",
									"",
									"            pm.test('Heeft MIDDAG_HULPLIERIST_ID', function() {",
									"                pm.expect(jsonData).to.have.property('MIDDAG_HULPLIERIST_ID');",
									"            });",
									"",
									"            pm.test('Heeft DDWV', function() {",
									"                pm.expect(jsonData).to.have.property('DDWV');",
									"            });",
									"",
									"            pm.test('Heeft CLUB_BEDRIJF', function() {",
									"                pm.expect(jsonData).to.have.property('CLUB_BEDRIJF');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Aanmelding Leden",
					"item": [
						{
							"name": "SaveObject",
							"item": [
								{
									"name": "Nieuw record opslaan",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: true,",
													"  AANKOMST: \"10:00:02\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"record.DATUM = pm.variables.get('test_datum'); ",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    let url = pm.variables.get(\"url\");",
													"    pm.sendRequest({",
													"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"  POSITIE: 200,",
													"  AANKOMST: \"10:03:33\",",
													"  VERTREK: \"19:33\",  ",
													"  VOORAANMELDING: true,",
													"  OVERLAND_VLIEGTUIG_ID: 216,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"405\",",
													"  OPMERKINGEN: \"Heeft in de middag lierdienst\"",
													"}",
													"",
													"record.ID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"Update id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record Lege velden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"  POSITIE: null,",
													"  AANKOMST: null,",
													"  VERTREK: null,  ",
													"  OVERLAND_VLIEGTUIG_ID: null,",
													"  VOORKEUR_VLIEGTUIG_TYPE: null,",
													"  OPMERKINGEN: null,",
													"}",
													"",
													"record.ID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"Update id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{nieuwID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let nieuwID = pm.variables.get(\"nieuwID\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    pm.sendRequest({",
													"        url: url + \"/GetObject?ID=\" + nieuwID,",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.test('ID == ' + nieuwID, function() {",
													"                pm.expect(response.ID).to.eql(nieuwID);",
													"            });",
													"",
													"            pm.test('VERWIJDERD == true', function() {",
													"                pm.expect(response.VERWIJDERD).to.eql(true);",
													"            });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{delete_database_url}}?ID={{nieuwID}}",
											"host": [
												"{{delete_database_url}}"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects VERWIJDERD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID)",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(true); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VERWIJDERD=true&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VERWIJDERD",
													"value": "true"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "RestoreObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let nieuwID = pm.variables.get(\"nieuwID\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    pm.sendRequest({",
													"        url: url + \"/GetObject?ID=\" + nieuwID,",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.test('ID == ' + nieuwID, function() {",
													"                pm.expect(response.ID).to.eql(nieuwID);",
													"            });",
													"",
													"            pm.test('VERWIJDERD == false', function() {",
													"                pm.expect(response.VERWIJDERD).to.eql(false);",
													"            });",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{restore_database_url}}?ID={{nieuwID}}",
											"host": [
												"{{restore_database_url}}"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects VERWIJDERD-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID) ",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(false); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VERWIJDERD",
													"value": "true"
												},
												{
													"key": "VELDEN",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID) ",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(true); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=ID&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HASH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    let begin_datum = pm.request.url.query.get(\"BEGIN_DATUM\");",
													"",
													"    let jsonData = pm.response.json();",
													"    let hash = jsonData.hash;",
													"    let id = jsonData.dataset[0].ID;",
													"",
													"    pm.sendRequest({",
													"        url: delete_database_url + \"?ID=\" + id,",
													"        method: 'DELETE'},",
													"        function (err, res) {",
													"            pm.test(\"Delete STATUS == 204\", function () {",
													"                pm.expect(res).to.have.property('code', 204);",
													"            });",
													"",
													"            pm.sendRequest({",
													"                url: url + \"/GetObjects?BEGIN_DATUM=\" + begin_datum + \"&HASH=\" + hash,",
													"                method: 'GET'},",
													"                function (err, res) {",
													"                    pm.test(\"GetObjects STATUS == 200\", function () {",
													"                        pm.expect(res).to.have.property('code', 200);",
													"                    });",
													"            });   ",
													"        });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aan en afmelden",
							"item": [
								{
									"name": "Aanmelden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10408,",
													"  TIJDSTIP: \"2014-04-21T06:31:33.124Z\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"DATUM == 2014-04-21\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(\"2014-04-21\");",
													"    });  ",
													"    ",
													"    pm.test(\"AANKOMST lokale tijd\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
													"    });",
													"",
													"    pm.test(\"VERTREK == null\", function () {",
													"        pm.expect(jsonData.VERTREK).to.eql(null);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    pm.variables.set(\"nieuwID\", -1);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{aanmelden_url}}",
											"host": [
												"{{aanmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10408,",
													"  TIJDSTIP: \"2014-04-21T21:16:59Z\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let id = pm.variables.get(\"nieuwID\");",
													"",
													"    pm.test(\"ID == \" + id, function () {",
													"        pm.expect(jsonData.ID).to.eql(id);",
													"    });",
													"",
													"    pm.test(\"DATUM == 2014-04-21\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(\"2014-04-21\");",
													"    });  ",
													"",
													"    pm.test(\"AANKOMST lokale tijd\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
													"    });  ",
													"",
													"    pm.test(\"VERTREK lokale tijd\", function () {",
													"        pm.expect(jsonData.VERTREK.toString()).to.eql(\"23:16\");",
													"    });      ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{afmelden_url}}",
											"host": [
												"{{afmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden zonder Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10408",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let vandaag = new Date();",
													"",
													"    pm.test(\"DATUM == Vandaag\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(vandaag.toISOString().substring(0, 10));",
													"    });",
													"",
													"    let nu = (vandaag.getHours()).toString().padStart(2, \"0\") + \":\" + (vandaag.getMinutes()).toString().padStart(2, \"0\");",
													"    pm.test(\"AANKOMST == nu\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(nu);",
													"    });",
													"",
													"    pm.test(\"VERTREK == null\", function () {",
													"        pm.expect(jsonData.VERTREK).to.eql(null);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    pm.variables.set(\"nieuwID\", -1);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{aanmelden_url}}",
											"host": [
												"{{aanmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden zonder Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10408",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let vandaag = new Date();",
													"    let id = pm.variables.get(\"nieuwID\");",
													"",
													"    pm.test(\"ID == \" + id, function () {",
													"        pm.expect(jsonData.ID).to.eql(id);",
													"    });",
													"",
													"    pm.test(\"DATUM == Vandaag\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(vandaag.toISOString().substring(0, 10));",
													"    });",
													"",
													"    pm.test(\"AANKOMST != null\", function () {",
													"        pm.expect(jsonData.AANKOMST).not.to.eql(null);",
													"    });",
													"",
													"    let nu = (vandaag.getHours()).toString().padStart(2, \"0\") + \":\" + (vandaag.getMinutes()).toString().padStart(2, \"0\");",
													"    pm.test(\"VERTREK == nu\", function () {",
													"        pm.expect(jsonData.VERTREK.toString()).to.eql(nu);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{afmelden_url}}",
											"host": [
												"{{afmelden_url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"AanwezigLeden\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft DATUM', function() {",
									"                pm.expect(jsonData).to.have.property('DATUM');",
									"            });",
									"",
									"            pm.test('Heeft POSITIE', function() {",
									"                pm.expect(jsonData).to.have.property('POSITIE');",
									"            });",
									"",
									"            pm.test('Heeft LID_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LID_ID');",
									"            });",
									"",
									"            pm.test('Heeft VOORAANMELDING', function() {",
									"                pm.expect(jsonData).to.have.property('VOORAANMELDING');",
									"            });",
									"",
									"            pm.test('Heeft AANKOMST', function() {",
									"                pm.expect(jsonData).to.have.property('AANKOMST');",
									"            });",
									"",
									"            pm.test('Heeft VERTREK', function() {",
									"                pm.expect(jsonData).to.have.property('VERTREK');",
									"            });",
									"",
									"            pm.test('Heeft OVERLAND_VLIEGTUIG_ID', function() {",
									"                pm.expect(jsonData).to.have.property('OVERLAND_VLIEGTUIG_ID');",
									"            });",
									"",
									"            pm.test('Heeft VOORKEUR_VLIEGTUIG_TYPE', function() {",
									"                pm.expect(jsonData).to.have.property('VOORKEUR_VLIEGTUIG_TYPE');",
									"            });",
									"",
									"            pm.test('Heeft OPMERKINGEN', function() {",
									"                pm.expect(jsonData).to.have.property('OPMERKINGEN');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Aanmelding Vliegtuigen",
					"item": [
						{
							"name": "SaveObject",
							"item": [
								{
									"name": "Nieuw record opslaan",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 215,",
													"  AANKOMST: \"06:31:00\"",
													"}",
													"",
													"record.DATUM = pm.variables.get('test_datum'); ",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    let url = pm.variables.get(\"url\");",
													"    pm.sendRequest({",
													"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"  AANKOMST: \"10:03\",",
													"  VERTREK: \"19:33\",  ",
													"  LATITUDE: 51.45712,",
													"  LONGITUDE: 4.67892,",
													"  HOOGTE: 1204,",
													"  SNELHEID: 142",
													"}",
													"",
													"record.ID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"Update id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record Lege velden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"  AANKOMST: null,",
													"  VERTREK: null,  ",
													"  LATITUDE: null,",
													"  LONGITUDE: null,",
													"  HOOGTE: null,",
													"  SNELHEID: null",
													"}",
													"",
													"record.ID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"Update id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID={{nieuwID}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let nieuwID = pm.variables.get(\"nieuwID\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    pm.sendRequest({",
													"        url: url + \"/GetObject?ID=\" + nieuwID,",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.test('ID == ' + nieuwID, function() {",
													"                pm.expect(response.ID).to.eql(nieuwID);",
													"            });",
													"",
													"            pm.test('VERWIJDERD == true', function() {",
													"                pm.expect(response.VERWIJDERD).to.eql(true);",
													"            });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{delete_database_url}}?ID={{nieuwID}}",
											"host": [
												"{{delete_database_url}}"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects VERWIJDERD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID)",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(true); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VERWIJDERD=true&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VERWIJDERD",
													"value": "true"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "RestoreObject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let nieuwID = pm.variables.get(\"nieuwID\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    pm.sendRequest({",
													"        url: url + \"/GetObject?ID=\" + nieuwID,",
													"        method: 'GET'},",
													"        function (err, res) {",
													"            let response = res.json();",
													"",
													"            pm.test('ID == ' + nieuwID, function() {",
													"                pm.expect(response.ID).to.eql(nieuwID);",
													"            });",
													"",
													"            pm.test('VERWIJDERD == false', function() {",
													"                pm.expect(response.VERWIJDERD).to.eql(false);",
													"            });",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{restore_database_url}}?ID={{nieuwID}}",
											"host": [
												"{{restore_database_url}}"
											],
											"query": [
												{
													"key": "ID",
													"value": "{{nieuwID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects VERWIJDERD-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID) ",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(false); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VERWIJDERD",
													"value": "true"
												},
												{
													"key": "VELDEN",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"let modify_database = pm.environment.get(\"modify_database\");",
													"let nieuwID = pm.variables.get(\"nieuwID\");",
													"",
													"pm.test(\"Aantal records == totaal\", function () {",
													"    let aantal = parseInt(jsonData.totaal);",
													"    ",
													"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
													"});",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let bevat = false;",
													"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
													"",
													"        for (index = 0; index < jsonData.dataset.length; ++index) ",
													"        {",
													"            if (jsonData.dataset[index].ID == nieuwID) ",
													"            {",
													"                bevat = true;",
													"                break;",
													"            }",
													"        }",
													"        pm.expect(bevat).to.eql(true); ",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=ID&BEGIN_DATUM={{test_datum}}&EIND_DATUM={{test_datum}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "ID"
												},
												{
													"key": "BEGIN_DATUM",
													"value": "{{test_datum}}"
												},
												{
													"key": "EIND_DATUM",
													"value": "{{test_datum}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects HASH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
													"    let url = pm.variables.get(\"url\");",
													"",
													"    let begin_datum = pm.request.url.query.get(\"BEGIN_DATUM\");",
													"",
													"    let jsonData = pm.response.json();",
													"    let hash = jsonData.hash;",
													"    let id = jsonData.dataset[0].ID;",
													"",
													"    pm.sendRequest({",
													"        url: delete_database_url + \"?ID=\" + id,",
													"        method: 'DELETE'},",
													"        function (err, res) {",
													"            pm.test(\"Delete STATUS == 204\", function () {",
													"                pm.expect(res).to.have.property('code', 204);",
													"            });",
													"",
													"            pm.sendRequest({",
													"                url: url + \"/GetObjects?BEGIN_DATUM=\" + begin_datum + \"&HASH=\" + hash,",
													"                method: 'GET'},",
													"                function (err, res) {",
													"                    pm.test(\"GetObjects STATUS == 200\", function () {",
													"                        pm.expect(res).to.have.property('code', 200);",
													"                    });",
													"            });   ",
													"        });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?BEGIN_DATUM={{dit_jaar}}-01-01",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "BEGIN_DATUM",
													"value": "{{dit_jaar}}-01-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aan en afmelden",
							"item": [
								{
									"name": "Aanmelden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 214,",
													"  TIJDSTIP: \"2011-04-21T06:31:33.124Z\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"DATUM == 2011-04-21\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(\"2011-04-21\");",
													"    });  ",
													"    ",
													"    pm.test(\"AANKOMST lokale tijd\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
													"    });",
													"",
													"    pm.test(\"VERTREK == null\", function () {",
													"        pm.expect(jsonData.VERTREK).to.eql(null);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    pm.variables.set(\"nieuwID\", -1);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{aanmelden_url}}",
											"host": [
												"{{aanmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 214,",
													"  TIJDSTIP: \"2011-04-21T21:16:59Z\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let id = pm.variables.get(\"nieuwID\");",
													"",
													"    pm.test(\"ID == \" + id, function () {",
													"        pm.expect(jsonData.ID).to.eql(id);",
													"    });",
													"",
													"    pm.test(\"DATUM == 2011-04-21\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(\"2011-04-21\");",
													"    });  ",
													"",
													"    pm.test(\"AANKOMST lokale tijd\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(\"08:31\");",
													"    });  ",
													"",
													"    pm.test(\"VERTREK lokale tijd\", function () {",
													"        pm.expect(jsonData.VERTREK.toString()).to.eql(\"23:16\");",
													"    });      ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{afmelden_url}}",
											"host": [
												"{{afmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden zonder Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 217",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let vandaag = new Date();",
													"",
													"    pm.test(\"DATUM == Vandaag\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(vandaag.toISOString().substring(0, 10));",
													"    });",
													"",
													"    let nu = (vandaag.getHours()).toString().padStart(2, \"0\") + \":\" + (vandaag.getMinutes()).toString().padStart(2, \"0\");",
													"    pm.test(\"AANKOMST == nu\", function () {",
													"        pm.expect(jsonData.AANKOMST.toString()).to.eql(nu);",
													"    });",
													"",
													"    pm.test(\"VERTREK == null\", function () {",
													"        pm.expect(jsonData.VERTREK).to.eql(null);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}",
													"else",
													"{",
													"    pm.variables.set(\"nieuwID\", -1);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{aanmelden_url}}",
											"host": [
												"{{aanmelden_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden zonder Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 217",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let modify_database = pm.environment.get(\"modify_database\");",
													"",
													"if (modify_database === \"true\")",
													"{",
													"    let jsonData = pm.response.json();",
													"    let vandaag = new Date();",
													"    let id = pm.variables.get(\"nieuwID\");",
													"",
													"    pm.test(\"ID == \" + id, function () {",
													"        pm.expect(jsonData.ID).to.eql(id);",
													"    });",
													"",
													"    pm.test(\"DATUM == Vandaag\", function () {",
													"        pm.expect(jsonData.DATUM.toString()).to.eql(vandaag.toISOString().substring(0, 10));",
													"    });",
													"",
													"    pm.test(\"AANKOMST != null\", function () {",
													"        pm.expect(jsonData.AANKOMST).not.to.eql(null);",
													"    });",
													"",
													"    let nu = (vandaag.getHours()).toString().padStart(2, \"0\") + \":\" + (vandaag.getMinutes()).toString().padStart(2, \"0\");",
													"    pm.test(\"VERTREK == nu\", function () {",
													"        pm.expect(jsonData.VERTREK.toString()).to.eql(nu);",
													"    });",
													"",
													"    pm.variables.set(\"nieuwID\", jsonData.ID);",
													"    console.log(\"nieuwID: \"+ jsonData.ID);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{afmelden_url}}",
											"host": [
												"{{afmelden_url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"AanwezigVliegtuigen\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft DATUM', function() {",
									"                pm.expect(jsonData).to.have.property('DATUM');",
									"            });",
									"",
									"            pm.test('Heeft VLIEGTUIG_ID', function() {",
									"                pm.expect(jsonData).to.have.property('VLIEGTUIG_ID');",
									"            });",
									"",
									"            pm.test('Heeft AANKOMST', function() {",
									"                pm.expect(jsonData).to.have.property('AANKOMST');",
									"            });",
									"",
									"            pm.test('Heeft LATITUDE', function() {",
									"                pm.expect(jsonData).to.have.property('LATITUDE');",
									"            });",
									"",
									"            pm.test('Heeft LONGITUDE', function() {",
									"                pm.expect(jsonData).to.have.property('LONGITUDE');",
									"            });",
									"",
									"            pm.test('Heeft HOOGTE', function() {",
									"                pm.expect(jsonData).to.have.property('HOOGTE');",
									"            });",
									"",
									"            pm.test('Heeft SNELHEID', function() {",
									"                pm.expect(jsonData).to.have.property('SNELHEID');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Startlijst",
					"item": [
						{
							"name": "Recency",
							"item": [
								{
									"name": "GetRecency 10858 Groen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test('STATUS_BAROMETER == groen', function() {",
													"  pm.expect(jsonData.STATUS_BAROMETER).to.eql(\"groen\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetRecency?VLIEGER_ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetRecency"
											],
											"query": [
												{
													"key": "VLIEGER_ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRecency 10858 Geel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test('STATUS_BAROMETER == geel', function() {",
													"  pm.expect(jsonData.STATUS_BAROMETER).to.eql(\"geel\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.variables.get(\"url\");",
													"let toDelete = \"7,8,9,13,14,15\";",
													"",
													"pm.sendRequest({",
													"    url: url + \"/DeleteObject?VERIFICATIE=false&ID=\" + toDelete,",
													"    method: 'DELETE',",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetRecency?VLIEGER_ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetRecency"
											],
											"query": [
												{
													"key": "VLIEGER_ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRecency 10858 Rood",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test('STATUS_BAROMETER == rood', function() {",
													"  pm.expect(jsonData.STATUS_BAROMETER).to.eql(\"rood\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let url = pm.variables.get(\"url\");",
													"",
													"let toDelete = \"1,2,3,7,8,9,13,14,15,20,21\";",
													"",
													"pm.sendRequest({",
													"    url: url + \"/DeleteObject?VERIFICATIE=false&ID=\" + toDelete,",
													"    method: 'DELETE',",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetRecency?VLIEGER_ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetRecency"
											],
											"query": [
												{
													"key": "VLIEGER_ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRecency 10858 Zonder 3 maanden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let url = pm.variables.get(\"url\");",
													"let vlieger_id = pm.request.url.query.get(\"VLIEGER_ID\");",
													"let dit_jaar = pm.variables.get(\"dit_jaar\");",
													"let vorig_jaar = dit_jaar -1;",
													"",
													"pm.sendRequest({",
													"    url: url + \"/GetObjects?LID_ID=\" + vlieger_id + \"&BEGIN_DATUM=\" + vorig_jaar + \"-01-01\",",
													"    method: 'GET'},",
													"    function (err, res) {",
													"        let response = res.json();",
													"        let toDelete = \"\";",
													"",
													"        for (index = 0; index < response.dataset.length; ++index) ",
													"        {",
													"            if (response.dataset[index].DATUM.includes(vorig_jaar))",
													"            {",
													"            }           ",
													"",
													"            const nu = new Date();",
													"            const startDatum = Date.parse(response.dataset[index].DATUM);",
													"",
													"            const diffTime = Math.abs(nu - startDatum);",
													"            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));     ",
													"",
													"            if (diffDays <= (13*7))",
													"            {",
													"                if (toDelete != \"\")",
													"                    toDelete += \",\";",
													"",
													"                toDelete +=   response.dataset[index].ID                         ",
													"            }",
													"        }    ",
													"",
													"        pm.sendRequest({",
													"            url: url + \"/DeleteObject?VERIFICATIE=false&ID=\" + toDelete,",
													"            method: 'DELETE',",
													"        });",
													"    });",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetRecency?VLIEGER_ID=10858",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetRecency"
											],
											"query": [
												{
													"key": "VLIEGER_ID",
													"value": "10858"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let url = pm.variables.get(\"url\");",
											"let dit_jaar = pm.variables.get(\"dit_jaar\");",
											"let vlieger_id = pm.request.url.query.get(\"VLIEGER_ID\");",
											"",
											"// Alle vluchten die zijn verwijderd, terug halen ",
											"pm.sendRequest({",
											"    url: url + \"/GetObjects?LID_ID=\" + vlieger_id + \"&VERWIJDERD=true\",",
											"    method: 'GET'},",
											"    function (err, res) {",
											"        let response = res.json();",
											"        let ids = \"\"",
											"",
											"        for (index = 0; index < response.dataset.length; ++index) ",
											"        {",
											"            if (ids != \"\")",
											"                ids += \",\";",
											"            ",
											"            ids += response.dataset[index].ID;",
											"        }",
											"",
											"        if (ids != \"\")",
											"        {",
											"            pm.test('Restore starts  VLIEGER_ID == ' + vlieger_id + \" STARTS == \" + ids, function() {",
											"                console.log(\"Restore starts IDs=\" + ids);",
											"                pm.sendRequest({",
											"                    url: url + \"/RestoreObject?ID=\" + ids,",
											"                    method: 'PATCH'}, ",
											"                    function (err, res) {",
											"                        pm.expect(res).to.have.property('code', 202);",
											"                });",
											"            });",
											"        }",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"let url = pm.variables.get(\"url\");",
											"let lid_id = pm.request.url.query.get(\"VLIEGER_ID\");",
											"let dit_jaar = pm.variables.get(\"dit_jaar\");",
											"let vorig_jaar = dit_jaar -1;",
											"",
											"pm.test('Heeft STARTS_DRIE_MND', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_DRIE_MND');",
											"});",
											"",
											"pm.test('Heeft STARTS_VORIG_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_VORIG_JAAR');",
											"});",
											"",
											"pm.test('Heeft STARTS_DIT_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_DIT_JAAR');",
											"});",
											"",
											"pm.test('Heeft UREN_DRIE_MND', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_DRIE_MND');",
											"});",
											"",
											"pm.test('Heeft UREN_DIT_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_DIT_JAAR');",
											"});",
											"",
											"pm.test('Heeft UREN_VORIG_JAAR', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_VORIG_JAAR');",
											"});",
											"",
											"pm.test('Heeft STATUS_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('STATUS_BAROMETER');",
											"});",
											"",
											"pm.test('Heeft STARTS_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('STARTS_BAROMETER');",
											"});",
											"",
											"pm.test('Heeft UREN_BAROMETER', function() {",
											"  pm.expect(jsonData).to.have.property('UREN_BAROMETER');",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"    url: url + \"/GetObjects?LID_ID=\" + lid_id + \"&BEGIN_DATUM=\" + vorig_jaar + \"-01-01\",",
											"    method: 'GET'},",
											"    function (err, res) {",
											"        let response = res.json();",
											"",
											"        let starts_dit_jaar = 0;",
											"        let starts_vorig_jaar = 0;",
											"        let starts_3_mnd = 0;",
											"        let starts_barometer = 0;",
											"",
											"        let uren_dit_jaar = 0;",
											"        let uren_vorig_jaar = 0;",
											"        let uren_3_mnd = 0;",
											"        let uren_barometer = 0;",
											"",
											"        for (index = 0; index < response.dataset.length; ++index) ",
											"        {",
											"            if (response.dataset[index].VLIEGER_ID == lid_id)",
											"            {",
											"                if ((response.dataset[index].STARTTIJD) && (response.dataset[index].LANDINGSTIJD))  ",
											"                {",
											"                    if (response.dataset[index].DATUM.includes(vorig_jaar))",
											"                    {",
											"                        starts_vorig_jaar++;",
											"                        uren_vorig_jaar += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_vorig_jaar += response.dataset[index].DUUR.split(':')[1] * 1;",
											"",
											"                    }",
											"                    if (response.dataset[index].DATUM.includes(dit_jaar))",
											"                    {",
											"                        starts_dit_jaar++;",
											"                        uren_dit_jaar += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_dit_jaar += response.dataset[index].DUUR.split(':')[1] * 1;",
											"                    }               ",
											"",
											"                    const nu = new Date();",
											"                    const startDatum = Date.parse(response.dataset[index].DATUM);",
											"",
											"                    const diffTime = Math.abs(nu - startDatum);",
											"                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));     ",
											"",
											"                    if (diffDays <= (13*7))",
											"                    {",
											"                        starts_3_mnd++;",
											"                        uren_3_mnd += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_3_mnd += response.dataset[index].DUUR.split(':')[1] * 1;                        ",
											"                    }",
											"",
											"                    if (diffDays <= 365)",
											"                    {",
											"                        starts_barometer++;",
											"                        uren_barometer += response.dataset[index].DUUR.split(':')[0] * 60;",
											"                        uren_barometer += response.dataset[index].DUUR.split(':')[1] * 1;                        ",
											"                    }",
											"                }",
											"            }",
											"        } ",
											"        uren_dit_jaar = Math.floor(uren_dit_jaar / 60) + \":\" + (uren_dit_jaar % 60).toString().padStart(2, \"0\");",
											"        uren_vorig_jaar = Math.floor(uren_vorig_jaar / 60) + \":\" + (uren_vorig_jaar % 60).toString().padStart(2, \"0\");",
											"        uren_3_mnd = Math.floor(uren_3_mnd / 60) + \":\" + (uren_3_mnd % 60).toString().padStart(2, \"0\");",
											"        uren_barometer = Math.floor(uren_barometer / 60) + \":\" + (uren_barometer % 60).toString().padStart(2, \"0\");",
											"",
											"        pm.test(\"STARTS_DRIE_MND \" + starts_3_mnd + \" == \" + jsonData.STARTS_DRIE_MND, function () {",
											"            pm.expect(jsonData.STARTS_DRIE_MND).to.eql(starts_3_mnd); ",
											"        });",
											"        pm.test(\"UREN_DRIE_MND \" + uren_3_mnd + \" == \" + jsonData.UREN_DRIE_MND, function () {",
											"            pm.expect(jsonData.UREN_DRIE_MND).to.eql(uren_3_mnd); ",
											"        });",
											"",
											"        pm.test(\"STARTS_VORIG_JAAR \" + starts_vorig_jaar + \" == \" + jsonData.STARTS_VORIG_JAAR, function () {",
											"            pm.expect(jsonData.STARTS_VORIG_JAAR).to.eql(starts_vorig_jaar); ",
											"        });",
											"        pm.test(\"UREN_VORIG_JAAR \" + uren_vorig_jaar+ \" == \" + jsonData.UREN_VORIG_JAAR, function () {",
											"            pm.expect(jsonData.UREN_VORIG_JAAR).to.eql(uren_vorig_jaar); ",
											"        });",
											"",
											"        pm.test(\"STARTS_DIT_JAAR \" + starts_dit_jaar + \" == \" + jsonData.STARTS_DIT_JAAR, function () {",
											"            pm.expect(jsonData.STARTS_DIT_JAAR).to.eql(starts_dit_jaar); ",
											"        });",
											"        pm.test(\"UREN_DIT_JAAR \" + uren_dit_jaar+ \" == \" + jsonData.UREN_DIT_JAAR, function () {",
											"            pm.expect(jsonData.UREN_DIT_JAAR).to.eql(uren_dit_jaar); ",
											"        });",
											"",
											"        pm.test(\"STARTS_BAROMETER \" + starts_barometer + \" == \" + jsonData.STARTS_BAROMETER, function () {",
											"            pm.expect(jsonData.STARTS_BAROMETER).to.eql(starts_barometer); ",
											"        });",
											"        pm.test(\"UREN_BAROMETER \" + uren_barometer+ \" == \" + jsonData.UREN_BAROMETER, function () {",
											"            pm.expect(jsonData.UREN_BAROMETER).to.eql(uren_barometer); ",
											"        });        ",
											"    });",
											"  "
										]
									}
								}
							]
						},
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 200",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);    ",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan met namen",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 201,",
											"    VLIEGERNAAM: \"vlieger\",",
											"    INZITTENDENAAM: \"inzittende\",",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);    ",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan met vlieger & inzittende",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 214,",
											"    VLIEGER_ID: 10470,",
											"    INZITTENDE_ID: 10632",
											"",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"var body = JSON.parse(pm.variables.get('request_body'));",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan met vlieger",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 215,",
											"    VLIEGER_ID: 10395,",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan met inzittende",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 216,",
											"    INZITTENDE_ID: 10115",
											"",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan met tijden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 213,",
											"    STARTTIJD: \"09:55:22\",",
											"    LANDINGSTIJD: \"13:17:59\"",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record opslaan overig",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let record = ",
											"{",
											"    VLIEGTUIG_ID: 217,",
											"    STARTMETHODE_ID: 550,",
											"    SLEEPKIST_ID: 218,",
											"    SLEEP_HOOGTE: 600,",
											"    VELD_ID: 902,",
											"    OPMERKINGEN: \"automatisch testen\",",
											"    EXTERNAL_ID: \"ref naar ander systeem\"",
											"}",
											"",
											"record.DATUM = pm.variables.get('test_datum'); ",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = ",
											"{",
											"  VLIEGER_ID: 10265,",
											"  VLIEGERNAAM: \"update record\",",
											"  SLEEP_HOOGTE: 142",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = ",
											"{",
											"    STARTTIJD: null,",
											"    LANDINGSTIJD: null,",
											"    STARTMETHODE_ID: null,",
											"    VLIEGER_ID: null,",
											"    INZITTENDE_ID: null,",
											"    VLIEGERNAAM: null,",
											"    INZITTENDENAAM: null,    ",
											"    SLEEPKIST_ID: null,",
											"    SLEEP_HOOGTE: null,",
											"    EXTERNAL_ID: null,",
											"    VELD_ID: null,",
											"    OPMERKINGEN: null",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Startlijst\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') && (modify_database === \"true\")))",
									"    {   ",
									"        if (!pm.info.requestName.includes(\"GetRecency\"))",
									"        {",
									"            let jsonData = pm.response.json();",
									"",
									"            if (!pm.info.requestName.includes(\"GetObjects\"))",
									"            {",
									"                // Test of velden aanwezig zijn",
									"                pm.test('Heeft ID', function() {",
									"                    pm.expect(jsonData).to.have.property('ID');",
									"                });",
									"",
									"                pm.test('Heeft DAGNUMMER', function() {",
									"                    pm.expect(jsonData).to.have.property('DAGNUMMER');",
									"                });",
									"",
									"                pm.test('Heeft DATUM', function() {",
									"                    pm.expect(jsonData).to.have.property('DATUM');",
									"                });",
									"",
									"                pm.test('Heeft VLIEGTUIG_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('VLIEGTUIG_ID');",
									"                });",
									"",
									"                pm.test('Heeft STARTTIJD', function() {",
									"                    pm.expect(jsonData).to.have.property('STARTTIJD');",
									"                });",
									"",
									"                pm.test('Heeft LANDINGSTIJD', function() {",
									"                    pm.expect(jsonData).to.have.property('LANDINGSTIJD');",
									"                });",
									"",
									"                pm.test('Heeft STARTMETHODE_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('STARTMETHODE_ID');",
									"                });",
									"",
									"                pm.test('Heeft VLIEGER_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('VLIEGER_ID');",
									"                });",
									"",
									"                pm.test('Heeft INZITTENDE_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('INZITTENDE_ID');",
									"                });",
									"",
									"                pm.test('Heeft VLIEGERNAAM', function() {",
									"                    pm.expect(jsonData).to.have.property('VLIEGERNAAM');",
									"                });",
									"",
									"                pm.test('Heeft INZITTENDENAAM', function() {",
									"                    pm.expect(jsonData).to.have.property('INZITTENDENAAM');",
									"                });",
									"",
									"                pm.test('Heeft SLEEPKIST_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('SLEEPKIST_ID');",
									"                });",
									"",
									"                pm.test('Heeft SLEEP_HOOGTE', function() {",
									"                    pm.expect(jsonData).to.have.property('SLEEP_HOOGTE');",
									"                });",
									"",
									"                pm.test('Heeft VELD_ID', function() {",
									"                    pm.expect(jsonData).to.have.property('VELD_ID');",
									"                });",
									"",
									"                pm.test('Heeft OPMERKINGEN', function() {",
									"                    pm.expect(jsonData).to.have.property('OPMERKINGEN');",
									"                });",
									"",
									"                pm.test('Heeft VERWIJDERD', function() {",
									"                    pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"                });",
									"",
									"                pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                    pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"                });",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"",
									"if ((pm.request.method === 'POST') || (pm.request.method  === \"PUT\"))",
									"{",
									"    let bevat = false;",
									"    let jsonData = pm.response.json();",
									"    let base_url = pm.environment.get(\"base_url\");",
									"    let datum = pm.variables.get('test_datum');",
									"    let body = JSON.parse(pm.variables.get('request_body'));",
									"",
									"    // Bij het toevoegen van een start, wordt het vliegtuig aangemeld",
									"    if (body.VLIEGTUIG_ID)",
									"    {",
									"        pm.test('Aanmelding VLIEGTUIG_ID == ' + body.VLIEGTUIG_ID, function() {",
									"            pm.sendRequest({",
									"                url: base_url + \"/AanwezigVliegtuigen/GetObjects?BEGIN_DATUM=\" + datum + \"&EIND_DATUM=\" +datum,",
									"                method: 'GET'},",
									"                function (err, res) {",
									"                    let response = res.json();",
									"",
									"                    for (index = 0; index < response.dataset.length; ++index) ",
									"                    {",
									"                        if (response.dataset[index].VLIEGTUIG_ID == body.VLIEGTUIG_ID)",
									"                        {",
									"                            bevat = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                    pm.expect(bevat).to.eql(true); ",
									"            });",
									"        });",
									"    }",
									"",
									"",
									"    // maar ook de vliegers worden aangemeld",
									"    if (body.VLIEGER_ID || body.INZITTENDE_ID)",
									"    {  ",
									"        // Wat is het vliegtuig en clubkist en wat is het type ",
									"        pm.sendRequest({",
									"            url: base_url + \"/Vliegtuigen/GetObject?ID=\" + jsonData.VLIEGTUIG_ID,",
									"            method: 'GET'},",
									"            function (err, res) ",
									"            {",
									"                let vliegtuig_record = res.json();",
									"                let heeft_vlieger = false;",
									"                let heeft_inzittende = false;",
									"                let ids = \"\";",
									"                let base_url = pm.variables.get(\"base_url\");",
									"                let datum = pm.variables.get('test_datum');",
									"",
									"                // bouw CSV string met ID van vlieger en inzittende",
									"                if (body.VLIEGER_ID)",
									"                    ids += body.VLIEGER_ID;",
									"",
									"                if (body.INZITTENDE_ID)",
									"                {",
									"                    if (ids != \"\")",
									"                        ids += \",\";",
									"                    ",
									"                    ids += body.INZITTENDE_ID;",
									"                }",
									"",
									"                pm.sendRequest({",
									"                    url: base_url + \"/AanwezigLeden/GetObjects?IN=\" + ids + \"&BEGIN_DATUM=\" + datum + \"&EIND_DATUM=\" +datum,",
									"                    method: 'GET'},",
									"                    function (err, res) ",
									"                    {",
									"                        let response = res.json();",
									"",
									"                        for (index = 0; index < response.dataset.length; ++index) ",
									"                        {              ",
									"                            if (response.dataset[index].LID_ID == body.VLIEGER_ID)",
									"                            {",
									"                                if (vliegtuig_record.CLUBKIST == \"1\")",
									"                                {",
									"                                    // De start is op een clubkist, dan wordt voorkeur type gezet",
									"                                    pm.test('VOORKEUR_VLIEGTUIG_TYPE == ' + vliegtuig_record.TYPE_ID, function() {",
									"                                        pm.expect(response.dataset[index].VOORKEUR_VLIEGTUIG_TYPE).to.include(vliegtuig_record.TYPE_ID); ",
									"                                    });",
									"                                }",
									"                                else",
									"                                {",
									"                                    // Start is op een prive kist, dan woor voorkeur vliegtuig gezet",
									"                                    pm.test('OVERLAND_VLIEGTUIG_ID == ' + vliegtuig_record.ID, function() {",
									"                                        pm.expect(response.dataset[index].OVERLAND_VLIEGTUIG_ID).to.eql(vliegtuig_record.ID); ",
									"                                    });                            ",
									"                                }",
									"                                heeft_vlieger = true;",
									"                            }",
									"                            if (response.dataset[index].LID_ID == body.INZITTENDE_ID)",
									"                            {",
									"                                heeft_inzittende = true;",
									"                            }",
									"                        }",
									"",
									"                        if (body.VLIEGER_ID)",
									"                        {",
									"                            pm.test('Aanmelding VLIEGER_ID == ' + body.VLIEGER_ID, function() {",
									"                                pm.expect(heeft_vlieger).to.eql(true); ",
									"                            });",
									"                        }",
									"                        if (body.INZITTENDE_ID)",
									"                        {",
									"                            pm.test('Aanmelding INZITTENDE_ID == ' + body.INZITTENDE_ID, function() {",
									"                                pm.expect(heeft_inzittende).to.eql(true); ",
									"                            });",
									"                        }                ",
									"                });",
									"        });",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Tracks",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = ",
											"{",
											"    LID_ID: 10001,",
											"    INSTRUCTEUR_ID: 10470,",
											"    TEKST: \"Te laat bijgeprikt\",",
											"    START_ID: \"4\"",
											"}",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"let record = ",
											"{",
											"    TEKST: \"Fantastische landing, perfect midden in doellandingsveld\"",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"pm.variables.set(\"orgID\", record.ID);",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let orgID = parseInt(pm.variables.get(\"orgID\"));",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"LINK_ID\", function () {  ",
											"        pm.expect(jsonData.LINK_ID).to.eql(orgID);",
											"    });",
											"",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"   pm.variables.set(\"nieuwID\", -1); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record Lege velden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"let record = ",
											"{",
											"    TEKST: null,",
											"    START_ID: null,",
											"    INSTRUCTEUR_ID: null,",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"pm.variables.set(\"orgID\", record.ID);",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let postData = JSON.parse(pm.variables.get('request_body'));",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"LINK_ID\", function () {  ",
											"        pm.expect(jsonData.LINK_ID.toString()).to.eql(postData.ID.toString());",
											"    });",
											"",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"   pm.variables.set(\"nieuwID\", -1); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Tracks\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft LID_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LID_ID');",
									"            });",
									"",
									"            pm.test('Heeft INSTRUCTEUR_ID', function() {",
									"                pm.expect(jsonData).to.have.property('INSTRUCTEUR_ID');",
									"            });",
									"",
									"            pm.test('Heeft TEKST', function() {",
									"                pm.expect(jsonData).to.have.property('TEKST');",
									"            });",
									"",
									"            pm.test('Heeft START_ID', function() {",
									"                pm.expect(jsonData).to.have.property('START_ID');",
									"            });",
									"",
									"            pm.test('Heeft INGEVOERD', function() {",
									"                pm.expect(jsonData).to.have.property('INGEVOERD');",
									"            });",
									"",
									"            pm.test('Heeft LINK_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LINK_ID');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Progressie",
					"item": [
						{
							"name": "Nieuw record opslaan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    LID_ID: 10063,",
											"    COMPETENTIE_ID: 22,",
											"    INSTRUCTEUR_ID: 10804,",
											"    OPMERKINGEN: \"Goed gewerkt\",",
											"}",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nieuw record geen INSTRUCTEUR_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    LID_ID: 10063,",
											"    COMPETENTIE_ID: 22,",
											"//    INSTRUCTEUR_ID: \"10804\",",
											"}",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let jsonData = pm.response.json();",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"    let url = pm.variables.get(\"url\");",
											"    pm.sendRequest({",
											"        url: url + \"/GetObjects?MAX=1&VELDEN=ID\",",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.variables.set(\"nieuwID\", response.dataset[0].ID);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{url}}/SaveObject",
									"host": [
										"{{url}}"
									],
									"path": [
										"SaveObject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"let record = {",
											"    LID_ID: 10063,",
											"    COMPETENTIE_ID: 42,",
											"    INSTRUCTEUR_ID: 10804,",
											"    OPMERKINGEN: \"Verkeerde competentie ingevoerd\"",
											"}",
											"",
											"record.ID =  pm.variables.get(\"nieuwID\");",
											"pm.variables.set(\"orgID\", record.ID);",
											"console.log(\"Update id=\" + record.ID);",
											"",
											"var body = JSON.stringify(record); ",
											"pm.variables.set('request_body', body);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let orgID = parseInt(pm.variables.get(\"orgID\"));",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"LINK_ID\", function () {  ",
											"        pm.expect(jsonData.LINK_ID).to.eql(orgID);",
											"    });",
											"",
											"    pm.variables.set(\"nieuwID\", jsonData.ID);",
											"    console.log(\"nieuwID: \"+ jsonData.ID);",
											"}",
											"else",
											"{",
											"   pm.variables.set(\"nieuwID\", -1); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{modify_database_url}}",
									"host": [
										"{{modify_database_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObject?ID={{nieuwID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObject"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == true', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(true);",
											"            });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{delete_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{delete_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID)",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RestoreObject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let nieuwID =  pm.variables.get(\"nieuwID\");",
											"console.log(\"DeleteObject id=\" + nieuwID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let nieuwID = pm.variables.get(\"nieuwID\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    pm.sendRequest({",
											"        url: url + \"/GetObject?ID=\" + nieuwID,",
											"        method: 'GET'},",
											"        function (err, res) {",
											"            let response = res.json();",
											"",
											"            pm.test('ID == ' + nieuwID, function() {",
											"                pm.expect(response.ID).to.eql(nieuwID);",
											"            });",
											"",
											"            pm.test('VERWIJDERD == false', function() {",
											"                pm.expect(response.VERWIJDERD).to.eql(false);",
											"            });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{restore_database_url}}?ID={{nieuwID}}",
									"host": [
										"{{restore_database_url}}"
									],
									"query": [
										{
											"key": "ID",
											"value": "{{nieuwID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects VERWIJDERD-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(false); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VERWIJDERD=true&VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VERWIJDERD",
											"value": "true"
										},
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"let modify_database = pm.environment.get(\"modify_database\");",
											"let nieuwID = pm.variables.get(\"nieuwID\");",
											"",
											"pm.test(\"Aantal records == totaal\", function () {",
											"    let aantal = parseInt(jsonData.totaal);",
											"    ",
											"    pm.expect(jsonData.dataset.length).to.eql(aantal);",
											"});",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let bevat = false;",
											"    pm.test(\"Bevat ID ==\" + nieuwID, function () {",
											"",
											"        for (index = 0; index < jsonData.dataset.length; ++index) ",
											"        {",
											"            if (jsonData.dataset[index].ID == nieuwID) ",
											"            {",
											"                bevat = true;",
											"                break;",
											"            }",
											"        }",
											"        pm.expect(bevat).to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects?VELDEN=ID",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									],
									"query": [
										{
											"key": "VELDEN",
											"value": "ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetObjects HASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let modify_database = pm.environment.get(\"modify_database\");",
											"",
											"if (modify_database === \"true\")",
											"{",
											"    let delete_database_url = pm.variables.get(\"delete_database_url\");",
											"    let url = pm.variables.get(\"url\");",
											"",
											"    let jsonData = pm.response.json();",
											"    let hash = jsonData.hash;",
											"    let id = jsonData.dataset[0].ID;",
											"",
											"    pm.sendRequest({",
											"        url: delete_database_url + \"?ID=\" + id,",
											"        method: 'DELETE'},",
											"        function (err, res) {",
											"            pm.test(\"Delete STATUS == 204\", function () {",
											"                pm.expect(res).to.have.property('code', 204);",
											"            });",
											"",
											"            pm.sendRequest({",
											"                url: url + \"/GetObjects?HASH=\" + hash,",
											"                method: 'GET'},",
											"                function (err, res) {",
											"                    pm.test(\"GetObjects STATUS == 200\", function () {",
											"                        pm.expect(res).to.have.property('code', 200);",
											"                    });",
											"            });   ",
											"        });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/GetObjects",
									"host": [
										"{{url}}"
									],
									"path": [
										"GetObjects"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
									"omgeving(\"Progressie\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if ((pm.request.method !== 'DELETE') && (pm.request.method !== 'PATCH'))",
									"{ ",
									"    let modify_database = pm.environment.get(\"modify_database\");",
									"    if ((pm.response.responseSize > 0) && ((pm.request.method === 'GET') || (modify_database === \"true\")))",
									"    {   ",
									"        let jsonData = pm.response.json();",
									"",
									"        if (!pm.info.requestName.includes(\"GetObjects\"))",
									"        {",
									"            // Test of velden aanwezig zijn",
									"            pm.test('Heeft ID', function() {",
									"                pm.expect(jsonData).to.have.property('ID');",
									"            });",
									"",
									"            pm.test('Heeft LID_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LID_ID');",
									"            });",
									"",
									"            pm.test('Heeft INSTRUCTEUR_ID', function() {",
									"                pm.expect(jsonData).to.have.property('INSTRUCTEUR_ID');",
									"            });",
									"",
									"            pm.test('Heeft COMPETENTIE_ID', function() {",
									"                pm.expect(jsonData).to.have.property('COMPETENTIE_ID');",
									"            });",
									"",
									"            pm.test('Heeft OPMERKINGEN', function() {",
									"                pm.expect(jsonData).to.have.property('OPMERKINGEN');",
									"            });",
									"",
									"            pm.test('Heeft INGEVOERD', function() {",
									"                pm.expect(jsonData).to.have.property('INGEVOERD');",
									"            });",
									"",
									"            pm.test('Heeft LINK_ID', function() {",
									"                pm.expect(jsonData).to.have.property('LINK_ID');",
									"            });",
									"",
									"            pm.test('Heeft VERWIJDERD', function() {",
									"                pm.expect(jsonData).to.have.property('VERWIJDERD');",
									"            });",
									"",
									"            pm.test('Heeft LAATSTE_AANPASSING', function() {",
									"                pm.expect(jsonData).to.have.property('LAATSTE_AANPASSING');",
									"            });",
									"",
									"        }",
									"    }",
									"}",
									"",
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"if (pm.request.method === 'DELETE')",
							"{",
							"    pm.test(\"STATUS == 204\", function () {",
							"        pm.response.to.have.status(204);",
							"    });",
							"}",
							"",
							"if (pm.request.method === 'GET')",
							"{",
							"    pm.test(\"STATUS == 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });            ",
							"}",
							"",
							"if (pm.request.method === 'PATCH')",
							"{",
							"    pm.test(\"STATUS == 202\", function () {",
							"        pm.response.to.have.status(202);",
							"    });            ",
							"}",
							"",
							"if ((pm.request.method === 'POST') || (pm.request.method === 'PUT'))",
							"{",
							"    let modify_database = pm.environment.get(\"modify_database\");",
							"    if ((modify_database === \"true\") && (pm.response.responseSize > 0))",
							"    {",
							"        let postData = JSON.parse(request.data);",
							"        let jsonData = pm.response.json();",
							"",
							"        // controleer alle velden die meegegeven zijn in de aanroep",
							"        for (const [reqKey, reqValue] of Object.entries(postData)) {",
							"            if (reqKey === \"WACHTWOORD\")",
							"                continue;",
							"            ",
							"            let regex1 = new RegExp('[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}..*Z'); // ISO Datum   ",
							"            if (regex1.test(postData[reqKey]))",
							"                continue;",
							"",
							"            let regex2 = new RegExp('[0-9]*:[0-9]*:[0-9]*'); // Tijd in seconden  ",
							"            if (regex2.test(postData[reqKey]))",
							"                continue;",
							"",
							"            // Voor track en progressie, hebben we specifieke manier van update. ID in aanroep en response zijn niet hetzelfde",
							"            let url = pm.variables.get(\"url\").toLowerCase();",
							"            if ((url.includes(\"tracks\")) && (reqKey ==  \"ID\") &&  (pm.request.method === 'PUT'))",
							"                continue;",
							"",
							"            if ((url.includes(\"progressie\")) && (reqKey ==  \"ID\") &&  (pm.request.method === 'PUT'))",
							"                continue;",
							"",
							"            pm.test(\"Response == Request (\" + reqKey + \")\", function () {",
							"                console.log(reqKey + \":\" + jsonData[reqKey] + \"==\" + postData[reqKey]);",
							"                pm.expect(String(jsonData[reqKey])).to.eql(String(postData[reqKey]));",
							"            });",
							"        }",
							"    }",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Error",
			"item": [
				{
					"name": "Data missing 404",
					"item": [
						{
							"name": "Types",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Types\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Competenties",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde leerfase",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"10010\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Competenties\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Daginfo",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2026-01-05\",",
													"    VELD_ID: \"90100\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde baan",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2026-02-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"10900\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd bedrijf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2019-01-12\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"155000\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde startmethode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2004-09-21\",",
													"    STARTMETHODE_ID: \"12012\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Daginfo\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Vliegtuigen",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerd type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  TYPE_ID: \"22222\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Vliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Leden",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lidtype",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"10101\",",
													"  LIDTYPE_ID: 60100,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd zusterclub",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    NAAM: \"Jodokus de Marmot\",",
													"    VOORNAAM: \"Jodokus\",",
													"    ACHTERNAAM: \"Marmot\",",
													"    LIDTYPE_ID: 601,",
													"    ZUSTERCLUB_ID: 90220,",
													"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Leden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Rooster",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend DDI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2001-11-11\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"9910001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Startleider",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-07-07\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"9910408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2017-09-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"9910804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Hulp lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2019-09-30\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"9910858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde ochtend Instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2015-10-10\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"9910115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag DDI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2030-02-13\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"9910470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Startleider",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2013-09-17\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"9910213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2011-09-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"9910858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Hulp lierist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2017-04-15\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"9910804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde middag Instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2007-02-26\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"9910408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Rooster\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Leden",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2022-02-09\",",
													"  POSITIE: 12,",
													"  LID_ID: 100008,",
													"  VOORAANMELDING: 1,",
													"  AANKOMST: \"10:00:20\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2000-08-07\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  AANKOMST: \"10:00:20\",",
													"  OVERLAND_VLIEGTUIG_ID: 20011,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 9918,",
													"  TIJDSTIP: \"2014-04-21T06:31:33.124Z\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigLeden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Vliegtuigen",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2003-07-07\",",
													"  VLIEGTUIG_ID: 21115,",
													"  AANKOMST: \"06:31:00\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  VLIEGTUIG_ID: 9914,",
													"  TIJDSTIP: \"2011-04-21T06:31:33.124Z\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigVliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Startlijst",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let getObjectId =  pm.variables.get(\"getObjectId\");",
													"console.log(\"GetObject id=\" + getObjectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd vliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200900\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde startmethode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 15050,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd sleepvliegtuig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 26618,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 90012,",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde vlieger",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",    ",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    VLIEGER_ID: \"100631\",",
													"    INZITTENDE_ID: \"10804\",  ",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde inzittende",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"    DATUM: \"2031-05-17\",",
													"    VLIEGTUIG_ID: 217,",
													"    STARTMETHODE_ID: 550,",
													"    SLEEPKIST_ID: 218,",
													"    SLEEP_HOOGTE: 600,",
													"    VELD_ID: 902,",
													"    VLIEGER_ID: \"10063\",",
													"    INZITTENDE_ID: \"11814\",  ",
													"    OPMERKINGEN: \"automatisch testen\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Startlijst\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Tracks",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd START_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: 100000",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"9910001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record verkeerd INSTRUCTEUR_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"9910470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Tracks\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Progressie",
							"item": [
								{
									"name": "GetObject geen data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerd lid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"100063\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde competentie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: 10063,",
													"    COMPETENTIE_ID: \"92112\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Verkeerde instructeur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"99804\",",
													"    OPMERKINGEN: \"Goed gewerkt\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Progressie\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    if (pm.response.status == 404)",
									"        console.log(pm.response.headers.get(\"X-Error-Message\"));  ",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Data validatie error 405",
					"item": [
						{
							"name": "Types",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Groep geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?GROEP=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "GROEP",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Groep geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: \"ascii\",",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SORTEER_VOLGORDE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: \"ascii\",",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan READ_ONLY geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan READ_ONLY geen bool 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: \"ascii\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Types\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Competenties",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects LEERFASE_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LEERFASE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"ascii\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Competenties\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Daginfo",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"1967-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VELD_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1970-12-01\",",
													"    VELD_ID: \"AA\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan BAAN_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1971-02-11\",",
													"    BAAN_ID: \"10o\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan BEDRIJF_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1976-01-08\",",
													"    BEDRIJF_ID: \"ZZZZ\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTMETHODE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1981-02-05\",",
													"    STARTMETHODE_ID: \"II\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SOORTBEDRIJF_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1990-04-05\",",
													"    BEDRIJF_ID: \"*****\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-02-30\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"ascii\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Daginfo\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Vliegtuigen",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects IN geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=200,ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "200,ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects IN geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?IN=214,ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "IN",
													"value": "214,ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects TMG ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TMG=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TMG",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SLEEPKIST ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?SLEEPKIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "SLEEPKIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN ascii",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects ZITPLAATSEN 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ZITPLAATSEN=3",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ZITPLAATSEN",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"AAA\",",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan TMG geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  TMG: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan TMG geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  TMG: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUBKIST geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  CLUBKIST: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUBKIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  CLUBKIST: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  SLEEPKIST: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  SLEEPKIST: 5,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ZITPLAATSEN geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  ZITPLAATSEN: \"AA\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ZITPLAATSEN geen 1 of 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1234\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"",
													"  ZITPLAATSEN: 3,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"0Z-ZZ\",    ",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZZZ\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"-1222\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1222-\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH- 1222\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan verkeerde REGISTRATIE-7",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-12-22\",",
													"  CALLSIGN: \"AA\",",
													"  FLARMCODE: 123456,",
													"  ZITPLAATSEN: 1,",
													"  ZELFSTART: 0,",
													"  CLUBKIST: 1,",
													"  TMG: 0,",
													"  SLEEPKIST: 0,",
													"  TYPE_ID: 12,",
													"  VOLGORDE: 12,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Vliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Leden",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Types geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?TYPES=601, ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "TYPES",
													"value": "601, ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIDTYPE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12345\",",
													"  LIDTYPE_ID: \"FOUT\",",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIERIST ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  LIERIST: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LIERIST geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  LIERIST: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  INSTRUCTEUR: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  INSTRUCTEUR: 2",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTLEIDER  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: \"AAAA\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTLEIDER  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"NAAM\": \"Jodokus de Marmot\",",
													"  \"VOORNAAM\": \"Jodokus\",",
													"  \"ACHTERNAAM\": \"Marmot\",",
													"  \"LIDNR\": \"20110011\",",
													"  \"LIDTYPE_ID\": 601,",
													"  \"EMAIL\": \"Jodokus@fabeltje.nl\",",
													"  \"MOBIEL\": \"06-5223311\",",
													"  \"NOODNUMMER\": \"112\",",
													"  \"STARTLEIDER\": 3",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HEEFT_BETAALD  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: \"1\",",
													"  HEEFT_BETAALD: \"ascii\",",
													"  PRIVACY: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HEEFT_BETAALD  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  HEEFT_BETAALD: 4,",
													"  PRIVACY: 1  ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan PRIVACY  geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  HEEFT_BETAALD: 4,",
													"  PRIVACY: 224 ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan PRIVACY  ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"20110011\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\",",
													"  STARTLEIDER: 0,",
													"  PRIVACY: \"ascii\"  ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Met avatar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    NAAM: \"buizerd\",",
													"    LIDTYPE_ID: 601,",
													"    AVATAR: \"http://avatar.org\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Leden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Rooster",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_DDI_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"@@@@\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"@@@@\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_STARTLEIDER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"@@@@\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_LIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"@@@\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OCHTEND_HULPLIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"@@@\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_DDI_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"@@@@\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"@@@@@\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_STARTLEIDER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"@@@@@\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_LIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"@@@@\",",
													"    MIDDAG_HULPLIERIST_ID: \"10804\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan MIDDAG_HULPLIERIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 0,",
													"    OCHTEND_DDI_ID: \"10001\",",
													"    OCHTEND_INSTRUCTEUR_ID: \"10115\",",
													"    OCHTEND_LIERIST_ID: \"10804\",",
													"    OCHTEND_HULPLIERIST_ID: \"10858\",",
													"    OCHTEND_STARTLEIDER_ID: \"10408\",",
													"    MIDDAG_DDI_ID: \"10470\",",
													"    MIDDAG_INSTRUCTEUR_ID: \"10408\",",
													"    MIDDAG_LIERIST_ID: \"10858\",",
													"    MIDDAG_HULPLIERIST_ID: \"@@@@@\",",
													"    MIDDAG_STARTLEIDER_ID: \"10213\",   ",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DDWV geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: \"II\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DDWV geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 2,",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUB_BEDRIJF geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"II\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan CLUB_BEDRIJF geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"1920-01-05\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 8",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-02-30\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"ascii\",",
													"    DDWV: 1,",
													"    CLUB_BEDRIJF: 1",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Rooster\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Leden",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    TIJDSTIP: \"1920-01-05\",",
													"    DATUM: \"1931-06-04\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    TIJDSTIP: \"1920-01-05\",",
													"    DATUM: \"1931-06-04\"",
													"};",
													"",
													"record.DATUM = pm.variables.get('test_datum');",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2004-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-02-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan POSITIE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: \"ascii\",",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: \"1\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORAANMELDING geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: \"ascii\",",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORAANMELDING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 6,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan OVERLAND_VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2023-01-10\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: \"ascii\",",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORKEUR_VLIEGTUIG_TYPE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2021-09-10\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, ascii\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VOORKEUR_VLIEGTUIG_TYPE geen int 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-12-29\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"ascii\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigLeden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Vliegtuigen",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    VLIEGTUIG_ID: \"ascii\",",
													"    TIJDSTIP: \"1920-01-05\",",
													"    DATUM: \"1931-06-04\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    VLIEGTUIG_ID: \"ascii\",",
													"    TIJDSTIP: \"1920-01-05\",",
													"    DATUM: \"1931-06-04\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    VLIEGTUIF_ID: 200,",
													"    DATUM: \"1931-06-04\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat geen double",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",    ",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: \"ascii\",",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat < -90",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: -100,",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lat > 90",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 100,",
													"  LONGITUDE: 5.453,",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon geen double",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",    ",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: \"ascii\",",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon < -180",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",    ",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: -200,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan Lon > 180",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  DATUM: \"2007-06-01\",    ",
													"  VLIEGTUIG_ID: 215,",
													"  LATITUDE: 43.67,",
													"  LONGITUDE: 200,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2020-02-30\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SNELHEID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  VLIEGTUIG_ID: 200,",
													"  SNELHEID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan HOOGTE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2010-01-30\",",
													"  VLIEGTUIG_ID: 214,",
													"  HOOGTE: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2026-02-10\",",
													"  VLIEGTUIG_ID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigVliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Startlijst",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: \"ascii\",",
													"    DATUM: \"2007-01-05\",",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM verkeerde datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2008-02-30\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGTUIG_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"2026-02-10\",",
													"  VLIEGTUIG_ID: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTMETHODE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    STARTMETHODE_ID: \"ascii\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD geen tijd",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"ascii\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD geen onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"1022\",",
													"    LANDINGSTIJD: \"10:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan STARTTIJD  na 24 uur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"24:22:10\",",
													"    LANDINGSTIJD: \"04:09:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD geen tijd",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"ascii\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD  onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"1622\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LANDINGSTIJD  na 24 uur",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    STARTTIJD: \"10:02:00\",",
													"    LANDINGSTIJD: \"24:00:00\",",
													"    VLIEGER_ID: \"10265\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VLIEGER_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"ascii\",",
													"    INZITTENDE_ID: \"10115\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INZITTENDE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: \"ascii\",",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: null,",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan VELD_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: null,",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: null,",
													"    SLEEP_HOOGTE: null,",
													"    VELD_ID: \"ascii\",",
													"    OPMERKINGEN: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEPKIST_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    DAGNUMMER: \"1\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    VLIEGER_ID: \"10115\",",
													"    INZITTENDE_ID: null,",
													"    VLIEGERNAAM: null,",
													"    INZITTENDENAAM: null,",
													"    SLEEPKIST_ID: \"ascii\",",
													"    SLEEP_HOOGTE: null",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan SLEEP_HOOGTE geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"    DATUM: \"1999-01-01\",",
													"    VLIEGTUIG_ID: \"200\",",
													"    SLEEP_HOOGTE: \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan DATUM onjuist formaat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record =",
													"{",
													"  DATUM: \"ascii\",",
													"  VLIEGTUIG_ID: 200",
													"}",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; -- ",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; -- "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Startlijst\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Tracks",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects LID_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LID_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LID_ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?INSTRUCTEUR_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "INSTRUCTEUR_ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    ID: \"ascii\",",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan START_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    \"LID_ID\": \"10001\",",
													"    \"INSTRUCTEUR_ID\": \"10470\",",
													"    \"TEKST\": \"Te laat bijgeprikt\",",
													"    \"START_ID\": \"ascii\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"ascii\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"ascii\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met LINK_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\",",
													"    LINK_ID: 12",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met INGEVOERD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\",",
													"    INGEVOERD: \"2020-02-01 08:08:41\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Tracks\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Progressie",
							"item": [
								{
									"name": "GetObjects LAASTE_AANPASSING geen bool",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LAATSTE_AANPASSING=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LAATSTE_AANPASSING",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObject met verkeerd ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Max geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Start < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?START=-1",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "START",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects LEERFASE_ID geen int",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?LEERFASE_ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "LEERFASE_ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects Verkeerde parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?ONJUIST=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "ONJUIST",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"ascii\",",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan LID_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"ascii\",",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan COMPETENTIE_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"ascii\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan INSTRUCTEUR_ID geen int",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: 10470,",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"ascii\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met LINK_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10001\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    LINK_ID:  11",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan met INGEVOERD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10001\",",
													"    COMPETENTIE_ID: \"22\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    INGEVOERD: \"2020-02-01 08:08:41\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetObjects SQL injectie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?VELDEN=* from ref_vliegtuigen; --",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "VELDEN",
													"value": "* from ref_vliegtuigen; --"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject ID is ascii",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject?ID=ascii",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											],
											"query": [
												{
													"key": "ID",
													"value": "ascii"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Progressie\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    if (pm.response.status == 405)",
									"        console.log(pm.response.headers.get(\"X-Error-Message\"));  ",
									"    pm.response.to.have.status(405);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Input missing 406",
					"item": [
						{
							"name": "Types",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"GROEP\": 1,",
													"  \"CODE\": \"CODE\",",
													"  \"EXT_REF\": \"EXT_REF\",",
													"  \"OMSCHRIJVING\": \"OMSCHRIJVING\",",
													"  \"SORTEER_VOLGORDE\": 99,",
													"  \"READ_ONLY\": 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen GROEP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen OMSCHRIJVING",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"//  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Types\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Competenties",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  \"GROEP\": 1,",
													"  \"CODE\": \"CODE\",",
													"  \"EXT_REF\": \"EXT_REF\",",
													"  \"OMSCHRIJVING\": \"OMSCHRIJVING\",",
													"  \"SORTEER_VOLGORDE\": 99,",
													"  \"READ_ONLY\": 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LEERFASE_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen ONDERWERP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"//    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DOCUMENTATIE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"//    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"}",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Competenties\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Daginfo",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Daginfo\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Vliegtuigen",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen REGISTRATIE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Vliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Leden",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"  \"NAAM\": \"Jodokus de Marmot\",",
													"  \"VOORNAAM\": \"Jodokus\",",
													"  \"ACHTERNAAM\": \"Marmot\",",
													"  \"LIDNR\": \"1100110011\",",
													"  \"LIDTYPE_ID\": 601,",
													"  \"EMAIL\": \"Jodokus@fabeltje.nl\",",
													"  \"MOBIEL\": \"06-5223311\",",
													"  \"NOODNUMMER\": \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LIDTYPE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"1100110011\",",
													"//  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Leden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Rooster",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let nieuwID =  pm.variables.get(\"nieuwID\");",
													"console.log(\"DeleteObject id=\" + nieuwID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"//    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen CLUB_BEDRIJF",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"//    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DDWV",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"//    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Rooster\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Leden",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2016-01-12\",",
													"  POSITIE: 12,",
													"//  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2020-01-12\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigLeden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Vliegtuigen",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-07-01\",",
													"  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2016-07-01\",",
													"//  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Aanmelden geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"2013-10-12\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Aanmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Aanmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Afmelden geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  TIJDSTIP: \"20012-10-26\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigVliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Startlijst",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"//  DATUM: \"2020-07-01\",",
													"  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{modify_database_url}}",
											"host": [
												"{{modify_database_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"2008-03-14\",",
													"//  VLIEGTUIG_ID: 215,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Startlijst\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Tracks",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record geen ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DATUM: \"2020-01-05\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen TEKST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"//    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = ",
													"{",
													"//    LID_ID: \"10001\",",
													"    INSTRUCTEUR_ID: \"10470\",",
													"    TEKST: \"Te laat bijgeprikt\",",
													"    START_ID: \"4\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Tracks\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Progressie",
							"item": [
								{
									"name": "GetObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logboek zonder LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/ProgressieKaart",
											"host": [
												"{{url}}"
											],
											"path": [
												"ProgressieKaart"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2",
													"disabled": true
												},
												{
													"key": "VELDEN",
													"value": "ID, LID_NAAM",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteObject zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/DeleteObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"DeleteObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record zonder ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  GROEP: 1,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record opslaan zonder data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"//    LID_ID: \"10063\",",
													"    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record geen COMPETENTIE_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    LID_ID: \"10063\",",
													"//    COMPETENTIE_ID: \"1\",",
													"    INSTRUCTEUR_ID: \"10804\",",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Progressie\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    if (pm.response.status == 406)",
									"        console.log(pm.response.headers.get(\"X-Error-Message\"));  ",
									"    pm.response.to.have.status(406);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Data bestaat al 409",
					"item": [
						{
							"name": "Types",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: 101,",
													"  CODE: \"CODE\",",
													"  EXT_REF: \"EXT_REF\",",
													"  OMSCHRIJVING: \"OMSCHRIJVING\",",
													"  SORTEER_VOLGORDE: 99,",
													"  READ_ONLY: 0",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Types\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Competenties",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record =",
													"{",
													"    ID: 22,",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Competenties\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Daginfo",
							"item": [
								{
									"name": "Nieuw record dubbele datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    DATUM: \"1999-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"let url = pm.variables.get(\"url\");",
													"pm.sendRequest({",
													"    url: url + \"/GetObjects?MAX=1\",",
													"    method: 'GET'},",
													"    function (err, res) {",
													"        let response = res.json();",
													"",
													"    record.DATUM = response.dataset[0].DATUM;",
													"    var body = JSON.stringify(record); ",
													"    pm.variables.set('request_body', body);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    ID: \"1\",",
													"    DATUM: \"2009-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Daginfo\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Vliegtuigen",
							"item": [
								{
									"name": "Nieuw record Dubbele registratie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  REGISTRATIE: \"PH-1529\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"200\",",
													"  REGISTRATIE: \"ZZ-ZZ\",",
													"  CALLSIGN: \"ZZ\",",
													"  FLARMCODE: \"AB12CD\",",
													"  ZITPLAATSEN: 2,",
													"  CLUBKIST: 1,",
													"  VOLGORDE: 99",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Vliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Leden",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  ID: \"10855\",",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"10101\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel LidNr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12091\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel inlognaam",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"  INLOGNAAM: \"momfer\", ",
													"  NAAM: \"Jodokus de Marmot\",",
													"  VOORNAAM: \"Jodokus\",",
													"  ACHTERNAAM: \"Marmot\",",
													"  LIDNR: \"12091\",",
													"  LIDTYPE_ID: 601,",
													"  EMAIL: \"Jodokus@fabeltje.nl\",",
													"  MOBIEL: \"06-5223311\",",
													"  NOODNUMMER: \"112\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Leden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Rooster",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    ID: 1,",
													"    DATUM: \"2020-01-05\",",
													"    DDWV: \"1\",",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record = {",
													"    DDWV: \"1\",",
													"    LID_ID: \"10265\", ",
													"    CLUB_BEDRIJF: \"0\"",
													"};",
													"",
													"let url = pm.variables.get(\"url\");",
													"pm.sendRequest({",
													"    url: url + \"/GetObjects?MAX=1\",",
													"    method: 'GET'},",
													"    function (err, res) {",
													"        let response = res.json();",
													"",
													"    record.DATUM = response.dataset[0].DATUM;",
													"    var body = JSON.stringify(record); ",
													"    pm.variables.set('request_body', body);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Rooster\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Leden",
							"item": [
								{
									"name": "Afmelden zonder aanmelding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"1966-06-10\",",
													"  LID_ID: 201121,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  POSITIE: 12,",
													"  LID_ID: 10408,",
													"  VOORAANMELDING: 1,",
													"  OVERLAND_VLIEGTUIG_ID: 200,",
													"  VOORKEUR_VLIEGTUIG_TYPE: \"404, 405\",",
													"  OPMERKINGEN: \"Heeft in de ochtend lierdienst\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  LID_ID: 10265",
													"}",
													"",
													"let url = pm.variables.get(\"url\");",
													"pm.sendRequest({",
													"    url: url + \"/GetObjects?MAX=1&IN=\" + record.LID_ID,",
													"    method: 'GET'},",
													"    function (err, res) {",
													"        let response = res.json();",
													"",
													"    record.DATUM = response.dataset[0].DATUM;",
													"    var body = JSON.stringify(record); ",
													"    pm.variables.set('request_body', body);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  DATUM: \"2020-06-06\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen LID_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  LID_ID: \"10001\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigLeden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Vliegtuigen",
							"item": [
								{
									"name": "Afmelden zonder aanmelding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"1944-05-06\",",
													"  VLIEGTUIG_ID: 77211,",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/Afmelden",
											"host": [
												"{{url}}"
											],
											"path": [
												"Afmelden"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  VLIEGTUIG_ID: 218,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Nieuw record Dubbele Datum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  DATUM: \"1999-01-01\",",
													"  VLIEGTUIG_ID: 201",
													"}",
													"",
													"let url = pm.variables.get(\"url\");",
													"pm.sendRequest({",
													"    url: url + \"/GetObjects?MAX=1&IN=\" + record.VLIEGTUIG_ID,",
													"    method: 'GET'},",
													"    function (err, res) {",
													"        let response = res.json();",
													"",
													"    record.DATUM = response.dataset[0].DATUM;",
													"    var body = JSON.stringify(record); ",
													"    pm.variables.set('request_body', body);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen DATUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  DATUM: \"2020-06-06\"",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update record aanpassen VLIEGTUIG_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 2,   ",
													"  VLIEGTUIG_ID: 216",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigVliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Startlijst",
							"item": [
								{
									"name": "Nieuw record Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = ",
													"{",
													"  ID: 1,",
													"  DATUM: \"2020-01-12\",",
													"  VLIEGTUIG_ID: 218,",
													"}",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Startlijst\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Tracks",
							"item": [
								{
									"name": "Nieuw record dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let record = {",
													"    ID: \"1\",",
													"    DATUM: \"2009-01-01\",",
													"    VELD_ID: \"901\",",
													"    BAAN_ID: \"109\",",
													"    BEDRIJF_ID: \"1550\",",
													"    DDWV: \"0\",",
													"    CLUB_BEDRIJF: \"1\"",
													"};",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Tracks\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Progressie",
							"item": [
								{
									"name": "Nieuw record opslaan Dubbel ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"let record =",
													"{",
													"    ID: 1, ",
													"    LID_ID: 10470,",
													"    COMPETENTIE_ID: 22,",
													"    LEERFASE_ID: \"1001\",",
													"    BLOK: \"900.00\",",
													"    ONDERWERP: \"ONDERWERP\",",
													"    DOCUMENTATIE: \"DOCUMENTATIE\"",
													"};",
													"",
													"console.log(\"Dubbel ID id=\" + record.ID);",
													"",
													"var body = JSON.stringify(record); ",
													"pm.variables.set('request_body', body);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}"
										},
										"url": {
											"raw": "{{url}}/SaveObject",
											"host": [
												"{{url}}"
											],
											"path": [
												"SaveObject"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Progressie\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    if (pm.response.status == 409)",
									"        console.log(pm.response.headers.get(\"X-Error-Message\"));  ",
									"    pm.response.to.have.status(409);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Data verwerking error 500",
					"item": [
						{
							"name": "Types",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Types\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Competenties",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Competenties\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Daginfo",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Daginfo\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Vliegtuigen",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Vliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Leden",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Leden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Rooster",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Rooster\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Leden",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigLeden\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Aanmelding Vliegtuigen",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"AanwezigVliegtuigen\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Startlijst",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Startlijst\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Tracks",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Tracks\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Progressie",
							"item": [
								{
									"name": "GetObjects VELDEN, onbekend veld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/GetObjects?MAX=2&VELDEN=ID, BESTAATNIET",
											"host": [
												"{{url}}"
											],
											"path": [
												"GetObjects"
											],
											"query": [
												{
													"key": "MAX",
													"value": "2"
												},
												{
													"key": "VELDEN",
													"value": "ID, BESTAATNIET"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let omgeving = eval(pm.globals.get(\"zetOmgeving\"));",
											"omgeving(\"Progressie\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{helios_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{helios_username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"-----> \" + pm.info.requestName);",
					"",
					"let currentYear=new Date().getFullYear();",
					"pm.variables.set('dit_jaar', currentYear);",
					"",
					"// voor verschillende testen hebben we een test datum nodig",
					"// voor iedere test run, kiezen we een unieke datum",
					"",
					"let test_datum = pm.variables.get('test_datum');      // wat was de vorige datum",
					"let datum_gezet = pm.variables.get('datum_gezet');    // tijdstip dat we test_datum bepaald hebben ",
					"",
					"",
					"if (test_datum ==  undefined)",
					"{",
					"    let dag = Math.floor(Math.random() * 28);",
					"    let maand = Math.floor(Math.random() * 12);",
					"    let jaar = Math.floor(Math.random() * 99) + 1900;",
					"",
					"    let datum = new Date(jaar, maand, dag);              // default 1 januari van dit jaar",
					"    let test_datum = datum.toISOString().substring(0,10);",
					"    console.log(\"test datum: \" + test_datum);",
					"    pm.variables.set('test_datum', test_datum);",
					"}",
					"else",
					"{",
					"    let tijdspanne = 9999999;",
					"    let nu = new Date();",
					"",
					"    if (datum_gezet)",
					"    {",
					"        tijdspanne = (Date(datum_gezet) - nu) / 1000;   // tijd geleden in sec",
					"    }",
					"",
					"    if (tijdspanne > 10*60)                  // is de tijd 10 min geleden gezet",
					"    {",
					"        let datum = new Date(test_datum);",
					"        datum.setDate(datum.getDate() + 1);     // 1 dag verder",
					"        pm.variables.set('test_datum', datum.toISOString().substring(0, 10));",
					"        pm.variables.set('datum_gezet', nu.toISOString());",
					"    }",
					"}  ",
					"",
					"postman.setGlobalVariable(\"zetOmgeving\", (onderdeel) => {",
					"    pm.variables.set(\"onderdeel\", onderdeel);",
					"",
					"    let base_url = pm.variables.get(\"base_url\");",
					"    let url = base_url + \"/\" + onderdeel;",
					"",
					"    // aanamken database tabellen & views",
					"    let aanmaken_database = pm.environment.get(\"create_database\");",
					"    let aanmaken_views = pm.environment.get(\"create_views\");",
					"",
					"    console.log(\"Url:\" + url);",
					"    pm.variables.set(\"url\", url);",
					"",
					"    if (aanmaken_database === \"false\")",
					"    {",
					"        pm.variables.set(\"create_database_url\", base_url + \"/dummy.php\");",
					"    }",
					"    else",
					"    {",
					"        pm.variables.set(\"create_database_url\", url + \"/CreateTable\");",
					"    }",
					"",
					"    if (aanmaken_views === \"false\")",
					"    {",
					"        pm.variables.set(\"create_view_url\", base_url + \"/dummy.php\");",
					"    }",
					"    else",
					"    {",
					"        pm.variables.set(\"create_view_url\", url + \"/CreateViews\");",
					"    }",
					"",
					"    // Modificatie database",
					"    let modify_database = pm.environment.get(\"modify_database\");",
					"",
					"    if (modify_database === \"false\")",
					"    {",
					"        pm.variables.set(\"modify_database_url\", base_url + \"/dummy.php\");",
					"        pm.variables.set(\"delete_database_url\", base_url + \"/dummy.php\");",
					"        pm.variables.set(\"restore_database_url\", base_url + \"/dummy.php\");",
					"        pm.variables.set(\"upload_avatar_url\", base_url + \"/dummy.php\");",
					"        pm.variables.set(\"aanmelden_url\", url + \"/dummy.php\");",
					"        pm.variables.set(\"afmelden_url\", url + \"/dummy.php\");",
					"    }",
					"    else",
					"    {",
					"        pm.variables.set(\"modify_database_url\", url + \"/SaveObject\");",
					"        pm.variables.set(\"delete_database_url\", url + \"/DeleteObject\");",
					"        pm.variables.set(\"restore_database_url\", url + \"/RestoreObject\");",
					"        pm.variables.set(\"upload_avatar_url\", url + \"/UploadAvatar\");",
					"        pm.variables.set(\"aanmelden_url\", url + \"/Aanmelden\");",
					"        pm.variables.set(\"afmelden_url\", url + \"/Afmelden\");",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}